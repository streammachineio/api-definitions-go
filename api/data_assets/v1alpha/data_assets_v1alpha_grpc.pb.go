// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: strmprivacy/api/data_assets/v1alpha/data_assets_v1alpha.proto

package data_assets

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataAssetsServiceClient is the client API for DataAssetsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataAssetsServiceClient interface {
	// List all data assets for an organization. The organization is derived from the calling user.
	ListDataAssets(ctx context.Context, in *ListDataAssetsRequest, opts ...grpc.CallOption) (*ListDataAssetsResponse, error)
	// Get a data asset by its id.
	GetDataAsset(ctx context.Context, in *GetDataAssetRequest, opts ...grpc.CallOption) (*GetDataAssetResponse, error)
	// Create or update a data asset.
	UpsertDataAsset(ctx context.Context, in *UpsertDataAssetRequest, opts ...grpc.CallOption) (*UpsertDataAssetResponse, error)
}

type dataAssetsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataAssetsServiceClient(cc grpc.ClientConnInterface) DataAssetsServiceClient {
	return &dataAssetsServiceClient{cc}
}

func (c *dataAssetsServiceClient) ListDataAssets(ctx context.Context, in *ListDataAssetsRequest, opts ...grpc.CallOption) (*ListDataAssetsResponse, error) {
	out := new(ListDataAssetsResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.data_assets.v1alpha.DataAssetsService/ListDataAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataAssetsServiceClient) GetDataAsset(ctx context.Context, in *GetDataAssetRequest, opts ...grpc.CallOption) (*GetDataAssetResponse, error) {
	out := new(GetDataAssetResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.data_assets.v1alpha.DataAssetsService/GetDataAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataAssetsServiceClient) UpsertDataAsset(ctx context.Context, in *UpsertDataAssetRequest, opts ...grpc.CallOption) (*UpsertDataAssetResponse, error) {
	out := new(UpsertDataAssetResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.data_assets.v1alpha.DataAssetsService/UpsertDataAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataAssetsServiceServer is the server API for DataAssetsService service.
// All implementations should embed UnimplementedDataAssetsServiceServer
// for forward compatibility
type DataAssetsServiceServer interface {
	// List all data assets for an organization. The organization is derived from the calling user.
	ListDataAssets(context.Context, *ListDataAssetsRequest) (*ListDataAssetsResponse, error)
	// Get a data asset by its id.
	GetDataAsset(context.Context, *GetDataAssetRequest) (*GetDataAssetResponse, error)
	// Create or update a data asset.
	UpsertDataAsset(context.Context, *UpsertDataAssetRequest) (*UpsertDataAssetResponse, error)
}

// UnimplementedDataAssetsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDataAssetsServiceServer struct {
}

func (UnimplementedDataAssetsServiceServer) ListDataAssets(context.Context, *ListDataAssetsRequest) (*ListDataAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataAssets not implemented")
}
func (UnimplementedDataAssetsServiceServer) GetDataAsset(context.Context, *GetDataAssetRequest) (*GetDataAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataAsset not implemented")
}
func (UnimplementedDataAssetsServiceServer) UpsertDataAsset(context.Context, *UpsertDataAssetRequest) (*UpsertDataAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertDataAsset not implemented")
}

// UnsafeDataAssetsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataAssetsServiceServer will
// result in compilation errors.
type UnsafeDataAssetsServiceServer interface {
	mustEmbedUnimplementedDataAssetsServiceServer()
}

func RegisterDataAssetsServiceServer(s grpc.ServiceRegistrar, srv DataAssetsServiceServer) {
	s.RegisterService(&DataAssetsService_ServiceDesc, srv)
}

func _DataAssetsService_ListDataAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDataAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataAssetsServiceServer).ListDataAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.data_assets.v1alpha.DataAssetsService/ListDataAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataAssetsServiceServer).ListDataAssets(ctx, req.(*ListDataAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataAssetsService_GetDataAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataAssetsServiceServer).GetDataAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.data_assets.v1alpha.DataAssetsService/GetDataAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataAssetsServiceServer).GetDataAsset(ctx, req.(*GetDataAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataAssetsService_UpsertDataAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertDataAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataAssetsServiceServer).UpsertDataAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.data_assets.v1alpha.DataAssetsService/UpsertDataAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataAssetsServiceServer).UpsertDataAsset(ctx, req.(*UpsertDataAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataAssetsService_ServiceDesc is the grpc.ServiceDesc for DataAssetsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataAssetsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "strmprivacy.api.data_assets.v1alpha.DataAssetsService",
	HandlerType: (*DataAssetsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDataAssets",
			Handler:    _DataAssetsService_ListDataAssets_Handler,
		},
		{
			MethodName: "GetDataAsset",
			Handler:    _DataAssetsService_GetDataAsset_Handler,
		},
		{
			MethodName: "UpsertDataAsset",
			Handler:    _DataAssetsService_UpsertDataAsset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "strmprivacy/api/data_assets/v1alpha/data_assets_v1alpha.proto",
}
