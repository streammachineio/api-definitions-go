// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: strmprivacy/api/ropa/v1alpha/ropa_v1alpha.proto

package ropa

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProjectPlansServiceClient is the client API for ProjectPlansService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectPlansServiceClient interface {
	GetRopa(ctx context.Context, in *GetRopaRequest, opts ...grpc.CallOption) (*GetRopaResponse, error)
	AddRopaEntry(ctx context.Context, in *AddRopaEntryRequest, opts ...grpc.CallOption) (*AddRopaEntryResponse, error)
}

type projectPlansServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectPlansServiceClient(cc grpc.ClientConnInterface) ProjectPlansServiceClient {
	return &projectPlansServiceClient{cc}
}

func (c *projectPlansServiceClient) GetRopa(ctx context.Context, in *GetRopaRequest, opts ...grpc.CallOption) (*GetRopaResponse, error) {
	out := new(GetRopaResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.ropa.v1alpha.ProjectPlansService/GetRopa", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectPlansServiceClient) AddRopaEntry(ctx context.Context, in *AddRopaEntryRequest, opts ...grpc.CallOption) (*AddRopaEntryResponse, error) {
	out := new(AddRopaEntryResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.ropa.v1alpha.ProjectPlansService/AddRopaEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectPlansServiceServer is the server API for ProjectPlansService service.
// All implementations should embed UnimplementedProjectPlansServiceServer
// for forward compatibility
type ProjectPlansServiceServer interface {
	GetRopa(context.Context, *GetRopaRequest) (*GetRopaResponse, error)
	AddRopaEntry(context.Context, *AddRopaEntryRequest) (*AddRopaEntryResponse, error)
}

// UnimplementedProjectPlansServiceServer should be embedded to have forward compatible implementations.
type UnimplementedProjectPlansServiceServer struct {
}

func (UnimplementedProjectPlansServiceServer) GetRopa(context.Context, *GetRopaRequest) (*GetRopaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRopa not implemented")
}
func (UnimplementedProjectPlansServiceServer) AddRopaEntry(context.Context, *AddRopaEntryRequest) (*AddRopaEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRopaEntry not implemented")
}

// UnsafeProjectPlansServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectPlansServiceServer will
// result in compilation errors.
type UnsafeProjectPlansServiceServer interface {
	mustEmbedUnimplementedProjectPlansServiceServer()
}

func RegisterProjectPlansServiceServer(s grpc.ServiceRegistrar, srv ProjectPlansServiceServer) {
	s.RegisterService(&ProjectPlansService_ServiceDesc, srv)
}

func _ProjectPlansService_GetRopa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRopaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectPlansServiceServer).GetRopa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.ropa.v1alpha.ProjectPlansService/GetRopa",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectPlansServiceServer).GetRopa(ctx, req.(*GetRopaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectPlansService_AddRopaEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRopaEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectPlansServiceServer).AddRopaEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.ropa.v1alpha.ProjectPlansService/AddRopaEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectPlansServiceServer).AddRopaEntry(ctx, req.(*AddRopaEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectPlansService_ServiceDesc is the grpc.ServiceDesc for ProjectPlansService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectPlansService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "strmprivacy.api.ropa.v1alpha.ProjectPlansService",
	HandlerType: (*ProjectPlansServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRopa",
			Handler:    _ProjectPlansService_GetRopa_Handler,
		},
		{
			MethodName: "AddRopaEntry",
			Handler:    _ProjectPlansService_AddRopaEntry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "strmprivacy/api/ropa/v1alpha/ropa_v1alpha.proto",
}
