// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: strmprivacy/api/monitoring/v1/monitoring.proto

package monitoring

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MonitoringServiceClient is the client API for MonitoringService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MonitoringServiceClient interface {
	//
	// will be called by end users from the cli or console, to retrieve entity states
	// and indicate them to users.
	GetEntityState(ctx context.Context, in *GetEntityStateRequest, opts ...grpc.CallOption) (MonitoringService_GetEntityStateClient, error)
	//
	// can be called via the CLI and the Console, to get the latest entity state for all entities included
	// in this request
	GetLatestEntityStates(ctx context.Context, in *GetLatestEntityStatesRequest, opts ...grpc.CallOption) (*GetLatestEntityStatesResponse, error)
	//
	// will be called from entity agents so that they can send the entity states
	// of items they're responsible for to the monitoring service.
	UpdateEntityStates(ctx context.Context, opts ...grpc.CallOption) (MonitoringService_UpdateEntityStatesClient, error)
}

type monitoringServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMonitoringServiceClient(cc grpc.ClientConnInterface) MonitoringServiceClient {
	return &monitoringServiceClient{cc}
}

func (c *monitoringServiceClient) GetEntityState(ctx context.Context, in *GetEntityStateRequest, opts ...grpc.CallOption) (MonitoringService_GetEntityStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &MonitoringService_ServiceDesc.Streams[0], "/strmprivacy.api.monitoring.v1.MonitoringService/GetEntityState", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitoringServiceGetEntityStateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MonitoringService_GetEntityStateClient interface {
	Recv() (*GetEntityStateResponse, error)
	grpc.ClientStream
}

type monitoringServiceGetEntityStateClient struct {
	grpc.ClientStream
}

func (x *monitoringServiceGetEntityStateClient) Recv() (*GetEntityStateResponse, error) {
	m := new(GetEntityStateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *monitoringServiceClient) GetLatestEntityStates(ctx context.Context, in *GetLatestEntityStatesRequest, opts ...grpc.CallOption) (*GetLatestEntityStatesResponse, error) {
	out := new(GetLatestEntityStatesResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.monitoring.v1.MonitoringService/GetLatestEntityStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringServiceClient) UpdateEntityStates(ctx context.Context, opts ...grpc.CallOption) (MonitoringService_UpdateEntityStatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &MonitoringService_ServiceDesc.Streams[1], "/strmprivacy.api.monitoring.v1.MonitoringService/UpdateEntityStates", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitoringServiceUpdateEntityStatesClient{stream}
	return x, nil
}

type MonitoringService_UpdateEntityStatesClient interface {
	Send(*UpdateEntityStatesRequest) error
	CloseAndRecv() (*UpdateEntityStatesResponse, error)
	grpc.ClientStream
}

type monitoringServiceUpdateEntityStatesClient struct {
	grpc.ClientStream
}

func (x *monitoringServiceUpdateEntityStatesClient) Send(m *UpdateEntityStatesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *monitoringServiceUpdateEntityStatesClient) CloseAndRecv() (*UpdateEntityStatesResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UpdateEntityStatesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MonitoringServiceServer is the server API for MonitoringService service.
// All implementations must embed UnimplementedMonitoringServiceServer
// for forward compatibility
type MonitoringServiceServer interface {
	//
	// will be called by end users from the cli or console, to retrieve entity states
	// and indicate them to users.
	GetEntityState(*GetEntityStateRequest, MonitoringService_GetEntityStateServer) error
	//
	// can be called via the CLI and the Console, to get the latest entity state for all entities included
	// in this request
	GetLatestEntityStates(context.Context, *GetLatestEntityStatesRequest) (*GetLatestEntityStatesResponse, error)
	//
	// will be called from entity agents so that they can send the entity states
	// of items they're responsible for to the monitoring service.
	UpdateEntityStates(MonitoringService_UpdateEntityStatesServer) error
	mustEmbedUnimplementedMonitoringServiceServer()
}

// UnimplementedMonitoringServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMonitoringServiceServer struct {
}

func (UnimplementedMonitoringServiceServer) GetEntityState(*GetEntityStateRequest, MonitoringService_GetEntityStateServer) error {
	return status.Errorf(codes.Unimplemented, "method GetEntityState not implemented")
}
func (UnimplementedMonitoringServiceServer) GetLatestEntityStates(context.Context, *GetLatestEntityStatesRequest) (*GetLatestEntityStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestEntityStates not implemented")
}
func (UnimplementedMonitoringServiceServer) UpdateEntityStates(MonitoringService_UpdateEntityStatesServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateEntityStates not implemented")
}
func (UnimplementedMonitoringServiceServer) mustEmbedUnimplementedMonitoringServiceServer() {}

// UnsafeMonitoringServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonitoringServiceServer will
// result in compilation errors.
type UnsafeMonitoringServiceServer interface {
	mustEmbedUnimplementedMonitoringServiceServer()
}

func RegisterMonitoringServiceServer(s grpc.ServiceRegistrar, srv MonitoringServiceServer) {
	s.RegisterService(&MonitoringService_ServiceDesc, srv)
}

func _MonitoringService_GetEntityState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetEntityStateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonitoringServiceServer).GetEntityState(m, &monitoringServiceGetEntityStateServer{stream})
}

type MonitoringService_GetEntityStateServer interface {
	Send(*GetEntityStateResponse) error
	grpc.ServerStream
}

type monitoringServiceGetEntityStateServer struct {
	grpc.ServerStream
}

func (x *monitoringServiceGetEntityStateServer) Send(m *GetEntityStateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MonitoringService_GetLatestEntityStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestEntityStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringServiceServer).GetLatestEntityStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.monitoring.v1.MonitoringService/GetLatestEntityStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringServiceServer).GetLatestEntityStates(ctx, req.(*GetLatestEntityStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringService_UpdateEntityStates_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MonitoringServiceServer).UpdateEntityStates(&monitoringServiceUpdateEntityStatesServer{stream})
}

type MonitoringService_UpdateEntityStatesServer interface {
	SendAndClose(*UpdateEntityStatesResponse) error
	Recv() (*UpdateEntityStatesRequest, error)
	grpc.ServerStream
}

type monitoringServiceUpdateEntityStatesServer struct {
	grpc.ServerStream
}

func (x *monitoringServiceUpdateEntityStatesServer) SendAndClose(m *UpdateEntityStatesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *monitoringServiceUpdateEntityStatesServer) Recv() (*UpdateEntityStatesRequest, error) {
	m := new(UpdateEntityStatesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MonitoringService_ServiceDesc is the grpc.ServiceDesc for MonitoringService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MonitoringService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "strmprivacy.api.monitoring.v1.MonitoringService",
	HandlerType: (*MonitoringServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLatestEntityStates",
			Handler:    _MonitoringService_GetLatestEntityStates_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetEntityState",
			Handler:       _MonitoringService_GetEntityState_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpdateEntityStates",
			Handler:       _MonitoringService_UpdateEntityStates_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "strmprivacy/api/monitoring/v1/monitoring.proto",
}
