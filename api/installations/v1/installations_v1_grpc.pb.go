// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: strmprivacy/api/installations/v1/installations_v1.proto

package installations

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InstallationsServiceClient is the client API for InstallationsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InstallationsServiceClient interface {
	GetInstallation(ctx context.Context, in *GetInstallationRequest, opts ...grpc.CallOption) (*GetInstallationResponse, error)
	ListInstallations(ctx context.Context, in *ListInstallationsRequest, opts ...grpc.CallOption) (*ListInstallationsResponse, error)
	// Deprecated: Do not use.
	GetProjectInstallation(ctx context.Context, in *GetProjectInstallationRequest, opts ...grpc.CallOption) (*GetProjectInstallationResponse, error)
	// Deprecated: Do not use.
	ListInstallationProjects(ctx context.Context, in *ListInstallationProjectsRequest, opts ...grpc.CallOption) (*ListInstallationProjectsResponse, error)
}

type installationsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInstallationsServiceClient(cc grpc.ClientConnInterface) InstallationsServiceClient {
	return &installationsServiceClient{cc}
}

func (c *installationsServiceClient) GetInstallation(ctx context.Context, in *GetInstallationRequest, opts ...grpc.CallOption) (*GetInstallationResponse, error) {
	out := new(GetInstallationResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.installations.v1.InstallationsService/GetInstallation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installationsServiceClient) ListInstallations(ctx context.Context, in *ListInstallationsRequest, opts ...grpc.CallOption) (*ListInstallationsResponse, error) {
	out := new(ListInstallationsResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.installations.v1.InstallationsService/ListInstallations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *installationsServiceClient) GetProjectInstallation(ctx context.Context, in *GetProjectInstallationRequest, opts ...grpc.CallOption) (*GetProjectInstallationResponse, error) {
	out := new(GetProjectInstallationResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.installations.v1.InstallationsService/GetProjectInstallation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *installationsServiceClient) ListInstallationProjects(ctx context.Context, in *ListInstallationProjectsRequest, opts ...grpc.CallOption) (*ListInstallationProjectsResponse, error) {
	out := new(ListInstallationProjectsResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.installations.v1.InstallationsService/ListInstallationProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InstallationsServiceServer is the server API for InstallationsService service.
// All implementations should embed UnimplementedInstallationsServiceServer
// for forward compatibility
type InstallationsServiceServer interface {
	GetInstallation(context.Context, *GetInstallationRequest) (*GetInstallationResponse, error)
	ListInstallations(context.Context, *ListInstallationsRequest) (*ListInstallationsResponse, error)
	// Deprecated: Do not use.
	GetProjectInstallation(context.Context, *GetProjectInstallationRequest) (*GetProjectInstallationResponse, error)
	// Deprecated: Do not use.
	ListInstallationProjects(context.Context, *ListInstallationProjectsRequest) (*ListInstallationProjectsResponse, error)
}

// UnimplementedInstallationsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedInstallationsServiceServer struct {
}

func (UnimplementedInstallationsServiceServer) GetInstallation(context.Context, *GetInstallationRequest) (*GetInstallationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstallation not implemented")
}
func (UnimplementedInstallationsServiceServer) ListInstallations(context.Context, *ListInstallationsRequest) (*ListInstallationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInstallations not implemented")
}
func (UnimplementedInstallationsServiceServer) GetProjectInstallation(context.Context, *GetProjectInstallationRequest) (*GetProjectInstallationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectInstallation not implemented")
}
func (UnimplementedInstallationsServiceServer) ListInstallationProjects(context.Context, *ListInstallationProjectsRequest) (*ListInstallationProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInstallationProjects not implemented")
}

// UnsafeInstallationsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InstallationsServiceServer will
// result in compilation errors.
type UnsafeInstallationsServiceServer interface {
	mustEmbedUnimplementedInstallationsServiceServer()
}

func RegisterInstallationsServiceServer(s grpc.ServiceRegistrar, srv InstallationsServiceServer) {
	s.RegisterService(&InstallationsService_ServiceDesc, srv)
}

func _InstallationsService_GetInstallation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstallationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallationsServiceServer).GetInstallation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.installations.v1.InstallationsService/GetInstallation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallationsServiceServer).GetInstallation(ctx, req.(*GetInstallationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallationsService_ListInstallations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInstallationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallationsServiceServer).ListInstallations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.installations.v1.InstallationsService/ListInstallations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallationsServiceServer).ListInstallations(ctx, req.(*ListInstallationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallationsService_GetProjectInstallation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectInstallationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallationsServiceServer).GetProjectInstallation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.installations.v1.InstallationsService/GetProjectInstallation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallationsServiceServer).GetProjectInstallation(ctx, req.(*GetProjectInstallationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallationsService_ListInstallationProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInstallationProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallationsServiceServer).ListInstallationProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.installations.v1.InstallationsService/ListInstallationProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallationsServiceServer).ListInstallationProjects(ctx, req.(*ListInstallationProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InstallationsService_ServiceDesc is the grpc.ServiceDesc for InstallationsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InstallationsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "strmprivacy.api.installations.v1.InstallationsService",
	HandlerType: (*InstallationsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInstallation",
			Handler:    _InstallationsService_GetInstallation_Handler,
		},
		{
			MethodName: "ListInstallations",
			Handler:    _InstallationsService_ListInstallations_Handler,
		},
		{
			MethodName: "GetProjectInstallation",
			Handler:    _InstallationsService_GetProjectInstallation_Handler,
		},
		{
			MethodName: "ListInstallationProjects",
			Handler:    _InstallationsService_ListInstallationProjects_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "strmprivacy/api/installations/v1/installations_v1.proto",
}
