// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: strmprivacy/api/agents/v1/streams_agent_v1.proto

package agents

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StreamsAgentServiceClient is the client API for StreamsAgentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamsAgentServiceClient interface {
	GetStreams(ctx context.Context, in *GetStreamsRequest, opts ...grpc.CallOption) (*GetStreamsResponse, error)
}

type streamsAgentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamsAgentServiceClient(cc grpc.ClientConnInterface) StreamsAgentServiceClient {
	return &streamsAgentServiceClient{cc}
}

func (c *streamsAgentServiceClient) GetStreams(ctx context.Context, in *GetStreamsRequest, opts ...grpc.CallOption) (*GetStreamsResponse, error) {
	out := new(GetStreamsResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.agents.v1.StreamsAgentService/GetStreams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamsAgentServiceServer is the server API for StreamsAgentService service.
// All implementations should embed UnimplementedStreamsAgentServiceServer
// for forward compatibility
type StreamsAgentServiceServer interface {
	GetStreams(context.Context, *GetStreamsRequest) (*GetStreamsResponse, error)
}

// UnimplementedStreamsAgentServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStreamsAgentServiceServer struct {
}

func (UnimplementedStreamsAgentServiceServer) GetStreams(context.Context, *GetStreamsRequest) (*GetStreamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreams not implemented")
}

// UnsafeStreamsAgentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamsAgentServiceServer will
// result in compilation errors.
type UnsafeStreamsAgentServiceServer interface {
	mustEmbedUnimplementedStreamsAgentServiceServer()
}

func RegisterStreamsAgentServiceServer(s grpc.ServiceRegistrar, srv StreamsAgentServiceServer) {
	s.RegisterService(&StreamsAgentService_ServiceDesc, srv)
}

func _StreamsAgentService_GetStreams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamsAgentServiceServer).GetStreams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.agents.v1.StreamsAgentService/GetStreams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamsAgentServiceServer).GetStreams(ctx, req.(*GetStreamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StreamsAgentService_ServiceDesc is the grpc.ServiceDesc for StreamsAgentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamsAgentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "strmprivacy.api.agents.v1.StreamsAgentService",
	HandlerType: (*StreamsAgentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStreams",
			Handler:    _StreamsAgentService_GetStreams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "strmprivacy/api/agents/v1/streams_agent_v1.proto",
}
