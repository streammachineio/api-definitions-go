// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.18.1
// source: strmprivacy/api/rtbf/v1/rtbf_v1.proto

package rtbf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RtbfServiceClient is the client API for RtbfService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RtbfServiceClient interface {
	GetKeyLinks(ctx context.Context, in *GetKeyLinksRequest, opts ...grpc.CallOption) (*GetKeyLinksResponse, error)
	AddKeyLink(ctx context.Context, in *AddKeyLinkRequest, opts ...grpc.CallOption) (*AddKeyLinkResponse, error)
}

type rtbfServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRtbfServiceClient(cc grpc.ClientConnInterface) RtbfServiceClient {
	return &rtbfServiceClient{cc}
}

func (c *rtbfServiceClient) GetKeyLinks(ctx context.Context, in *GetKeyLinksRequest, opts ...grpc.CallOption) (*GetKeyLinksResponse, error) {
	out := new(GetKeyLinksResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.rtbf.v1.RtbfService/GetKeyLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rtbfServiceClient) AddKeyLink(ctx context.Context, in *AddKeyLinkRequest, opts ...grpc.CallOption) (*AddKeyLinkResponse, error) {
	out := new(AddKeyLinkResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.rtbf.v1.RtbfService/AddKeyLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RtbfServiceServer is the server API for RtbfService service.
// All implementations must embed UnimplementedRtbfServiceServer
// for forward compatibility
type RtbfServiceServer interface {
	GetKeyLinks(context.Context, *GetKeyLinksRequest) (*GetKeyLinksResponse, error)
	AddKeyLink(context.Context, *AddKeyLinkRequest) (*AddKeyLinkResponse, error)
	mustEmbedUnimplementedRtbfServiceServer()
}

// UnimplementedRtbfServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRtbfServiceServer struct {
}

func (UnimplementedRtbfServiceServer) GetKeyLinks(context.Context, *GetKeyLinksRequest) (*GetKeyLinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyLinks not implemented")
}
func (UnimplementedRtbfServiceServer) AddKeyLink(context.Context, *AddKeyLinkRequest) (*AddKeyLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddKeyLink not implemented")
}
func (UnimplementedRtbfServiceServer) mustEmbedUnimplementedRtbfServiceServer() {}

// UnsafeRtbfServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RtbfServiceServer will
// result in compilation errors.
type UnsafeRtbfServiceServer interface {
	mustEmbedUnimplementedRtbfServiceServer()
}

func RegisterRtbfServiceServer(s grpc.ServiceRegistrar, srv RtbfServiceServer) {
	s.RegisterService(&RtbfService_ServiceDesc, srv)
}

func _RtbfService_GetKeyLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RtbfServiceServer).GetKeyLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.rtbf.v1.RtbfService/GetKeyLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RtbfServiceServer).GetKeyLinks(ctx, req.(*GetKeyLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RtbfService_AddKeyLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddKeyLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RtbfServiceServer).AddKeyLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.rtbf.v1.RtbfService/AddKeyLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RtbfServiceServer).AddKeyLink(ctx, req.(*AddKeyLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RtbfService_ServiceDesc is the grpc.ServiceDesc for RtbfService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RtbfService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "strmprivacy.api.rtbf.v1.RtbfService",
	HandlerType: (*RtbfServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetKeyLinks",
			Handler:    _RtbfService_GetKeyLinks_Handler,
		},
		{
			MethodName: "AddKeyLink",
			Handler:    _RtbfService_AddKeyLink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "strmprivacy/api/rtbf/v1/rtbf_v1.proto",
}
