// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: strmprivacy/api/batch_jobs/v1/batch_jobs_v1.proto

package batch_jobs

import (
	v1 "github.com/strmprivacy/api-definitions-go/v2/api/entities/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	datetime "google.golang.org/genproto/googleapis/type/datetime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BatchJobStateType int32

const (
	BatchJobStateType_BATCH_JOB_STATE_TYPE_UNSPECIFIED BatchJobStateType = 0
	BatchJobStateType_PENDING                          BatchJobStateType = 1
	BatchJobStateType_STARTED                          BatchJobStateType = 2
	BatchJobStateType_ERROR_STARTING                   BatchJobStateType = 3
	BatchJobStateType_RUNNING                          BatchJobStateType = 4
	BatchJobStateType_FINISHED                         BatchJobStateType = 5
	BatchJobStateType_ERROR                            BatchJobStateType = 6
)

// Enum value maps for BatchJobStateType.
var (
	BatchJobStateType_name = map[int32]string{
		0: "BATCH_JOB_STATE_TYPE_UNSPECIFIED",
		1: "PENDING",
		2: "STARTED",
		3: "ERROR_STARTING",
		4: "RUNNING",
		5: "FINISHED",
		6: "ERROR",
	}
	BatchJobStateType_value = map[string]int32{
		"BATCH_JOB_STATE_TYPE_UNSPECIFIED": 0,
		"PENDING":                          1,
		"STARTED":                          2,
		"ERROR_STARTING":                   3,
		"RUNNING":                          4,
		"FINISHED":                         5,
		"ERROR":                            6,
	}
)

func (x BatchJobStateType) Enum() *BatchJobStateType {
	p := new(BatchJobStateType)
	*p = x
	return p
}

func (x BatchJobStateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BatchJobStateType) Descriptor() protoreflect.EnumDescriptor {
	return file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_enumTypes[0].Descriptor()
}

func (BatchJobStateType) Type() protoreflect.EnumType {
	return &file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_enumTypes[0]
}

func (x BatchJobStateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BatchJobStateType.Descriptor instead.
func (BatchJobStateType) EnumDescriptor() ([]byte, []int) {
	return file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_rawDescGZIP(), []int{0}
}

type GetBatchJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ref *BatchJobRef `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
}

func (x *GetBatchJobRequest) Reset() {
	*x = GetBatchJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBatchJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBatchJobRequest) ProtoMessage() {}

func (x *GetBatchJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBatchJobRequest.ProtoReflect.Descriptor instead.
func (*GetBatchJobRequest) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_rawDescGZIP(), []int{0}
}

func (x *GetBatchJobRequest) GetRef() *BatchJobRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

type GetBatchJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchJob *BatchJob `protobuf:"bytes,1,opt,name=batch_job,json=batchJob,proto3" json:"batch_job,omitempty"`
}

func (x *GetBatchJobResponse) Reset() {
	*x = GetBatchJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBatchJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBatchJobResponse) ProtoMessage() {}

func (x *GetBatchJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBatchJobResponse.ProtoReflect.Descriptor instead.
func (*GetBatchJobResponse) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_rawDescGZIP(), []int{1}
}

func (x *GetBatchJobResponse) GetBatchJob() *BatchJob {
	if x != nil {
		return x.BatchJob
	}
	return nil
}

type ListBatchJobsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BillingId string `protobuf:"bytes,1,opt,name=billing_id,json=billingId,proto3" json:"billing_id,omitempty"`
}

func (x *ListBatchJobsRequest) Reset() {
	*x = ListBatchJobsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBatchJobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBatchJobsRequest) ProtoMessage() {}

func (x *ListBatchJobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBatchJobsRequest.ProtoReflect.Descriptor instead.
func (*ListBatchJobsRequest) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_rawDescGZIP(), []int{2}
}

func (x *ListBatchJobsRequest) GetBillingId() string {
	if x != nil {
		return x.BillingId
	}
	return ""
}

type ListBatchJobsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchJobs []*BatchJob `protobuf:"bytes,1,rep,name=batch_jobs,json=batchJobs,proto3" json:"batch_jobs,omitempty"`
}

func (x *ListBatchJobsResponse) Reset() {
	*x = ListBatchJobsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBatchJobsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBatchJobsResponse) ProtoMessage() {}

func (x *ListBatchJobsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBatchJobsResponse.ProtoReflect.Descriptor instead.
func (*ListBatchJobsResponse) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_rawDescGZIP(), []int{3}
}

func (x *ListBatchJobsResponse) GetBatchJobs() []*BatchJob {
	if x != nil {
		return x.BatchJobs
	}
	return nil
}

type CreateBatchJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchJob *BatchJob `protobuf:"bytes,1,opt,name=batch_job,json=batchJob,proto3" json:"batch_job,omitempty"`
}

func (x *CreateBatchJobRequest) Reset() {
	*x = CreateBatchJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBatchJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBatchJobRequest) ProtoMessage() {}

func (x *CreateBatchJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBatchJobRequest.ProtoReflect.Descriptor instead.
func (*CreateBatchJobRequest) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_rawDescGZIP(), []int{4}
}

func (x *CreateBatchJobRequest) GetBatchJob() *BatchJob {
	if x != nil {
		return x.BatchJob
	}
	return nil
}

type CreateBatchJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchJob *BatchJob `protobuf:"bytes,1,opt,name=batch_job,json=batchJob,proto3" json:"batch_job,omitempty"`
}

func (x *CreateBatchJobResponse) Reset() {
	*x = CreateBatchJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBatchJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBatchJobResponse) ProtoMessage() {}

func (x *CreateBatchJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBatchJobResponse.ProtoReflect.Descriptor instead.
func (*CreateBatchJobResponse) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_rawDescGZIP(), []int{5}
}

func (x *CreateBatchJobResponse) GetBatchJob() *BatchJob {
	if x != nil {
		return x.BatchJob
	}
	return nil
}

type DeleteBatchJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ref *BatchJobRef `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
}

func (x *DeleteBatchJobRequest) Reset() {
	*x = DeleteBatchJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBatchJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBatchJobRequest) ProtoMessage() {}

func (x *DeleteBatchJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBatchJobRequest.ProtoReflect.Descriptor instead.
func (*DeleteBatchJobRequest) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteBatchJobRequest) GetRef() *BatchJobRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

type DeleteBatchJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteBatchJobResponse) Reset() {
	*x = DeleteBatchJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBatchJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBatchJobResponse) ProtoMessage() {}

func (x *DeleteBatchJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBatchJobResponse.ProtoReflect.Descriptor instead.
func (*DeleteBatchJobResponse) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_rawDescGZIP(), []int{7}
}

// (-- api-linter: core::0134::request-mask-required=disabled
//     aip.dev/not-precedent: This RPC only updates one field. --)
type UpdateBatchJobStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ref           *BatchJobRef   `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	BatchJobState *BatchJobState `protobuf:"bytes,2,opt,name=batch_job_state,json=batchJobState,proto3" json:"batch_job_state,omitempty"`
}

func (x *UpdateBatchJobStateRequest) Reset() {
	*x = UpdateBatchJobStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBatchJobStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBatchJobStateRequest) ProtoMessage() {}

func (x *UpdateBatchJobStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBatchJobStateRequest.ProtoReflect.Descriptor instead.
func (*UpdateBatchJobStateRequest) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateBatchJobStateRequest) GetRef() *BatchJobRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *UpdateBatchJobStateRequest) GetBatchJobState() *BatchJobState {
	if x != nil {
		return x.BatchJobState
	}
	return nil
}

type UpdateBatchJobStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateBatchJobStateResponse) Reset() {
	*x = UpdateBatchJobStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBatchJobStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBatchJobStateResponse) ProtoMessage() {}

func (x *UpdateBatchJobStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBatchJobStateResponse.ProtoReflect.Descriptor instead.
func (*UpdateBatchJobStateResponse) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_rawDescGZIP(), []int{9}
}

// Batch Jobs
//Currently we  only support:
//- CSV as DataFormat type
//- a clean database for every batch job
//- CSV files with a header row, because the header is needed to get the field names
type BatchJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ref                *BatchJobRef         `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	States             []*BatchJobState     `protobuf:"bytes,2,rep,name=states,proto3" json:"states,omitempty"`
	SourceData         *DataConnector       `protobuf:"bytes,3,opt,name=source_data,json=sourceData,proto3" json:"source_data,omitempty"`
	Consent            *ConsentConfig       `protobuf:"bytes,4,opt,name=consent,proto3" json:"consent,omitempty"`
	Encryption         *EncryptionConfig    `protobuf:"bytes,5,opt,name=encryption,proto3" json:"encryption,omitempty"`
	EventContractRef   *v1.EventContractRef `protobuf:"bytes,6,opt,name=event_contract_ref,json=eventContractRef,proto3" json:"event_contract_ref,omitempty"`
	EncryptedData      *EncryptedData       `protobuf:"bytes,7,opt,name=encrypted_data,json=encryptedData,proto3" json:"encrypted_data,omitempty"`
	EncryptionKeysData *EncryptionKeysData  `protobuf:"bytes,8,opt,name=encryption_keys_data,json=encryptionKeysData,proto3" json:"encryption_keys_data,omitempty"`
	DerivedData        []*DerivedData       `protobuf:"bytes,9,rep,name=derived_data,json=derivedData,proto3" json:"derived_data,omitempty"`
}

func (x *BatchJob) Reset() {
	*x = BatchJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchJob) ProtoMessage() {}

func (x *BatchJob) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchJob.ProtoReflect.Descriptor instead.
func (*BatchJob) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_rawDescGZIP(), []int{10}
}

func (x *BatchJob) GetRef() *BatchJobRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *BatchJob) GetStates() []*BatchJobState {
	if x != nil {
		return x.States
	}
	return nil
}

func (x *BatchJob) GetSourceData() *DataConnector {
	if x != nil {
		return x.SourceData
	}
	return nil
}

func (x *BatchJob) GetConsent() *ConsentConfig {
	if x != nil {
		return x.Consent
	}
	return nil
}

func (x *BatchJob) GetEncryption() *EncryptionConfig {
	if x != nil {
		return x.Encryption
	}
	return nil
}

func (x *BatchJob) GetEventContractRef() *v1.EventContractRef {
	if x != nil {
		return x.EventContractRef
	}
	return nil
}

func (x *BatchJob) GetEncryptedData() *EncryptedData {
	if x != nil {
		return x.EncryptedData
	}
	return nil
}

func (x *BatchJob) GetEncryptionKeysData() *EncryptionKeysData {
	if x != nil {
		return x.EncryptionKeysData
	}
	return nil
}

func (x *BatchJob) GetDerivedData() []*DerivedData {
	if x != nil {
		return x.DerivedData
	}
	return nil
}

type BatchJobRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BillingId string `protobuf:"bytes,1,opt,name=billing_id,json=billingId,proto3" json:"billing_id,omitempty"`
	// the UUIDv4 of the job
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *BatchJobRef) Reset() {
	*x = BatchJobRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchJobRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchJobRef) ProtoMessage() {}

func (x *BatchJobRef) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchJobRef.ProtoReflect.Descriptor instead.
func (*BatchJobRef) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_rawDescGZIP(), []int{11}
}

func (x *BatchJobRef) GetBillingId() string {
	if x != nil {
		return x.BillingId
	}
	return ""
}

func (x *BatchJobRef) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type BatchJobState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateTime    *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=state_time,json=stateTime,proto3" json:"state_time,omitempty"`
	State        BatchJobStateType      `protobuf:"varint,2,opt,name=state,proto3,enum=strmprivacy.api.batch_jobs.v1.BatchJobStateType" json:"state,omitempty"`
	ErrorMessage string                 `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *BatchJobState) Reset() {
	*x = BatchJobState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchJobState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchJobState) ProtoMessage() {}

func (x *BatchJobState) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchJobState.ProtoReflect.Descriptor instead.
func (*BatchJobState) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_rawDescGZIP(), []int{12}
}

func (x *BatchJobState) GetStateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StateTime
	}
	return nil
}

func (x *BatchJobState) GetState() BatchJobStateType {
	if x != nil {
		return x.State
	}
	return BatchJobStateType_BATCH_JOB_STATE_TYPE_UNSPECIFIED
}

func (x *BatchJobState) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type DataConnector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Location:
	//	*DataConnector_S3Bucket
	Location isDataConnector_Location `protobuf_oneof:"location"`
	// Types that are assignable to DataType:
	//	*DataConnector_Csv
	DataType isDataConnector_DataType `protobuf_oneof:"data_type"`
}

func (x *DataConnector) Reset() {
	*x = DataConnector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataConnector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataConnector) ProtoMessage() {}

func (x *DataConnector) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataConnector.ProtoReflect.Descriptor instead.
func (*DataConnector) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_rawDescGZIP(), []int{13}
}

func (m *DataConnector) GetLocation() isDataConnector_Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (x *DataConnector) GetS3Bucket() *AwsS3BucketLocation {
	if x, ok := x.GetLocation().(*DataConnector_S3Bucket); ok {
		return x.S3Bucket
	}
	return nil
}

func (m *DataConnector) GetDataType() isDataConnector_DataType {
	if m != nil {
		return m.DataType
	}
	return nil
}

func (x *DataConnector) GetCsv() *CsvConfig {
	if x, ok := x.GetDataType().(*DataConnector_Csv); ok {
		return x.Csv
	}
	return nil
}

type isDataConnector_Location interface {
	isDataConnector_Location()
}

type DataConnector_S3Bucket struct {
	S3Bucket *AwsS3BucketLocation `protobuf:"bytes,1,opt,name=s3_bucket,json=s3Bucket,proto3,oneof"`
}

func (*DataConnector_S3Bucket) isDataConnector_Location() {}

type isDataConnector_DataType interface {
	isDataConnector_DataType()
}

type DataConnector_Csv struct {
	Csv *CsvConfig `protobuf:"bytes,5,opt,name=csv,proto3,oneof"`
}

func (*DataConnector_Csv) isDataConnector_DataType() {}

type AwsS3BucketLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (-- api-linter: core::0122::name-suffix=disabled
	//     aip.dev/not-precedent: We refer to a bucket name. --)
	BucketName string `protobuf:"bytes,1,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	// The credentials that are to be used to access the bucket.
	Credentials string `protobuf:"bytes,2,opt,name=credentials,proto3" json:"credentials,omitempty"`
	// The ARN of the role to assume.
	//If present, start an AssumeRole flow to get temporary credentials in another AWS account.
	//This is used when the customer has a separate users account.
	//Default there is no assumed role.
	AssumeRoleArn string `protobuf:"bytes,3,opt,name=assume_role_arn,json=assumeRoleArn,proto3" json:"assume_role_arn,omitempty"`
	// If omitted, files are read from the root of the bucket.
	PathPrefix string `protobuf:"bytes,4,opt,name=path_prefix,json=pathPrefix,proto3" json:"path_prefix,omitempty"`
	// (-- api-linter: core::0122::name-suffix=disabled
	//     aip.dev/not-precedent: This is the object name without the path prefix. --)
	// If omitted, all files in the specified path_prefix are read. In the case of writing, the output file names match
	// the input file names, with a suffix indicating the type of data (encrypted, keys, decrypted-1-2-3).
	// If present, this is the only file that is read. In the case of writing, this name is the explicit file name.
	FileName string `protobuf:"bytes,5,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
}

func (x *AwsS3BucketLocation) Reset() {
	*x = AwsS3BucketLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsS3BucketLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsS3BucketLocation) ProtoMessage() {}

func (x *AwsS3BucketLocation) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsS3BucketLocation.ProtoReflect.Descriptor instead.
func (*AwsS3BucketLocation) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_rawDescGZIP(), []int{14}
}

func (x *AwsS3BucketLocation) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *AwsS3BucketLocation) GetCredentials() string {
	if x != nil {
		return x.Credentials
	}
	return ""
}

func (x *AwsS3BucketLocation) GetAssumeRoleArn() string {
	if x != nil {
		return x.AssumeRoleArn
	}
	return ""
}

func (x *AwsS3BucketLocation) GetPathPrefix() string {
	if x != nil {
		return x.PathPrefix
	}
	return ""
}

func (x *AwsS3BucketLocation) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

type CsvConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charset string `protobuf:"bytes,1,opt,name=charset,proto3" json:"charset,omitempty"`
}

func (x *CsvConfig) Reset() {
	*x = CsvConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsvConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsvConfig) ProtoMessage() {}

func (x *CsvConfig) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsvConfig.ProtoReflect.Descriptor instead.
func (*CsvConfig) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_rawDescGZIP(), []int{15}
}

func (x *CsvConfig) GetCharset() string {
	if x != nil {
		return x.Charset
	}
	return ""
}

type ConsentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultConsentLevels  []int32                `protobuf:"varint,1,rep,packed,name=default_consent_levels,json=defaultConsentLevels,proto3" json:"default_consent_levels,omitempty"`
	ConsentLevelExtractor *ConsentLevelExtractor `protobuf:"bytes,2,opt,name=consent_level_extractor,json=consentLevelExtractor,proto3" json:"consent_level_extractor,omitempty"`
}

func (x *ConsentConfig) Reset() {
	*x = ConsentConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsentConfig) ProtoMessage() {}

func (x *ConsentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsentConfig.ProtoReflect.Descriptor instead.
func (*ConsentConfig) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_rawDescGZIP(), []int{16}
}

func (x *ConsentConfig) GetDefaultConsentLevels() []int32 {
	if x != nil {
		return x.DefaultConsentLevels
	}
	return nil
}

func (x *ConsentConfig) GetConsentLevelExtractor() *ConsentLevelExtractor {
	if x != nil {
		return x.ConsentLevelExtractor
	}
	return nil
}

type ConsentLevelExtractor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field         string                       `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	FieldPatterns map[string]*v1.ConsentLevels `protobuf:"bytes,2,rep,name=field_patterns,json=fieldPatterns,proto3" json:"field_patterns,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ConsentLevelExtractor) Reset() {
	*x = ConsentLevelExtractor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsentLevelExtractor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsentLevelExtractor) ProtoMessage() {}

func (x *ConsentLevelExtractor) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsentLevelExtractor.ProtoReflect.Descriptor instead.
func (*ConsentLevelExtractor) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_rawDescGZIP(), []int{17}
}

func (x *ConsentLevelExtractor) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *ConsentLevelExtractor) GetFieldPatterns() map[string]*v1.ConsentLevels {
	if x != nil {
		return x.FieldPatterns
	}
	return nil
}

type EncryptionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimestampConfig *TimestampConfig `protobuf:"bytes,1,opt,name=timestamp_config,json=timestampConfig,proto3" json:"timestamp_config,omitempty"`
	BatchJobGroupId string           `protobuf:"bytes,2,opt,name=batch_job_group_id,json=batchJobGroupId,proto3" json:"batch_job_group_id,omitempty"`
}

func (x *EncryptionConfig) Reset() {
	*x = EncryptionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptionConfig) ProtoMessage() {}

func (x *EncryptionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptionConfig.ProtoReflect.Descriptor instead.
func (*EncryptionConfig) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_rawDescGZIP(), []int{18}
}

func (x *EncryptionConfig) GetTimestampConfig() *TimestampConfig {
	if x != nil {
		return x.TimestampConfig
	}
	return nil
}

func (x *EncryptionConfig) GetBatchJobGroupId() string {
	if x != nil {
		return x.BatchJobGroupId
	}
	return ""
}

type TimestampConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	// Java Time Format template, see https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html
	Format          string             `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	DefaultTimeZone *datetime.TimeZone `protobuf:"bytes,3,opt,name=default_time_zone,json=defaultTimeZone,proto3" json:"default_time_zone,omitempty"`
}

func (x *TimestampConfig) Reset() {
	*x = TimestampConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimestampConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampConfig) ProtoMessage() {}

func (x *TimestampConfig) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimestampConfig.ProtoReflect.Descriptor instead.
func (*TimestampConfig) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_rawDescGZIP(), []int{19}
}

func (x *TimestampConfig) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *TimestampConfig) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *TimestampConfig) GetDefaultTimeZone() *datetime.TimeZone {
	if x != nil {
		return x.DefaultTimeZone
	}
	return nil
}

type EncryptedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target *DataConnector `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *EncryptedData) Reset() {
	*x = EncryptedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedData) ProtoMessage() {}

func (x *EncryptedData) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedData.ProtoReflect.Descriptor instead.
func (*EncryptedData) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_rawDescGZIP(), []int{20}
}

func (x *EncryptedData) GetTarget() *DataConnector {
	if x != nil {
		return x.Target
	}
	return nil
}

type EncryptionKeysData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target *DataConnector `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *EncryptionKeysData) Reset() {
	*x = EncryptionKeysData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptionKeysData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptionKeysData) ProtoMessage() {}

func (x *EncryptionKeysData) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptionKeysData.ProtoReflect.Descriptor instead.
func (*EncryptionKeysData) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_rawDescGZIP(), []int{21}
}

func (x *EncryptionKeysData) GetTarget() *DataConnector {
	if x != nil {
		return x.Target
	}
	return nil
}

type DerivedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target           *DataConnector      `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	ConsentLevels    []int32             `protobuf:"varint,2,rep,packed,name=consent_levels,json=consentLevels,proto3" json:"consent_levels,omitempty"`
	ConsentLevelType v1.ConsentLevelType `protobuf:"varint,3,opt,name=consent_level_type,json=consentLevelType,proto3,enum=strmprivacy.api.entities.v1.ConsentLevelType" json:"consent_level_type,omitempty"`
	MaskedFields     *v1.MaskedFields    `protobuf:"bytes,4,opt,name=masked_fields,json=maskedFields,proto3" json:"masked_fields,omitempty"`
}

func (x *DerivedData) Reset() {
	*x = DerivedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DerivedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DerivedData) ProtoMessage() {}

func (x *DerivedData) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DerivedData.ProtoReflect.Descriptor instead.
func (*DerivedData) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_rawDescGZIP(), []int{22}
}

func (x *DerivedData) GetTarget() *DataConnector {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *DerivedData) GetConsentLevels() []int32 {
	if x != nil {
		return x.ConsentLevels
	}
	return nil
}

func (x *DerivedData) GetConsentLevelType() v1.ConsentLevelType {
	if x != nil {
		return x.ConsentLevelType
	}
	return v1.ConsentLevelType(0)
}

func (x *DerivedData) GetMaskedFields() *v1.MaskedFields {
	if x != nil {
		return x.MaskedFields
	}
	return nil
}

var File_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto protoreflect.FileDescriptor

var file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_rawDesc = []byte{
	0x0a, 0x31, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x2e,
	0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x2f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2d, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x57, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x66, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x03, 0x72, 0x65, 0x66, 0x22, 0x60, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x49, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x22, 0x3a, 0x0a, 0x14, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x22, 0x5f, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x46, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x52, 0x09, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x73, 0x22, 0x62, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x49, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x22, 0x63, 0x0a, 0x16, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a,
	0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f,
	0x62, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62,
	0x22, 0x5a, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x03, 0x72, 0x65, 0x66,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a,
	0x6f, 0x62, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x66, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x72, 0x65, 0x66, 0x22, 0x18, 0x0a, 0x16,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x66, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x59, 0x0a, 0x0f, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x22, 0x1d, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x89, 0x06, 0x0a, 0x08, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x12,
	0x41, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73,
	0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x66, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x72,
	0x65, 0x66, 0x12, 0x49, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x52, 0x0a,
	0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x4b, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x54,
	0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x12, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x66, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x52, 0x65, 0x66, 0x12, 0x58, 0x0a, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x68, 0x0a, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b,
	0x65, 0x79, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x12, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x52, 0x0a, 0x0c, 0x64, 0x65,
	0x72, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x0b, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0x46,
	0x0a, 0x0b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x66, 0x12, 0x22, 0x0a,
	0x0a, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49,
	0x64, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc6, 0x01, 0x0a, 0x0d, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0xb9, 0x01, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x51, 0x0a, 0x09, 0x73, 0x33, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x53, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x73, 0x33, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x3c, 0x0a, 0x03, 0x63, 0x73, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x73, 0x76, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x01, 0x52, 0x03, 0x63,
	0x73, 0x76, 0x42, 0x0a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b,
	0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xd7, 0x01, 0x0a, 0x13,
	0x41, 0x77, 0x73, 0x53, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x04, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f,
	0x61, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0d,
	0x61, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x72, 0x6e, 0x12, 0x24, 0x0a,
	0x0b, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x70, 0x61, 0x74, 0x68, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x12, 0x20, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x25, 0x0a, 0x09, 0x43, 0x73, 0x76, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x22, 0xbd, 0x01, 0x0a,
	0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x39,
	0x0a, 0x16, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x71, 0x0a, 0x17, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x74, 0x72,
	0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x8b, 0x02, 0x0a,
	0x15, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x6e, 0x0a, 0x0e,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x1a, 0x6c, 0x0a, 0x12,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa4, 0x01, 0x0a, 0x10, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x5e, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x74, 0x72, 0x6d,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x30, 0x0a, 0x12, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x0f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x22, 0x91, 0x01, 0x0a, 0x0f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x1b, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x46, 0x0a,
	0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f,
	0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x22, 0x5a, 0x0a, 0x0d, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x49, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a,
	0x6f, 0x62, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x22, 0x5f, 0x0a, 0x12, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x49, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x22, 0xac, 0x02, 0x0a, 0x0b, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x49, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x73, 0x12, 0x5b, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2d, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x10, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x52, 0x0c, 0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x2a, 0x8d, 0x01, 0x0a, 0x11, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x42, 0x41, 0x54, 0x43, 0x48,
	0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x52,
	0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x49, 0x4e, 0x49,
	0x53, 0x48, 0x45, 0x44, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x06, 0x32, 0x91, 0x05, 0x0a, 0x10, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x74, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x4a, 0x6f, 0x62, 0x12, 0x31, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f,
	0x62, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x0d,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x33, 0x2e,
	0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x34, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7d, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x12, 0x34, 0x2e, 0x73, 0x74, 0x72,
	0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x35, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7d, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x12, 0x34, 0x2e, 0x73, 0x74, 0x72, 0x6d,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x35, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x39,
	0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x73, 0x74, 0x72, 0x6d,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x0a, 0x20, 0x69, 0x6f, 0x2e, 0x73, 0x74, 0x72, 0x6d,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x49, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2d, 0x67, 0x6f, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_rawDescOnce sync.Once
	file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_rawDescData = file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_rawDesc
)

func file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_rawDescGZIP() []byte {
	file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_rawDescOnce.Do(func() {
		file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_rawDescData = protoimpl.X.CompressGZIP(file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_rawDescData)
	})
	return file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_rawDescData
}

var file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_goTypes = []interface{}{
	(BatchJobStateType)(0),              // 0: strmprivacy.api.batch_jobs.v1.BatchJobStateType
	(*GetBatchJobRequest)(nil),          // 1: strmprivacy.api.batch_jobs.v1.GetBatchJobRequest
	(*GetBatchJobResponse)(nil),         // 2: strmprivacy.api.batch_jobs.v1.GetBatchJobResponse
	(*ListBatchJobsRequest)(nil),        // 3: strmprivacy.api.batch_jobs.v1.ListBatchJobsRequest
	(*ListBatchJobsResponse)(nil),       // 4: strmprivacy.api.batch_jobs.v1.ListBatchJobsResponse
	(*CreateBatchJobRequest)(nil),       // 5: strmprivacy.api.batch_jobs.v1.CreateBatchJobRequest
	(*CreateBatchJobResponse)(nil),      // 6: strmprivacy.api.batch_jobs.v1.CreateBatchJobResponse
	(*DeleteBatchJobRequest)(nil),       // 7: strmprivacy.api.batch_jobs.v1.DeleteBatchJobRequest
	(*DeleteBatchJobResponse)(nil),      // 8: strmprivacy.api.batch_jobs.v1.DeleteBatchJobResponse
	(*UpdateBatchJobStateRequest)(nil),  // 9: strmprivacy.api.batch_jobs.v1.UpdateBatchJobStateRequest
	(*UpdateBatchJobStateResponse)(nil), // 10: strmprivacy.api.batch_jobs.v1.UpdateBatchJobStateResponse
	(*BatchJob)(nil),                    // 11: strmprivacy.api.batch_jobs.v1.BatchJob
	(*BatchJobRef)(nil),                 // 12: strmprivacy.api.batch_jobs.v1.BatchJobRef
	(*BatchJobState)(nil),               // 13: strmprivacy.api.batch_jobs.v1.BatchJobState
	(*DataConnector)(nil),               // 14: strmprivacy.api.batch_jobs.v1.DataConnector
	(*AwsS3BucketLocation)(nil),         // 15: strmprivacy.api.batch_jobs.v1.AwsS3BucketLocation
	(*CsvConfig)(nil),                   // 16: strmprivacy.api.batch_jobs.v1.CsvConfig
	(*ConsentConfig)(nil),               // 17: strmprivacy.api.batch_jobs.v1.ConsentConfig
	(*ConsentLevelExtractor)(nil),       // 18: strmprivacy.api.batch_jobs.v1.ConsentLevelExtractor
	(*EncryptionConfig)(nil),            // 19: strmprivacy.api.batch_jobs.v1.EncryptionConfig
	(*TimestampConfig)(nil),             // 20: strmprivacy.api.batch_jobs.v1.TimestampConfig
	(*EncryptedData)(nil),               // 21: strmprivacy.api.batch_jobs.v1.EncryptedData
	(*EncryptionKeysData)(nil),          // 22: strmprivacy.api.batch_jobs.v1.EncryptionKeysData
	(*DerivedData)(nil),                 // 23: strmprivacy.api.batch_jobs.v1.DerivedData
	nil,                                 // 24: strmprivacy.api.batch_jobs.v1.ConsentLevelExtractor.FieldPatternsEntry
	(*v1.EventContractRef)(nil),         // 25: strmprivacy.api.entities.v1.EventContractRef
	(*timestamppb.Timestamp)(nil),       // 26: google.protobuf.Timestamp
	(*datetime.TimeZone)(nil),           // 27: google.type.TimeZone
	(v1.ConsentLevelType)(0),            // 28: strmprivacy.api.entities.v1.ConsentLevelType
	(*v1.MaskedFields)(nil),             // 29: strmprivacy.api.entities.v1.MaskedFields
	(*v1.ConsentLevels)(nil),            // 30: strmprivacy.api.entities.v1.ConsentLevels
}
var file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_depIdxs = []int32{
	12, // 0: strmprivacy.api.batch_jobs.v1.GetBatchJobRequest.ref:type_name -> strmprivacy.api.batch_jobs.v1.BatchJobRef
	11, // 1: strmprivacy.api.batch_jobs.v1.GetBatchJobResponse.batch_job:type_name -> strmprivacy.api.batch_jobs.v1.BatchJob
	11, // 2: strmprivacy.api.batch_jobs.v1.ListBatchJobsResponse.batch_jobs:type_name -> strmprivacy.api.batch_jobs.v1.BatchJob
	11, // 3: strmprivacy.api.batch_jobs.v1.CreateBatchJobRequest.batch_job:type_name -> strmprivacy.api.batch_jobs.v1.BatchJob
	11, // 4: strmprivacy.api.batch_jobs.v1.CreateBatchJobResponse.batch_job:type_name -> strmprivacy.api.batch_jobs.v1.BatchJob
	12, // 5: strmprivacy.api.batch_jobs.v1.DeleteBatchJobRequest.ref:type_name -> strmprivacy.api.batch_jobs.v1.BatchJobRef
	12, // 6: strmprivacy.api.batch_jobs.v1.UpdateBatchJobStateRequest.ref:type_name -> strmprivacy.api.batch_jobs.v1.BatchJobRef
	13, // 7: strmprivacy.api.batch_jobs.v1.UpdateBatchJobStateRequest.batch_job_state:type_name -> strmprivacy.api.batch_jobs.v1.BatchJobState
	12, // 8: strmprivacy.api.batch_jobs.v1.BatchJob.ref:type_name -> strmprivacy.api.batch_jobs.v1.BatchJobRef
	13, // 9: strmprivacy.api.batch_jobs.v1.BatchJob.states:type_name -> strmprivacy.api.batch_jobs.v1.BatchJobState
	14, // 10: strmprivacy.api.batch_jobs.v1.BatchJob.source_data:type_name -> strmprivacy.api.batch_jobs.v1.DataConnector
	17, // 11: strmprivacy.api.batch_jobs.v1.BatchJob.consent:type_name -> strmprivacy.api.batch_jobs.v1.ConsentConfig
	19, // 12: strmprivacy.api.batch_jobs.v1.BatchJob.encryption:type_name -> strmprivacy.api.batch_jobs.v1.EncryptionConfig
	25, // 13: strmprivacy.api.batch_jobs.v1.BatchJob.event_contract_ref:type_name -> strmprivacy.api.entities.v1.EventContractRef
	21, // 14: strmprivacy.api.batch_jobs.v1.BatchJob.encrypted_data:type_name -> strmprivacy.api.batch_jobs.v1.EncryptedData
	22, // 15: strmprivacy.api.batch_jobs.v1.BatchJob.encryption_keys_data:type_name -> strmprivacy.api.batch_jobs.v1.EncryptionKeysData
	23, // 16: strmprivacy.api.batch_jobs.v1.BatchJob.derived_data:type_name -> strmprivacy.api.batch_jobs.v1.DerivedData
	26, // 17: strmprivacy.api.batch_jobs.v1.BatchJobState.state_time:type_name -> google.protobuf.Timestamp
	0,  // 18: strmprivacy.api.batch_jobs.v1.BatchJobState.state:type_name -> strmprivacy.api.batch_jobs.v1.BatchJobStateType
	15, // 19: strmprivacy.api.batch_jobs.v1.DataConnector.s3_bucket:type_name -> strmprivacy.api.batch_jobs.v1.AwsS3BucketLocation
	16, // 20: strmprivacy.api.batch_jobs.v1.DataConnector.csv:type_name -> strmprivacy.api.batch_jobs.v1.CsvConfig
	18, // 21: strmprivacy.api.batch_jobs.v1.ConsentConfig.consent_level_extractor:type_name -> strmprivacy.api.batch_jobs.v1.ConsentLevelExtractor
	24, // 22: strmprivacy.api.batch_jobs.v1.ConsentLevelExtractor.field_patterns:type_name -> strmprivacy.api.batch_jobs.v1.ConsentLevelExtractor.FieldPatternsEntry
	20, // 23: strmprivacy.api.batch_jobs.v1.EncryptionConfig.timestamp_config:type_name -> strmprivacy.api.batch_jobs.v1.TimestampConfig
	27, // 24: strmprivacy.api.batch_jobs.v1.TimestampConfig.default_time_zone:type_name -> google.type.TimeZone
	14, // 25: strmprivacy.api.batch_jobs.v1.EncryptedData.target:type_name -> strmprivacy.api.batch_jobs.v1.DataConnector
	14, // 26: strmprivacy.api.batch_jobs.v1.EncryptionKeysData.target:type_name -> strmprivacy.api.batch_jobs.v1.DataConnector
	14, // 27: strmprivacy.api.batch_jobs.v1.DerivedData.target:type_name -> strmprivacy.api.batch_jobs.v1.DataConnector
	28, // 28: strmprivacy.api.batch_jobs.v1.DerivedData.consent_level_type:type_name -> strmprivacy.api.entities.v1.ConsentLevelType
	29, // 29: strmprivacy.api.batch_jobs.v1.DerivedData.masked_fields:type_name -> strmprivacy.api.entities.v1.MaskedFields
	30, // 30: strmprivacy.api.batch_jobs.v1.ConsentLevelExtractor.FieldPatternsEntry.value:type_name -> strmprivacy.api.entities.v1.ConsentLevels
	1,  // 31: strmprivacy.api.batch_jobs.v1.BatchJobsService.GetBatchJob:input_type -> strmprivacy.api.batch_jobs.v1.GetBatchJobRequest
	3,  // 32: strmprivacy.api.batch_jobs.v1.BatchJobsService.ListBatchJobs:input_type -> strmprivacy.api.batch_jobs.v1.ListBatchJobsRequest
	5,  // 33: strmprivacy.api.batch_jobs.v1.BatchJobsService.CreateBatchJob:input_type -> strmprivacy.api.batch_jobs.v1.CreateBatchJobRequest
	7,  // 34: strmprivacy.api.batch_jobs.v1.BatchJobsService.DeleteBatchJob:input_type -> strmprivacy.api.batch_jobs.v1.DeleteBatchJobRequest
	9,  // 35: strmprivacy.api.batch_jobs.v1.BatchJobsService.UpdateBatchJobState:input_type -> strmprivacy.api.batch_jobs.v1.UpdateBatchJobStateRequest
	2,  // 36: strmprivacy.api.batch_jobs.v1.BatchJobsService.GetBatchJob:output_type -> strmprivacy.api.batch_jobs.v1.GetBatchJobResponse
	4,  // 37: strmprivacy.api.batch_jobs.v1.BatchJobsService.ListBatchJobs:output_type -> strmprivacy.api.batch_jobs.v1.ListBatchJobsResponse
	6,  // 38: strmprivacy.api.batch_jobs.v1.BatchJobsService.CreateBatchJob:output_type -> strmprivacy.api.batch_jobs.v1.CreateBatchJobResponse
	8,  // 39: strmprivacy.api.batch_jobs.v1.BatchJobsService.DeleteBatchJob:output_type -> strmprivacy.api.batch_jobs.v1.DeleteBatchJobResponse
	10, // 40: strmprivacy.api.batch_jobs.v1.BatchJobsService.UpdateBatchJobState:output_type -> strmprivacy.api.batch_jobs.v1.UpdateBatchJobStateResponse
	36, // [36:41] is the sub-list for method output_type
	31, // [31:36] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_init() }
func file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_init() {
	if File_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBatchJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBatchJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBatchJobsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBatchJobsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBatchJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBatchJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBatchJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBatchJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBatchJobStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBatchJobStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchJobRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchJobState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataConnector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwsS3BucketLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsvConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsentConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsentLevelExtractor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimestampConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptionKeysData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DerivedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*DataConnector_S3Bucket)(nil),
		(*DataConnector_Csv)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_goTypes,
		DependencyIndexes: file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_depIdxs,
		EnumInfos:         file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_enumTypes,
		MessageInfos:      file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_msgTypes,
	}.Build()
	File_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto = out.File
	file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_rawDesc = nil
	file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_goTypes = nil
	file_strmprivacy_api_batch_jobs_v1_batch_jobs_v1_proto_depIdxs = nil
}
