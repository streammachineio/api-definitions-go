// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.18.1
// source: strmprivacy/api/batch_jobs/v1/batch_jobs_v1.proto

package batch_jobs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BatchJobsServiceClient is the client API for BatchJobsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BatchJobsServiceClient interface {
	GetBatchJob(ctx context.Context, in *GetBatchJobRequest, opts ...grpc.CallOption) (*GetBatchJobResponse, error)
	ListBatchJobs(ctx context.Context, in *ListBatchJobsRequest, opts ...grpc.CallOption) (*ListBatchJobsResponse, error)
	CreateBatchJob(ctx context.Context, in *CreateBatchJobRequest, opts ...grpc.CallOption) (*CreateBatchJobResponse, error)
	DeleteBatchJob(ctx context.Context, in *DeleteBatchJobRequest, opts ...grpc.CallOption) (*DeleteBatchJobResponse, error)
	UpdateBatchJobState(ctx context.Context, in *UpdateBatchJobStateRequest, opts ...grpc.CallOption) (*UpdateBatchJobStateResponse, error)
}

type batchJobsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBatchJobsServiceClient(cc grpc.ClientConnInterface) BatchJobsServiceClient {
	return &batchJobsServiceClient{cc}
}

func (c *batchJobsServiceClient) GetBatchJob(ctx context.Context, in *GetBatchJobRequest, opts ...grpc.CallOption) (*GetBatchJobResponse, error) {
	out := new(GetBatchJobResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.batch_jobs.v1.BatchJobsService/GetBatchJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchJobsServiceClient) ListBatchJobs(ctx context.Context, in *ListBatchJobsRequest, opts ...grpc.CallOption) (*ListBatchJobsResponse, error) {
	out := new(ListBatchJobsResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.batch_jobs.v1.BatchJobsService/ListBatchJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchJobsServiceClient) CreateBatchJob(ctx context.Context, in *CreateBatchJobRequest, opts ...grpc.CallOption) (*CreateBatchJobResponse, error) {
	out := new(CreateBatchJobResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.batch_jobs.v1.BatchJobsService/CreateBatchJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchJobsServiceClient) DeleteBatchJob(ctx context.Context, in *DeleteBatchJobRequest, opts ...grpc.CallOption) (*DeleteBatchJobResponse, error) {
	out := new(DeleteBatchJobResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.batch_jobs.v1.BatchJobsService/DeleteBatchJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchJobsServiceClient) UpdateBatchJobState(ctx context.Context, in *UpdateBatchJobStateRequest, opts ...grpc.CallOption) (*UpdateBatchJobStateResponse, error) {
	out := new(UpdateBatchJobStateResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.batch_jobs.v1.BatchJobsService/UpdateBatchJobState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BatchJobsServiceServer is the server API for BatchJobsService service.
// All implementations must embed UnimplementedBatchJobsServiceServer
// for forward compatibility
type BatchJobsServiceServer interface {
	GetBatchJob(context.Context, *GetBatchJobRequest) (*GetBatchJobResponse, error)
	ListBatchJobs(context.Context, *ListBatchJobsRequest) (*ListBatchJobsResponse, error)
	CreateBatchJob(context.Context, *CreateBatchJobRequest) (*CreateBatchJobResponse, error)
	DeleteBatchJob(context.Context, *DeleteBatchJobRequest) (*DeleteBatchJobResponse, error)
	UpdateBatchJobState(context.Context, *UpdateBatchJobStateRequest) (*UpdateBatchJobStateResponse, error)
	mustEmbedUnimplementedBatchJobsServiceServer()
}

// UnimplementedBatchJobsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBatchJobsServiceServer struct {
}

func (UnimplementedBatchJobsServiceServer) GetBatchJob(context.Context, *GetBatchJobRequest) (*GetBatchJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatchJob not implemented")
}
func (UnimplementedBatchJobsServiceServer) ListBatchJobs(context.Context, *ListBatchJobsRequest) (*ListBatchJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBatchJobs not implemented")
}
func (UnimplementedBatchJobsServiceServer) CreateBatchJob(context.Context, *CreateBatchJobRequest) (*CreateBatchJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBatchJob not implemented")
}
func (UnimplementedBatchJobsServiceServer) DeleteBatchJob(context.Context, *DeleteBatchJobRequest) (*DeleteBatchJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBatchJob not implemented")
}
func (UnimplementedBatchJobsServiceServer) UpdateBatchJobState(context.Context, *UpdateBatchJobStateRequest) (*UpdateBatchJobStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBatchJobState not implemented")
}
func (UnimplementedBatchJobsServiceServer) mustEmbedUnimplementedBatchJobsServiceServer() {}

// UnsafeBatchJobsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BatchJobsServiceServer will
// result in compilation errors.
type UnsafeBatchJobsServiceServer interface {
	mustEmbedUnimplementedBatchJobsServiceServer()
}

func RegisterBatchJobsServiceServer(s grpc.ServiceRegistrar, srv BatchJobsServiceServer) {
	s.RegisterService(&BatchJobsService_ServiceDesc, srv)
}

func _BatchJobsService_GetBatchJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBatchJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchJobsServiceServer).GetBatchJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.batch_jobs.v1.BatchJobsService/GetBatchJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchJobsServiceServer).GetBatchJob(ctx, req.(*GetBatchJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatchJobsService_ListBatchJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBatchJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchJobsServiceServer).ListBatchJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.batch_jobs.v1.BatchJobsService/ListBatchJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchJobsServiceServer).ListBatchJobs(ctx, req.(*ListBatchJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatchJobsService_CreateBatchJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBatchJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchJobsServiceServer).CreateBatchJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.batch_jobs.v1.BatchJobsService/CreateBatchJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchJobsServiceServer).CreateBatchJob(ctx, req.(*CreateBatchJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatchJobsService_DeleteBatchJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBatchJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchJobsServiceServer).DeleteBatchJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.batch_jobs.v1.BatchJobsService/DeleteBatchJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchJobsServiceServer).DeleteBatchJob(ctx, req.(*DeleteBatchJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatchJobsService_UpdateBatchJobState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBatchJobStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchJobsServiceServer).UpdateBatchJobState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.batch_jobs.v1.BatchJobsService/UpdateBatchJobState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchJobsServiceServer).UpdateBatchJobState(ctx, req.(*UpdateBatchJobStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BatchJobsService_ServiceDesc is the grpc.ServiceDesc for BatchJobsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BatchJobsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "strmprivacy.api.batch_jobs.v1.BatchJobsService",
	HandlerType: (*BatchJobsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBatchJob",
			Handler:    _BatchJobsService_GetBatchJob_Handler,
		},
		{
			MethodName: "ListBatchJobs",
			Handler:    _BatchJobsService_ListBatchJobs_Handler,
		},
		{
			MethodName: "CreateBatchJob",
			Handler:    _BatchJobsService_CreateBatchJob_Handler,
		},
		{
			MethodName: "DeleteBatchJob",
			Handler:    _BatchJobsService_DeleteBatchJob_Handler,
		},
		{
			MethodName: "UpdateBatchJobState",
			Handler:    _BatchJobsService_UpdateBatchJobState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "strmprivacy/api/batch_jobs/v1/batch_jobs_v1.proto",
}
