// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: strmprivacy/api/customer_entity_versions/v1/customer_entity_versions_v1.proto

package customer_entity_versions

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CustomerEntityVersionsServiceClient is the client API for CustomerEntityVersionsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerEntityVersionsServiceClient interface {
	GetBatchExporterImage(ctx context.Context, in *GetBatchExporterImageRequest, opts ...grpc.CallOption) (*GetBatchExporterImageResponse, error)
	GetKafkaExporterImage(ctx context.Context, in *GetKafkaExporterImageRequest, opts ...grpc.CallOption) (*GetKafkaExporterImageResponse, error)
	GetDecrypterImage(ctx context.Context, in *GetDecrypterImageRequest, opts ...grpc.CallOption) (*GetDecrypterImageResponse, error)
	GetBatchJobRunnerImage(ctx context.Context, in *GetBatchJobRunnerImageRequest, opts ...grpc.CallOption) (*GetBatchJobRunnerImageResponse, error)
}

type customerEntityVersionsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerEntityVersionsServiceClient(cc grpc.ClientConnInterface) CustomerEntityVersionsServiceClient {
	return &customerEntityVersionsServiceClient{cc}
}

func (c *customerEntityVersionsServiceClient) GetBatchExporterImage(ctx context.Context, in *GetBatchExporterImageRequest, opts ...grpc.CallOption) (*GetBatchExporterImageResponse, error) {
	out := new(GetBatchExporterImageResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.customer_entity_versions.v1.CustomerEntityVersionsService/GetBatchExporterImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerEntityVersionsServiceClient) GetKafkaExporterImage(ctx context.Context, in *GetKafkaExporterImageRequest, opts ...grpc.CallOption) (*GetKafkaExporterImageResponse, error) {
	out := new(GetKafkaExporterImageResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.customer_entity_versions.v1.CustomerEntityVersionsService/GetKafkaExporterImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerEntityVersionsServiceClient) GetDecrypterImage(ctx context.Context, in *GetDecrypterImageRequest, opts ...grpc.CallOption) (*GetDecrypterImageResponse, error) {
	out := new(GetDecrypterImageResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.customer_entity_versions.v1.CustomerEntityVersionsService/GetDecrypterImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerEntityVersionsServiceClient) GetBatchJobRunnerImage(ctx context.Context, in *GetBatchJobRunnerImageRequest, opts ...grpc.CallOption) (*GetBatchJobRunnerImageResponse, error) {
	out := new(GetBatchJobRunnerImageResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.customer_entity_versions.v1.CustomerEntityVersionsService/GetBatchJobRunnerImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerEntityVersionsServiceServer is the server API for CustomerEntityVersionsService service.
// All implementations should embed UnimplementedCustomerEntityVersionsServiceServer
// for forward compatibility
type CustomerEntityVersionsServiceServer interface {
	GetBatchExporterImage(context.Context, *GetBatchExporterImageRequest) (*GetBatchExporterImageResponse, error)
	GetKafkaExporterImage(context.Context, *GetKafkaExporterImageRequest) (*GetKafkaExporterImageResponse, error)
	GetDecrypterImage(context.Context, *GetDecrypterImageRequest) (*GetDecrypterImageResponse, error)
	GetBatchJobRunnerImage(context.Context, *GetBatchJobRunnerImageRequest) (*GetBatchJobRunnerImageResponse, error)
}

// UnimplementedCustomerEntityVersionsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCustomerEntityVersionsServiceServer struct {
}

func (UnimplementedCustomerEntityVersionsServiceServer) GetBatchExporterImage(context.Context, *GetBatchExporterImageRequest) (*GetBatchExporterImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatchExporterImage not implemented")
}
func (UnimplementedCustomerEntityVersionsServiceServer) GetKafkaExporterImage(context.Context, *GetKafkaExporterImageRequest) (*GetKafkaExporterImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKafkaExporterImage not implemented")
}
func (UnimplementedCustomerEntityVersionsServiceServer) GetDecrypterImage(context.Context, *GetDecrypterImageRequest) (*GetDecrypterImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDecrypterImage not implemented")
}
func (UnimplementedCustomerEntityVersionsServiceServer) GetBatchJobRunnerImage(context.Context, *GetBatchJobRunnerImageRequest) (*GetBatchJobRunnerImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatchJobRunnerImage not implemented")
}

// UnsafeCustomerEntityVersionsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerEntityVersionsServiceServer will
// result in compilation errors.
type UnsafeCustomerEntityVersionsServiceServer interface {
	mustEmbedUnimplementedCustomerEntityVersionsServiceServer()
}

func RegisterCustomerEntityVersionsServiceServer(s grpc.ServiceRegistrar, srv CustomerEntityVersionsServiceServer) {
	s.RegisterService(&CustomerEntityVersionsService_ServiceDesc, srv)
}

func _CustomerEntityVersionsService_GetBatchExporterImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBatchExporterImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerEntityVersionsServiceServer).GetBatchExporterImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.customer_entity_versions.v1.CustomerEntityVersionsService/GetBatchExporterImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerEntityVersionsServiceServer).GetBatchExporterImage(ctx, req.(*GetBatchExporterImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerEntityVersionsService_GetKafkaExporterImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKafkaExporterImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerEntityVersionsServiceServer).GetKafkaExporterImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.customer_entity_versions.v1.CustomerEntityVersionsService/GetKafkaExporterImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerEntityVersionsServiceServer).GetKafkaExporterImage(ctx, req.(*GetKafkaExporterImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerEntityVersionsService_GetDecrypterImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDecrypterImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerEntityVersionsServiceServer).GetDecrypterImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.customer_entity_versions.v1.CustomerEntityVersionsService/GetDecrypterImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerEntityVersionsServiceServer).GetDecrypterImage(ctx, req.(*GetDecrypterImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerEntityVersionsService_GetBatchJobRunnerImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBatchJobRunnerImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerEntityVersionsServiceServer).GetBatchJobRunnerImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.customer_entity_versions.v1.CustomerEntityVersionsService/GetBatchJobRunnerImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerEntityVersionsServiceServer).GetBatchJobRunnerImage(ctx, req.(*GetBatchJobRunnerImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomerEntityVersionsService_ServiceDesc is the grpc.ServiceDesc for CustomerEntityVersionsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerEntityVersionsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "strmprivacy.api.customer_entity_versions.v1.CustomerEntityVersionsService",
	HandlerType: (*CustomerEntityVersionsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBatchExporterImage",
			Handler:    _CustomerEntityVersionsService_GetBatchExporterImage_Handler,
		},
		{
			MethodName: "GetKafkaExporterImage",
			Handler:    _CustomerEntityVersionsService_GetKafkaExporterImage_Handler,
		},
		{
			MethodName: "GetDecrypterImage",
			Handler:    _CustomerEntityVersionsService_GetDecrypterImage_Handler,
		},
		{
			MethodName: "GetBatchJobRunnerImage",
			Handler:    _CustomerEntityVersionsService_GetBatchJobRunnerImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "strmprivacy/api/customer_entity_versions/v1/customer_entity_versions_v1.proto",
}
