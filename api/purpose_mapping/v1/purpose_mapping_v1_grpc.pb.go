// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: strmprivacy/api/purpose_mapping/v1/purpose_mapping_v1.proto

package purpose_mapping

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PurposeMappingServiceClient is the client API for PurposeMappingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PurposeMappingServiceClient interface {
	ListPurposeMappings(ctx context.Context, in *ListPurposeMappingsRequest, opts ...grpc.CallOption) (*ListPurposeMappingsResponse, error)
	GetPurposeMapping(ctx context.Context, in *GetPurposeMappingRequest, opts ...grpc.CallOption) (*GetPurposeMappingResponse, error)
	CreatePurposeMapping(ctx context.Context, in *CreatePurposeMappingRequest, opts ...grpc.CallOption) (*CreatePurposeMappingResponse, error)
}

type purposeMappingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPurposeMappingServiceClient(cc grpc.ClientConnInterface) PurposeMappingServiceClient {
	return &purposeMappingServiceClient{cc}
}

func (c *purposeMappingServiceClient) ListPurposeMappings(ctx context.Context, in *ListPurposeMappingsRequest, opts ...grpc.CallOption) (*ListPurposeMappingsResponse, error) {
	out := new(ListPurposeMappingsResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.purpose_mapping.v1.PurposeMappingService/ListPurposeMappings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purposeMappingServiceClient) GetPurposeMapping(ctx context.Context, in *GetPurposeMappingRequest, opts ...grpc.CallOption) (*GetPurposeMappingResponse, error) {
	out := new(GetPurposeMappingResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.purpose_mapping.v1.PurposeMappingService/GetPurposeMapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purposeMappingServiceClient) CreatePurposeMapping(ctx context.Context, in *CreatePurposeMappingRequest, opts ...grpc.CallOption) (*CreatePurposeMappingResponse, error) {
	out := new(CreatePurposeMappingResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.purpose_mapping.v1.PurposeMappingService/CreatePurposeMapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PurposeMappingServiceServer is the server API for PurposeMappingService service.
// All implementations must embed UnimplementedPurposeMappingServiceServer
// for forward compatibility
type PurposeMappingServiceServer interface {
	ListPurposeMappings(context.Context, *ListPurposeMappingsRequest) (*ListPurposeMappingsResponse, error)
	GetPurposeMapping(context.Context, *GetPurposeMappingRequest) (*GetPurposeMappingResponse, error)
	CreatePurposeMapping(context.Context, *CreatePurposeMappingRequest) (*CreatePurposeMappingResponse, error)
	mustEmbedUnimplementedPurposeMappingServiceServer()
}

// UnimplementedPurposeMappingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPurposeMappingServiceServer struct {
}

func (UnimplementedPurposeMappingServiceServer) ListPurposeMappings(context.Context, *ListPurposeMappingsRequest) (*ListPurposeMappingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPurposeMappings not implemented")
}
func (UnimplementedPurposeMappingServiceServer) GetPurposeMapping(context.Context, *GetPurposeMappingRequest) (*GetPurposeMappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPurposeMapping not implemented")
}
func (UnimplementedPurposeMappingServiceServer) CreatePurposeMapping(context.Context, *CreatePurposeMappingRequest) (*CreatePurposeMappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePurposeMapping not implemented")
}
func (UnimplementedPurposeMappingServiceServer) mustEmbedUnimplementedPurposeMappingServiceServer() {}

// UnsafePurposeMappingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PurposeMappingServiceServer will
// result in compilation errors.
type UnsafePurposeMappingServiceServer interface {
	mustEmbedUnimplementedPurposeMappingServiceServer()
}

func RegisterPurposeMappingServiceServer(s grpc.ServiceRegistrar, srv PurposeMappingServiceServer) {
	s.RegisterService(&PurposeMappingService_ServiceDesc, srv)
}

func _PurposeMappingService_ListPurposeMappings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPurposeMappingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurposeMappingServiceServer).ListPurposeMappings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.purpose_mapping.v1.PurposeMappingService/ListPurposeMappings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurposeMappingServiceServer).ListPurposeMappings(ctx, req.(*ListPurposeMappingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurposeMappingService_GetPurposeMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPurposeMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurposeMappingServiceServer).GetPurposeMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.purpose_mapping.v1.PurposeMappingService/GetPurposeMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurposeMappingServiceServer).GetPurposeMapping(ctx, req.(*GetPurposeMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurposeMappingService_CreatePurposeMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePurposeMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurposeMappingServiceServer).CreatePurposeMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.purpose_mapping.v1.PurposeMappingService/CreatePurposeMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurposeMappingServiceServer).CreatePurposeMapping(ctx, req.(*CreatePurposeMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PurposeMappingService_ServiceDesc is the grpc.ServiceDesc for PurposeMappingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PurposeMappingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "strmprivacy.api.purpose_mapping.v1.PurposeMappingService",
	HandlerType: (*PurposeMappingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPurposeMappings",
			Handler:    _PurposeMappingService_ListPurposeMappings_Handler,
		},
		{
			MethodName: "GetPurposeMapping",
			Handler:    _PurposeMappingService_GetPurposeMapping_Handler,
		},
		{
			MethodName: "CreatePurposeMapping",
			Handler:    _PurposeMappingService_CreatePurposeMapping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "strmprivacy/api/purpose_mapping/v1/purpose_mapping_v1.proto",
}
