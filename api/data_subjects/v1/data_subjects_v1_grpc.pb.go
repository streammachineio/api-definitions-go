// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: strmprivacy/api/data_subjects/v1/data_subjects_v1.proto

package data_subjects

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataSubjectsServiceClient is the client API for DataSubjectsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataSubjectsServiceClient interface {
	// *
	// Retrieve all key links associated with certain data subject(s)
	//
	// returns: a list of data subject with their associated key links and their
	// expiry.
	ListDataSubjectKeylinks(ctx context.Context, in *ListDataSubjectKeylinksRequest, opts ...grpc.CallOption) (*ListDataSubjectKeylinksResponse, error)
	// * called by an entity that can create key link(s) like the event-gateway or a batch-job
	//
	// typically (but not necessarily) only one key link is added at the same time.
	//
	// The list of DatasubjectKeylinks is combined with a project_id; the DSS uses this to find the linked
	// organization_id
	AddDataSubjectsKeyLinks(ctx context.Context, in *AddDataSubjectsKeyLinksRequest, opts ...grpc.CallOption) (*AddDataSubjectsKeyLinksResponse, error)
	// *
	// delete data subjects from the DSS database, and returns the deleted key links and timestamps
	DeleteDataSubjects(ctx context.Context, in *DeleteDataSubjectsRequest, opts ...grpc.CallOption) (*DeleteDataSubjectsResponse, error)
	// *
	// list data subjects from the DSS database
	ListDataSubjects(ctx context.Context, in *ListDataSubjectsRequest, opts ...grpc.CallOption) (*ListDataSubjectsResponse, error)
}

type dataSubjectsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataSubjectsServiceClient(cc grpc.ClientConnInterface) DataSubjectsServiceClient {
	return &dataSubjectsServiceClient{cc}
}

func (c *dataSubjectsServiceClient) ListDataSubjectKeylinks(ctx context.Context, in *ListDataSubjectKeylinksRequest, opts ...grpc.CallOption) (*ListDataSubjectKeylinksResponse, error) {
	out := new(ListDataSubjectKeylinksResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.data_subjects.v1.DataSubjectsService/ListDataSubjectKeylinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSubjectsServiceClient) AddDataSubjectsKeyLinks(ctx context.Context, in *AddDataSubjectsKeyLinksRequest, opts ...grpc.CallOption) (*AddDataSubjectsKeyLinksResponse, error) {
	out := new(AddDataSubjectsKeyLinksResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.data_subjects.v1.DataSubjectsService/AddDataSubjectsKeyLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSubjectsServiceClient) DeleteDataSubjects(ctx context.Context, in *DeleteDataSubjectsRequest, opts ...grpc.CallOption) (*DeleteDataSubjectsResponse, error) {
	out := new(DeleteDataSubjectsResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.data_subjects.v1.DataSubjectsService/DeleteDataSubjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSubjectsServiceClient) ListDataSubjects(ctx context.Context, in *ListDataSubjectsRequest, opts ...grpc.CallOption) (*ListDataSubjectsResponse, error) {
	out := new(ListDataSubjectsResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.data_subjects.v1.DataSubjectsService/ListDataSubjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataSubjectsServiceServer is the server API for DataSubjectsService service.
// All implementations should embed UnimplementedDataSubjectsServiceServer
// for forward compatibility
type DataSubjectsServiceServer interface {
	// *
	// Retrieve all key links associated with certain data subject(s)
	//
	// returns: a list of data subject with their associated key links and their
	// expiry.
	ListDataSubjectKeylinks(context.Context, *ListDataSubjectKeylinksRequest) (*ListDataSubjectKeylinksResponse, error)
	// * called by an entity that can create key link(s) like the event-gateway or a batch-job
	//
	// typically (but not necessarily) only one key link is added at the same time.
	//
	// The list of DatasubjectKeylinks is combined with a project_id; the DSS uses this to find the linked
	// organization_id
	AddDataSubjectsKeyLinks(context.Context, *AddDataSubjectsKeyLinksRequest) (*AddDataSubjectsKeyLinksResponse, error)
	// *
	// delete data subjects from the DSS database, and returns the deleted key links and timestamps
	DeleteDataSubjects(context.Context, *DeleteDataSubjectsRequest) (*DeleteDataSubjectsResponse, error)
	// *
	// list data subjects from the DSS database
	ListDataSubjects(context.Context, *ListDataSubjectsRequest) (*ListDataSubjectsResponse, error)
}

// UnimplementedDataSubjectsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDataSubjectsServiceServer struct {
}

func (UnimplementedDataSubjectsServiceServer) ListDataSubjectKeylinks(context.Context, *ListDataSubjectKeylinksRequest) (*ListDataSubjectKeylinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataSubjectKeylinks not implemented")
}
func (UnimplementedDataSubjectsServiceServer) AddDataSubjectsKeyLinks(context.Context, *AddDataSubjectsKeyLinksRequest) (*AddDataSubjectsKeyLinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDataSubjectsKeyLinks not implemented")
}
func (UnimplementedDataSubjectsServiceServer) DeleteDataSubjects(context.Context, *DeleteDataSubjectsRequest) (*DeleteDataSubjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataSubjects not implemented")
}
func (UnimplementedDataSubjectsServiceServer) ListDataSubjects(context.Context, *ListDataSubjectsRequest) (*ListDataSubjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataSubjects not implemented")
}

// UnsafeDataSubjectsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataSubjectsServiceServer will
// result in compilation errors.
type UnsafeDataSubjectsServiceServer interface {
	mustEmbedUnimplementedDataSubjectsServiceServer()
}

func RegisterDataSubjectsServiceServer(s grpc.ServiceRegistrar, srv DataSubjectsServiceServer) {
	s.RegisterService(&DataSubjectsService_ServiceDesc, srv)
}

func _DataSubjectsService_ListDataSubjectKeylinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDataSubjectKeylinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSubjectsServiceServer).ListDataSubjectKeylinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.data_subjects.v1.DataSubjectsService/ListDataSubjectKeylinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSubjectsServiceServer).ListDataSubjectKeylinks(ctx, req.(*ListDataSubjectKeylinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSubjectsService_AddDataSubjectsKeyLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDataSubjectsKeyLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSubjectsServiceServer).AddDataSubjectsKeyLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.data_subjects.v1.DataSubjectsService/AddDataSubjectsKeyLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSubjectsServiceServer).AddDataSubjectsKeyLinks(ctx, req.(*AddDataSubjectsKeyLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSubjectsService_DeleteDataSubjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDataSubjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSubjectsServiceServer).DeleteDataSubjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.data_subjects.v1.DataSubjectsService/DeleteDataSubjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSubjectsServiceServer).DeleteDataSubjects(ctx, req.(*DeleteDataSubjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSubjectsService_ListDataSubjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDataSubjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSubjectsServiceServer).ListDataSubjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.data_subjects.v1.DataSubjectsService/ListDataSubjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSubjectsServiceServer).ListDataSubjects(ctx, req.(*ListDataSubjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataSubjectsService_ServiceDesc is the grpc.ServiceDesc for DataSubjectsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataSubjectsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "strmprivacy.api.data_subjects.v1.DataSubjectsService",
	HandlerType: (*DataSubjectsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDataSubjectKeylinks",
			Handler:    _DataSubjectsService_ListDataSubjectKeylinks_Handler,
		},
		{
			MethodName: "AddDataSubjectsKeyLinks",
			Handler:    _DataSubjectsService_AddDataSubjectsKeyLinks_Handler,
		},
		{
			MethodName: "DeleteDataSubjects",
			Handler:    _DataSubjectsService_DeleteDataSubjects_Handler,
		},
		{
			MethodName: "ListDataSubjects",
			Handler:    _DataSubjectsService_ListDataSubjects_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "strmprivacy/api/data_subjects/v1/data_subjects_v1.proto",
}
