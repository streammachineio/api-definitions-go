// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: strmprivacy/api/data_catalog/v1/data_catalog_v1.proto

package data_catalog

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataCatalogServiceClient is the client API for DataCatalogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataCatalogServiceClient interface {
	GetDataCatalogConnection(ctx context.Context, in *GetDataCatalogConnectionRequest, opts ...grpc.CallOption) (*GetDataCatalogConnectionResponse, error)
	ListDataCatalogConnections(ctx context.Context, in *ListDataCatalogConnectionsRequest, opts ...grpc.CallOption) (*ListDataCatalogConnectionsResponse, error)
	CreateDataCatalogConnection(ctx context.Context, in *CreateDataCatalogConnectionRequest, opts ...grpc.CallOption) (*CreateDataCatalogConnectionResponse, error)
}

type dataCatalogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataCatalogServiceClient(cc grpc.ClientConnInterface) DataCatalogServiceClient {
	return &dataCatalogServiceClient{cc}
}

func (c *dataCatalogServiceClient) GetDataCatalogConnection(ctx context.Context, in *GetDataCatalogConnectionRequest, opts ...grpc.CallOption) (*GetDataCatalogConnectionResponse, error) {
	out := new(GetDataCatalogConnectionResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.data_catalog.v1.DataCatalogService/GetDataCatalogConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCatalogServiceClient) ListDataCatalogConnections(ctx context.Context, in *ListDataCatalogConnectionsRequest, opts ...grpc.CallOption) (*ListDataCatalogConnectionsResponse, error) {
	out := new(ListDataCatalogConnectionsResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.data_catalog.v1.DataCatalogService/ListDataCatalogConnections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCatalogServiceClient) CreateDataCatalogConnection(ctx context.Context, in *CreateDataCatalogConnectionRequest, opts ...grpc.CallOption) (*CreateDataCatalogConnectionResponse, error) {
	out := new(CreateDataCatalogConnectionResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.data_catalog.v1.DataCatalogService/CreateDataCatalogConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataCatalogServiceServer is the server API for DataCatalogService service.
// All implementations should embed UnimplementedDataCatalogServiceServer
// for forward compatibility
type DataCatalogServiceServer interface {
	GetDataCatalogConnection(context.Context, *GetDataCatalogConnectionRequest) (*GetDataCatalogConnectionResponse, error)
	ListDataCatalogConnections(context.Context, *ListDataCatalogConnectionsRequest) (*ListDataCatalogConnectionsResponse, error)
	CreateDataCatalogConnection(context.Context, *CreateDataCatalogConnectionRequest) (*CreateDataCatalogConnectionResponse, error)
}

// UnimplementedDataCatalogServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDataCatalogServiceServer struct {
}

func (UnimplementedDataCatalogServiceServer) GetDataCatalogConnection(context.Context, *GetDataCatalogConnectionRequest) (*GetDataCatalogConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataCatalogConnection not implemented")
}
func (UnimplementedDataCatalogServiceServer) ListDataCatalogConnections(context.Context, *ListDataCatalogConnectionsRequest) (*ListDataCatalogConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataCatalogConnections not implemented")
}
func (UnimplementedDataCatalogServiceServer) CreateDataCatalogConnection(context.Context, *CreateDataCatalogConnectionRequest) (*CreateDataCatalogConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataCatalogConnection not implemented")
}

// UnsafeDataCatalogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataCatalogServiceServer will
// result in compilation errors.
type UnsafeDataCatalogServiceServer interface {
	mustEmbedUnimplementedDataCatalogServiceServer()
}

func RegisterDataCatalogServiceServer(s grpc.ServiceRegistrar, srv DataCatalogServiceServer) {
	s.RegisterService(&DataCatalogService_ServiceDesc, srv)
}

func _DataCatalogService_GetDataCatalogConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataCatalogConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCatalogServiceServer).GetDataCatalogConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.data_catalog.v1.DataCatalogService/GetDataCatalogConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCatalogServiceServer).GetDataCatalogConnection(ctx, req.(*GetDataCatalogConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCatalogService_ListDataCatalogConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDataCatalogConnectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCatalogServiceServer).ListDataCatalogConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.data_catalog.v1.DataCatalogService/ListDataCatalogConnections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCatalogServiceServer).ListDataCatalogConnections(ctx, req.(*ListDataCatalogConnectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCatalogService_CreateDataCatalogConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDataCatalogConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCatalogServiceServer).CreateDataCatalogConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.data_catalog.v1.DataCatalogService/CreateDataCatalogConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCatalogServiceServer).CreateDataCatalogConnection(ctx, req.(*CreateDataCatalogConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataCatalogService_ServiceDesc is the grpc.ServiceDesc for DataCatalogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataCatalogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "strmprivacy.api.data_catalog.v1.DataCatalogService",
	HandlerType: (*DataCatalogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDataCatalogConnection",
			Handler:    _DataCatalogService_GetDataCatalogConnection_Handler,
		},
		{
			MethodName: "ListDataCatalogConnections",
			Handler:    _DataCatalogService_ListDataCatalogConnections_Handler,
		},
		{
			MethodName: "CreateDataCatalogConnection",
			Handler:    _DataCatalogService_CreateDataCatalogConnection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "strmprivacy/api/data_catalog/v1/data_catalog_v1.proto",
}
