// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.15.8
// source: strmprivacy/api/kafka_users/v1/kafka_users_v1.proto

package kafka_users

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KafkaUsersServiceClient is the client API for KafkaUsersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KafkaUsersServiceClient interface {
	ListKafkaUsers(ctx context.Context, in *ListKafkaUsersRequest, opts ...grpc.CallOption) (*ListKafkaUsersResponse, error)
	GetKafkaUser(ctx context.Context, in *GetKafkaUserRequest, opts ...grpc.CallOption) (*GetKafkaUserResponse, error)
	DeleteKafkaUser(ctx context.Context, in *DeleteKafkaUserRequest, opts ...grpc.CallOption) (*DeleteKafkaUserResponse, error)
	CreateKafkaUser(ctx context.Context, in *CreateKafkaUserRequest, opts ...grpc.CallOption) (*CreateKafkaUserResponse, error)
}

type kafkaUsersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKafkaUsersServiceClient(cc grpc.ClientConnInterface) KafkaUsersServiceClient {
	return &kafkaUsersServiceClient{cc}
}

func (c *kafkaUsersServiceClient) ListKafkaUsers(ctx context.Context, in *ListKafkaUsersRequest, opts ...grpc.CallOption) (*ListKafkaUsersResponse, error) {
	out := new(ListKafkaUsersResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.kafka_users.v1.KafkaUsersService/ListKafkaUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaUsersServiceClient) GetKafkaUser(ctx context.Context, in *GetKafkaUserRequest, opts ...grpc.CallOption) (*GetKafkaUserResponse, error) {
	out := new(GetKafkaUserResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.kafka_users.v1.KafkaUsersService/GetKafkaUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaUsersServiceClient) DeleteKafkaUser(ctx context.Context, in *DeleteKafkaUserRequest, opts ...grpc.CallOption) (*DeleteKafkaUserResponse, error) {
	out := new(DeleteKafkaUserResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.kafka_users.v1.KafkaUsersService/DeleteKafkaUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaUsersServiceClient) CreateKafkaUser(ctx context.Context, in *CreateKafkaUserRequest, opts ...grpc.CallOption) (*CreateKafkaUserResponse, error) {
	out := new(CreateKafkaUserResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.kafka_users.v1.KafkaUsersService/CreateKafkaUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KafkaUsersServiceServer is the server API for KafkaUsersService service.
// All implementations must embed UnimplementedKafkaUsersServiceServer
// for forward compatibility
type KafkaUsersServiceServer interface {
	ListKafkaUsers(context.Context, *ListKafkaUsersRequest) (*ListKafkaUsersResponse, error)
	GetKafkaUser(context.Context, *GetKafkaUserRequest) (*GetKafkaUserResponse, error)
	DeleteKafkaUser(context.Context, *DeleteKafkaUserRequest) (*DeleteKafkaUserResponse, error)
	CreateKafkaUser(context.Context, *CreateKafkaUserRequest) (*CreateKafkaUserResponse, error)
	mustEmbedUnimplementedKafkaUsersServiceServer()
}

// UnimplementedKafkaUsersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKafkaUsersServiceServer struct {
}

func (UnimplementedKafkaUsersServiceServer) ListKafkaUsers(context.Context, *ListKafkaUsersRequest) (*ListKafkaUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKafkaUsers not implemented")
}
func (UnimplementedKafkaUsersServiceServer) GetKafkaUser(context.Context, *GetKafkaUserRequest) (*GetKafkaUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKafkaUser not implemented")
}
func (UnimplementedKafkaUsersServiceServer) DeleteKafkaUser(context.Context, *DeleteKafkaUserRequest) (*DeleteKafkaUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKafkaUser not implemented")
}
func (UnimplementedKafkaUsersServiceServer) CreateKafkaUser(context.Context, *CreateKafkaUserRequest) (*CreateKafkaUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKafkaUser not implemented")
}
func (UnimplementedKafkaUsersServiceServer) mustEmbedUnimplementedKafkaUsersServiceServer() {}

// UnsafeKafkaUsersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KafkaUsersServiceServer will
// result in compilation errors.
type UnsafeKafkaUsersServiceServer interface {
	mustEmbedUnimplementedKafkaUsersServiceServer()
}

func RegisterKafkaUsersServiceServer(s grpc.ServiceRegistrar, srv KafkaUsersServiceServer) {
	s.RegisterService(&KafkaUsersService_ServiceDesc, srv)
}

func _KafkaUsersService_ListKafkaUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKafkaUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaUsersServiceServer).ListKafkaUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.kafka_users.v1.KafkaUsersService/ListKafkaUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaUsersServiceServer).ListKafkaUsers(ctx, req.(*ListKafkaUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KafkaUsersService_GetKafkaUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKafkaUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaUsersServiceServer).GetKafkaUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.kafka_users.v1.KafkaUsersService/GetKafkaUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaUsersServiceServer).GetKafkaUser(ctx, req.(*GetKafkaUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KafkaUsersService_DeleteKafkaUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKafkaUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaUsersServiceServer).DeleteKafkaUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.kafka_users.v1.KafkaUsersService/DeleteKafkaUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaUsersServiceServer).DeleteKafkaUser(ctx, req.(*DeleteKafkaUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KafkaUsersService_CreateKafkaUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKafkaUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaUsersServiceServer).CreateKafkaUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.kafka_users.v1.KafkaUsersService/CreateKafkaUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaUsersServiceServer).CreateKafkaUser(ctx, req.(*CreateKafkaUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KafkaUsersService_ServiceDesc is the grpc.ServiceDesc for KafkaUsersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KafkaUsersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "strmprivacy.api.kafka_users.v1.KafkaUsersService",
	HandlerType: (*KafkaUsersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListKafkaUsers",
			Handler:    _KafkaUsersService_ListKafkaUsers_Handler,
		},
		{
			MethodName: "GetKafkaUser",
			Handler:    _KafkaUsersService_GetKafkaUser_Handler,
		},
		{
			MethodName: "DeleteKafkaUser",
			Handler:    _KafkaUsersService_DeleteKafkaUser_Handler,
		},
		{
			MethodName: "CreateKafkaUser",
			Handler:    _KafkaUsersService_CreateKafkaUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "strmprivacy/api/kafka_users/v1/kafka_users_v1.proto",
}
