// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: strmprivacy/api/kafka_clusters/v1/kafka_clusters_v1.proto

package kafka_clusters

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KafkaClustersServiceClient is the client API for KafkaClustersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KafkaClustersServiceClient interface {
	ListKafkaClusters(ctx context.Context, in *ListKafkaClustersRequest, opts ...grpc.CallOption) (*ListKafkaClustersResponse, error)
	GetKafkaCluster(ctx context.Context, in *GetKafkaClusterRequest, opts ...grpc.CallOption) (*GetKafkaClusterResponse, error)
	DeleteKafkaCluster(ctx context.Context, in *DeleteKafkaClusterRequest, opts ...grpc.CallOption) (*DeleteKafkaClusterResponse, error)
	CreateKafkaCluster(ctx context.Context, in *CreateKafkaClusterRequest, opts ...grpc.CallOption) (*CreateKafkaClusterResponse, error)
}

type kafkaClustersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKafkaClustersServiceClient(cc grpc.ClientConnInterface) KafkaClustersServiceClient {
	return &kafkaClustersServiceClient{cc}
}

func (c *kafkaClustersServiceClient) ListKafkaClusters(ctx context.Context, in *ListKafkaClustersRequest, opts ...grpc.CallOption) (*ListKafkaClustersResponse, error) {
	out := new(ListKafkaClustersResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.kafka_clusters.v1.KafkaClustersService/ListKafkaClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaClustersServiceClient) GetKafkaCluster(ctx context.Context, in *GetKafkaClusterRequest, opts ...grpc.CallOption) (*GetKafkaClusterResponse, error) {
	out := new(GetKafkaClusterResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.kafka_clusters.v1.KafkaClustersService/GetKafkaCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaClustersServiceClient) DeleteKafkaCluster(ctx context.Context, in *DeleteKafkaClusterRequest, opts ...grpc.CallOption) (*DeleteKafkaClusterResponse, error) {
	out := new(DeleteKafkaClusterResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.kafka_clusters.v1.KafkaClustersService/DeleteKafkaCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaClustersServiceClient) CreateKafkaCluster(ctx context.Context, in *CreateKafkaClusterRequest, opts ...grpc.CallOption) (*CreateKafkaClusterResponse, error) {
	out := new(CreateKafkaClusterResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.kafka_clusters.v1.KafkaClustersService/CreateKafkaCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KafkaClustersServiceServer is the server API for KafkaClustersService service.
// All implementations should embed UnimplementedKafkaClustersServiceServer
// for forward compatibility
type KafkaClustersServiceServer interface {
	ListKafkaClusters(context.Context, *ListKafkaClustersRequest) (*ListKafkaClustersResponse, error)
	GetKafkaCluster(context.Context, *GetKafkaClusterRequest) (*GetKafkaClusterResponse, error)
	DeleteKafkaCluster(context.Context, *DeleteKafkaClusterRequest) (*DeleteKafkaClusterResponse, error)
	CreateKafkaCluster(context.Context, *CreateKafkaClusterRequest) (*CreateKafkaClusterResponse, error)
}

// UnimplementedKafkaClustersServiceServer should be embedded to have forward compatible implementations.
type UnimplementedKafkaClustersServiceServer struct {
}

func (UnimplementedKafkaClustersServiceServer) ListKafkaClusters(context.Context, *ListKafkaClustersRequest) (*ListKafkaClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKafkaClusters not implemented")
}
func (UnimplementedKafkaClustersServiceServer) GetKafkaCluster(context.Context, *GetKafkaClusterRequest) (*GetKafkaClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKafkaCluster not implemented")
}
func (UnimplementedKafkaClustersServiceServer) DeleteKafkaCluster(context.Context, *DeleteKafkaClusterRequest) (*DeleteKafkaClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKafkaCluster not implemented")
}
func (UnimplementedKafkaClustersServiceServer) CreateKafkaCluster(context.Context, *CreateKafkaClusterRequest) (*CreateKafkaClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKafkaCluster not implemented")
}

// UnsafeKafkaClustersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KafkaClustersServiceServer will
// result in compilation errors.
type UnsafeKafkaClustersServiceServer interface {
	mustEmbedUnimplementedKafkaClustersServiceServer()
}

func RegisterKafkaClustersServiceServer(s grpc.ServiceRegistrar, srv KafkaClustersServiceServer) {
	s.RegisterService(&KafkaClustersService_ServiceDesc, srv)
}

func _KafkaClustersService_ListKafkaClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKafkaClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaClustersServiceServer).ListKafkaClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.kafka_clusters.v1.KafkaClustersService/ListKafkaClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaClustersServiceServer).ListKafkaClusters(ctx, req.(*ListKafkaClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KafkaClustersService_GetKafkaCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKafkaClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaClustersServiceServer).GetKafkaCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.kafka_clusters.v1.KafkaClustersService/GetKafkaCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaClustersServiceServer).GetKafkaCluster(ctx, req.(*GetKafkaClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KafkaClustersService_DeleteKafkaCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKafkaClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaClustersServiceServer).DeleteKafkaCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.kafka_clusters.v1.KafkaClustersService/DeleteKafkaCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaClustersServiceServer).DeleteKafkaCluster(ctx, req.(*DeleteKafkaClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KafkaClustersService_CreateKafkaCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKafkaClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaClustersServiceServer).CreateKafkaCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.kafka_clusters.v1.KafkaClustersService/CreateKafkaCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaClustersServiceServer).CreateKafkaCluster(ctx, req.(*CreateKafkaClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KafkaClustersService_ServiceDesc is the grpc.ServiceDesc for KafkaClustersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KafkaClustersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "strmprivacy.api.kafka_clusters.v1.KafkaClustersService",
	HandlerType: (*KafkaClustersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListKafkaClusters",
			Handler:    _KafkaClustersService_ListKafkaClusters_Handler,
		},
		{
			MethodName: "GetKafkaCluster",
			Handler:    _KafkaClustersService_GetKafkaCluster_Handler,
		},
		{
			MethodName: "DeleteKafkaCluster",
			Handler:    _KafkaClustersService_DeleteKafkaCluster_Handler,
		},
		{
			MethodName: "CreateKafkaCluster",
			Handler:    _KafkaClustersService_CreateKafkaCluster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "strmprivacy/api/kafka_clusters/v1/kafka_clusters_v1.proto",
}
