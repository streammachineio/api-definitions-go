// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: strmprivacy/api/entities/v1alpha/entities_v1alpha.proto

package entities

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	v1 "github.com/strmprivacy/api-definitions-go/v3/api/entities/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Entry_MultipleChoiceItem_Style int32

const (
	Entry_MultipleChoiceItem_STYLE_UNSPECIFIED Entry_MultipleChoiceItem_Style = 0
	// multiple answers allowed
	Entry_MultipleChoiceItem_CHECKBOX Entry_MultipleChoiceItem_Style = 1
	// single answer
	Entry_MultipleChoiceItem_DROPDOWN Entry_MultipleChoiceItem_Style = 2
	// single answer
	Entry_MultipleChoiceItem_RADIO Entry_MultipleChoiceItem_Style = 3
)

// Enum value maps for Entry_MultipleChoiceItem_Style.
var (
	Entry_MultipleChoiceItem_Style_name = map[int32]string{
		0: "STYLE_UNSPECIFIED",
		1: "CHECKBOX",
		2: "DROPDOWN",
		3: "RADIO",
	}
	Entry_MultipleChoiceItem_Style_value = map[string]int32{
		"STYLE_UNSPECIFIED": 0,
		"CHECKBOX":          1,
		"DROPDOWN":          2,
		"RADIO":             3,
	}
)

func (x Entry_MultipleChoiceItem_Style) Enum() *Entry_MultipleChoiceItem_Style {
	p := new(Entry_MultipleChoiceItem_Style)
	*p = x
	return p
}

func (x Entry_MultipleChoiceItem_Style) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Entry_MultipleChoiceItem_Style) Descriptor() protoreflect.EnumDescriptor {
	return file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_enumTypes[0].Descriptor()
}

func (Entry_MultipleChoiceItem_Style) Type() protoreflect.EnumType {
	return &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_enumTypes[0]
}

func (x Entry_MultipleChoiceItem_Style) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Entry_MultipleChoiceItem_Style.Descriptor instead.
func (Entry_MultipleChoiceItem_Style) EnumDescriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_rawDescGZIP(), []int{3, 6, 0}
}

type ContactDetails_ContactType int32

const (
	ContactDetails_CONTACT_TYPE_UNSPECIFIED ContactDetails_ContactType = 0
	ContactDetails_PRIMARY                  ContactDetails_ContactType = 1
	ContactDetails_REPRESENTATIVE           ContactDetails_ContactType = 2
	ContactDetails_DATA_PROTECTION_OFFICER  ContactDetails_ContactType = 3
	ContactDetails_OTHER                    ContactDetails_ContactType = 4
)

// Enum value maps for ContactDetails_ContactType.
var (
	ContactDetails_ContactType_name = map[int32]string{
		0: "CONTACT_TYPE_UNSPECIFIED",
		1: "PRIMARY",
		2: "REPRESENTATIVE",
		3: "DATA_PROTECTION_OFFICER",
		4: "OTHER",
	}
	ContactDetails_ContactType_value = map[string]int32{
		"CONTACT_TYPE_UNSPECIFIED": 0,
		"PRIMARY":                  1,
		"REPRESENTATIVE":           2,
		"DATA_PROTECTION_OFFICER":  3,
		"OTHER":                    4,
	}
)

func (x ContactDetails_ContactType) Enum() *ContactDetails_ContactType {
	p := new(ContactDetails_ContactType)
	*p = x
	return p
}

func (x ContactDetails_ContactType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContactDetails_ContactType) Descriptor() protoreflect.EnumDescriptor {
	return file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_enumTypes[1].Descriptor()
}

func (ContactDetails_ContactType) Type() protoreflect.EnumType {
	return &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_enumTypes[1]
}

func (x ContactDetails_ContactType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContactDetails_ContactType.Descriptor instead.
func (ContactDetails_ContactType) EnumDescriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_rawDescGZIP(), []int{4, 0}
}

// This is only relevant within the scope of a ROPA record, following from the relation of this party to that record.
type Party_RelationType int32

const (
	Party_RELATION_TYPE_UNSPECIFIED Party_RelationType = 0
	Party_CONTROLLER                Party_RelationType = 1
	Party_PROCESSOR                 Party_RelationType = 2
	Party_RECIPIENT                 Party_RelationType = 3
)

// Enum value maps for Party_RelationType.
var (
	Party_RelationType_name = map[int32]string{
		0: "RELATION_TYPE_UNSPECIFIED",
		1: "CONTROLLER",
		2: "PROCESSOR",
		3: "RECIPIENT",
	}
	Party_RelationType_value = map[string]int32{
		"RELATION_TYPE_UNSPECIFIED": 0,
		"CONTROLLER":                1,
		"PROCESSOR":                 2,
		"RECIPIENT":                 3,
	}
)

func (x Party_RelationType) Enum() *Party_RelationType {
	p := new(Party_RelationType)
	*p = x
	return p
}

func (x Party_RelationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Party_RelationType) Descriptor() protoreflect.EnumDescriptor {
	return file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_enumTypes[2].Descriptor()
}

func (Party_RelationType) Type() protoreflect.EnumType {
	return &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_enumTypes[2]
}

func (x Party_RelationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Party_RelationType.Descriptor instead.
func (Party_RelationType) EnumDescriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_rawDescGZIP(), []int{5, 0}
}

type Category_Type int32

const (
	Category_TYPE_UNSPECIFIED Category_Type = 0
	Category_DATA             Category_Type = 1
	Category_DATA_SUBJECT     Category_Type = 2
	Category_DATA_RECIPIENT   Category_Type = 3
	Category_DATA_ASSET       Category_Type = 4
	Category_PERSONAL_DATA    Category_Type = 5
	Category_PROCESSING       Category_Type = 6
	Category_SECURITY_MEASURE Category_Type = 7
)

// Enum value maps for Category_Type.
var (
	Category_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "DATA",
		2: "DATA_SUBJECT",
		3: "DATA_RECIPIENT",
		4: "DATA_ASSET",
		5: "PERSONAL_DATA",
		6: "PROCESSING",
		7: "SECURITY_MEASURE",
	}
	Category_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"DATA":             1,
		"DATA_SUBJECT":     2,
		"DATA_RECIPIENT":   3,
		"DATA_ASSET":       4,
		"PERSONAL_DATA":    5,
		"PROCESSING":       6,
		"SECURITY_MEASURE": 7,
	}
)

func (x Category_Type) Enum() *Category_Type {
	p := new(Category_Type)
	*p = x
	return p
}

func (x Category_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Category_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_enumTypes[3].Descriptor()
}

func (Category_Type) Type() protoreflect.EnumType {
	return &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_enumTypes[3]
}

func (x Category_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Category_Type.Descriptor instead.
func (Category_Type) EnumDescriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_rawDescGZIP(), []int{6, 0}
}

// This is only relevant within the scope of a ROPA record, following from the relation of this data asset to that record.
type DataAsset_RelationType int32

const (
	DataAsset_RELATION_TYPE_UNSPECIFIED DataAsset_RelationType = 0
	DataAsset_DATA_SOURCE               DataAsset_RelationType = 1
)

// Enum value maps for DataAsset_RelationType.
var (
	DataAsset_RelationType_name = map[int32]string{
		0: "RELATION_TYPE_UNSPECIFIED",
		1: "DATA_SOURCE",
	}
	DataAsset_RelationType_value = map[string]int32{
		"RELATION_TYPE_UNSPECIFIED": 0,
		"DATA_SOURCE":               1,
	}
)

func (x DataAsset_RelationType) Enum() *DataAsset_RelationType {
	p := new(DataAsset_RelationType)
	*p = x
	return p
}

func (x DataAsset_RelationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataAsset_RelationType) Descriptor() protoreflect.EnumDescriptor {
	return file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_enumTypes[4].Descriptor()
}

func (DataAsset_RelationType) Type() protoreflect.EnumType {
	return &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_enumTypes[4]
}

func (x DataAsset_RelationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataAsset_RelationType.Descriptor instead.
func (DataAsset_RelationType) EnumDescriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_rawDescGZIP(), []int{7, 0}
}

// A project plan contains a series of Entry instances, each of which will typically concern one
// form question. There is also a `html` entry, that allow you to put anything you want in it. This
// allows the person designing the form to add explanatory sections, or headers, or images, or ...
//
// Meta information like name, title and description is that of the associated Project.
//
// NOTE:  these no longer can be templates, and they don't have an `id`, i.e. they don't exist by
// themselves, but only in the context of a project.
type ProjectPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string   `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Entries   []*Entry `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *ProjectPlan) Reset() {
	*x = ProjectPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectPlan) ProtoMessage() {}

func (x *ProjectPlan) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectPlan.ProtoReflect.Descriptor instead.
func (*ProjectPlan) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_rawDescGZIP(), []int{0}
}

func (x *ProjectPlan) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ProjectPlan) GetEntries() []*Entry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type FormTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// organization unique name
	Name           string                                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationId string                                `protobuf:"bytes,3,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Items          []*FormTemplate_EntryOrFormTemplateId `protobuf:"bytes,4,rep,name=items,proto3" json:"items,omitempty"`
	// This flag means that this form template will be shown when starting a project.
	// The form template should have at least one Entry of type MultipleChoiceItem, where
	// the associated_form_template_id's can be used to build a project plan
	IsProjectIntake bool `protobuf:"varint,5,opt,name=is_project_intake,json=isProjectIntake,proto3" json:"is_project_intake,omitempty"`
}

func (x *FormTemplate) Reset() {
	*x = FormTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormTemplate) ProtoMessage() {}

func (x *FormTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormTemplate.ProtoReflect.Descriptor instead.
func (*FormTemplate) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_rawDescGZIP(), []int{1}
}

func (x *FormTemplate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FormTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FormTemplate) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *FormTemplate) GetItems() []*FormTemplate_EntryOrFormTemplateId {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *FormTemplate) GetIsProjectIntake() bool {
	if x != nil {
		return x.IsProjectIntake
	}
	return false
}

type FormTemplateReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RenderInline bool   `protobuf:"varint,2,opt,name=render_inline,json=renderInline,proto3" json:"render_inline,omitempty"`
}

func (x *FormTemplateReference) Reset() {
	*x = FormTemplateReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormTemplateReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormTemplateReference) ProtoMessage() {}

func (x *FormTemplateReference) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormTemplateReference.ProtoReflect.Descriptor instead.
func (*FormTemplateReference) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_rawDescGZIP(), []int{2}
}

func (x *FormTemplateReference) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FormTemplateReference) GetRenderInline() bool {
	if x != nil {
		return x.RenderInline
	}
	return false
}

// an Entry in a form or ProjectPlan.
//
// An entry has some generic attributes (all the fields above the `oneof item`) and then
// one of the various Entry types.
//
// An interesting type is the `html` type that just contains html that will directly be shown in the browser.
// This allows us to add arbitrary non-functional parts. The html will have to be sanitized.
type Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// the name of an entry, just a human readable reference to be rendered
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// the content of an entry; the question to be asked, the task to be completed, ...
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	// when was the entry created
	CreationTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	// when is the entry due to be filled in
	DueTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=due_time,json=dueTime,proto3" json:"due_time,omitempty"`
	// when was the entry filled in.
	CompletionTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=completion_time,json=completionTime,proto3" json:"completion_time,omitempty"`
	// The user that created this item, retrieved from the JWT token.
	Creator *v1.User `protobuf:"bytes,7,opt,name=creator,proto3" json:"creator,omitempty"`
	// The user that is assigned to this item.
	Assignee *v1.User `protobuf:"bytes,8,opt,name=assignee,proto3" json:"assignee,omitempty"`
	// help text describing the item. Might give an example response for instance.
	HelpText string `protobuf:"bytes,9,opt,name=help_text,json=helpText,proto3" json:"help_text,omitempty"`
	// generic remark to be filled in by a user.
	Remark string `protobuf:"bytes,10,opt,name=remark,proto3" json:"remark,omitempty"`
	// whether or not the user can delete an item.
	CanBeDeleted bool `protobuf:"varint,11,opt,name=can_be_deleted,json=canBeDeleted,proto3" json:"can_be_deleted,omitempty"`
	// renders a header of a certain type of item.
	// this might involve adding a <table> element in html
	// this creates a sort of section which will be closed when one of the following occurs
	// * an entry of a different type is the next to be processed
	// * we encounter another render_header entry.
	// * we just rendered the last Entry in the list
	FormTemplateId string `protobuf:"bytes,12,opt,name=form_template_id,json=formTemplateId,proto3" json:"form_template_id,omitempty"`
	// Types that are assignable to Item:
	//
	//	*Entry_Task_
	//	*Entry_DataContract_
	//	*Entry_Document_
	//	*Entry_Pipeline_
	//	*Entry_Question_
	//	*Entry_Choices
	//	*Entry_Html
	//	*Entry_SectionOpen_
	//	*Entry_SectionClose_
	//	*Entry_AddOneEntry_
	Item isEntry_Item `protobuf_oneof:"item"`
}

func (x *Entry) Reset() {
	*x = Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entry) ProtoMessage() {}

func (x *Entry) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entry.ProtoReflect.Descriptor instead.
func (*Entry) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_rawDescGZIP(), []int{3}
}

func (x *Entry) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Entry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Entry) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Entry) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *Entry) GetDueTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DueTime
	}
	return nil
}

func (x *Entry) GetCompletionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletionTime
	}
	return nil
}

func (x *Entry) GetCreator() *v1.User {
	if x != nil {
		return x.Creator
	}
	return nil
}

func (x *Entry) GetAssignee() *v1.User {
	if x != nil {
		return x.Assignee
	}
	return nil
}

func (x *Entry) GetHelpText() string {
	if x != nil {
		return x.HelpText
	}
	return ""
}

func (x *Entry) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *Entry) GetCanBeDeleted() bool {
	if x != nil {
		return x.CanBeDeleted
	}
	return false
}

func (x *Entry) GetFormTemplateId() string {
	if x != nil {
		return x.FormTemplateId
	}
	return ""
}

func (m *Entry) GetItem() isEntry_Item {
	if m != nil {
		return m.Item
	}
	return nil
}

func (x *Entry) GetTask() *Entry_Task {
	if x, ok := x.GetItem().(*Entry_Task_); ok {
		return x.Task
	}
	return nil
}

func (x *Entry) GetDataContract() *Entry_DataContract {
	if x, ok := x.GetItem().(*Entry_DataContract_); ok {
		return x.DataContract
	}
	return nil
}

func (x *Entry) GetDocument() *Entry_Document {
	if x, ok := x.GetItem().(*Entry_Document_); ok {
		return x.Document
	}
	return nil
}

func (x *Entry) GetPipeline() *Entry_Pipeline {
	if x, ok := x.GetItem().(*Entry_Pipeline_); ok {
		return x.Pipeline
	}
	return nil
}

func (x *Entry) GetQuestion() *Entry_Question {
	if x, ok := x.GetItem().(*Entry_Question_); ok {
		return x.Question
	}
	return nil
}

func (x *Entry) GetChoices() *Entry_MultipleChoiceItem {
	if x, ok := x.GetItem().(*Entry_Choices); ok {
		return x.Choices
	}
	return nil
}

func (x *Entry) GetHtml() string {
	if x, ok := x.GetItem().(*Entry_Html); ok {
		return x.Html
	}
	return ""
}

func (x *Entry) GetSectionOpen() *Entry_SectionOpen {
	if x, ok := x.GetItem().(*Entry_SectionOpen_); ok {
		return x.SectionOpen
	}
	return nil
}

func (x *Entry) GetSectionClose() *Entry_SectionClose {
	if x, ok := x.GetItem().(*Entry_SectionClose_); ok {
		return x.SectionClose
	}
	return nil
}

func (x *Entry) GetAddOneEntry() *Entry_AddOneEntry {
	if x, ok := x.GetItem().(*Entry_AddOneEntry_); ok {
		return x.AddOneEntry
	}
	return nil
}

type isEntry_Item interface {
	isEntry_Item()
}

type Entry_Task_ struct {
	Task *Entry_Task `protobuf:"bytes,13,opt,name=task,proto3,oneof"`
}

type Entry_DataContract_ struct {
	DataContract *Entry_DataContract `protobuf:"bytes,14,opt,name=data_contract,json=dataContract,proto3,oneof"`
}

type Entry_Document_ struct {
	Document *Entry_Document `protobuf:"bytes,15,opt,name=document,proto3,oneof"`
}

type Entry_Pipeline_ struct {
	Pipeline *Entry_Pipeline `protobuf:"bytes,16,opt,name=pipeline,proto3,oneof"`
}

type Entry_Question_ struct {
	Question *Entry_Question `protobuf:"bytes,17,opt,name=question,proto3,oneof"`
}

type Entry_Choices struct {
	Choices *Entry_MultipleChoiceItem `protobuf:"bytes,18,opt,name=choices,proto3,oneof"`
}

type Entry_Html struct {
	Html string `protobuf:"bytes,19,opt,name=html,proto3,oneof"`
}

type Entry_SectionOpen_ struct {
	// special kind of item that opens a new element that is being rendered.
	SectionOpen *Entry_SectionOpen `protobuf:"bytes,20,opt,name=section_open,json=sectionOpen,proto3,oneof"`
}

type Entry_SectionClose_ struct {
	// special kind of item that closes the current element that is being rendered.
	SectionClose *Entry_SectionClose `protobuf:"bytes,21,opt,name=section_close,json=sectionClose,proto3,oneof"`
}

type Entry_AddOneEntry_ struct {
	AddOneEntry *Entry_AddOneEntry `protobuf:"bytes,109,opt,name=add_one_entry,json=addOneEntry,proto3,oneof"`
}

func (*Entry_Task_) isEntry_Item() {}

func (*Entry_DataContract_) isEntry_Item() {}

func (*Entry_Document_) isEntry_Item() {}

func (*Entry_Pipeline_) isEntry_Item() {}

func (*Entry_Question_) isEntry_Item() {}

func (*Entry_Choices) isEntry_Item() {}

func (*Entry_Html) isEntry_Item() {}

func (*Entry_SectionOpen_) isEntry_Item() {}

func (*Entry_SectionClose_) isEntry_Item() {}

func (*Entry_AddOneEntry_) isEntry_Item() {}

type ContactDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type ContactDetails_ContactType `protobuf:"varint,1,opt,name=type,proto3,enum=strmprivacy.api.entities.v1alpha.ContactDetails_ContactType" json:"type,omitempty"`
	// The type of contact in case OTHER was selected.
	OtherType string `protobuf:"bytes,2,opt,name=other_type,json=otherType,proto3" json:"other_type,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Address   string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	Email     string `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	Phone     string `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (x *ContactDetails) Reset() {
	*x = ContactDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactDetails) ProtoMessage() {}

func (x *ContactDetails) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactDetails.ProtoReflect.Descriptor instead.
func (*ContactDetails) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_rawDescGZIP(), []int{4}
}

func (x *ContactDetails) GetType() ContactDetails_ContactType {
	if x != nil {
		return x.Type
	}
	return ContactDetails_CONTACT_TYPE_UNSPECIFIED
}

func (x *ContactDetails) GetOtherType() string {
	if x != nil {
		return x.OtherType
	}
	return ""
}

func (x *ContactDetails) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContactDetails) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ContactDetails) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ContactDetails) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

// A party is a (legal) entity that is involved in the processing of data in some way.
// It can be an organization, but also a person, a department, a team, etc.
type Party struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Whether this is an external party or not.
	External bool   `protobuf:"varint,2,opt,name=external,proto3" json:"external,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Two-letter region code as mandated by the AIP https://google.aip.dev/143#countries-and-regions
	RegionCode     string                 `protobuf:"bytes,4,opt,name=region_code,json=regionCode,proto3" json:"region_code,omitempty"`
	ContactDetails []*ContactDetails      `protobuf:"bytes,5,rep,name=contact_details,json=contactDetails,proto3" json:"contact_details,omitempty"`
	UpdateTime     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *Party) Reset() {
	*x = Party{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Party) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Party) ProtoMessage() {}

func (x *Party) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Party.ProtoReflect.Descriptor instead.
func (*Party) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_rawDescGZIP(), []int{5}
}

func (x *Party) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Party) GetExternal() bool {
	if x != nil {
		return x.External
	}
	return false
}

func (x *Party) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Party) GetRegionCode() string {
	if x != nil {
		return x.RegionCode
	}
	return ""
}

func (x *Party) GetContactDetails() []*ContactDetails {
	if x != nil {
		return x.ContactDetails
	}
	return nil
}

func (x *Party) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// Categories are pretty arbitrary classifications, but always have a specific type.
// Their names are unique within a type. Names can be reused across types.
type Category struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type       Category_Type          `protobuf:"varint,3,opt,name=type,proto3,enum=strmprivacy.api.entities.v1alpha.Category_Type" json:"type,omitempty"`
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *Category) Reset() {
	*x = Category{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Category) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Category) ProtoMessage() {}

func (x *Category) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Category.ProtoReflect.Descriptor instead.
func (*Category) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_rawDescGZIP(), []int{6}
}

func (x *Category) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Category) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Category) GetType() Category_Type {
	if x != nil {
		return x.Type
	}
	return Category_TYPE_UNSPECIFIED
}

func (x *Category) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

type DataAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// These are categories of type DATA_ASSET.
	Categories   []*Category `protobuf:"bytes,3,rep,name=categories,proto3" json:"categories,omitempty"`
	HostingParty *Party      `protobuf:"bytes,4,opt,name=hosting_party,json=hostingParty,proto3" json:"hosting_party,omitempty"`
	// Contact person at hosting party, details should be in the party record.
	ContactPersonName string `protobuf:"bytes,5,opt,name=contact_person_name,json=contactPersonName,proto3" json:"contact_person_name,omitempty"`
	// Two-letter region code as mandated by the AIP https://google.aip.dev/143#countries-and-regions
	RegionCode string                 `protobuf:"bytes,6,opt,name=region_code,json=regionCode,proto3" json:"region_code,omitempty"`
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *DataAsset) Reset() {
	*x = DataAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataAsset) ProtoMessage() {}

func (x *DataAsset) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataAsset.ProtoReflect.Descriptor instead.
func (*DataAsset) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_rawDescGZIP(), []int{7}
}

func (x *DataAsset) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DataAsset) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DataAsset) GetCategories() []*Category {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *DataAsset) GetHostingParty() *Party {
	if x != nil {
		return x.HostingParty
	}
	return nil
}

func (x *DataAsset) GetContactPersonName() string {
	if x != nil {
		return x.ContactPersonName
	}
	return ""
}

func (x *DataAsset) GetRegionCode() string {
	if x != nil {
		return x.RegionCode
	}
	return ""
}

func (x *DataAsset) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// A continuous collection of all first and third party data processing activities
// of an organization. It is a "living document" that should be updated constantly as things change.
// It is not a snapshot but a dynamic collection of the processing activities that at any time
// reflects the current state of the data processing activities.
// When a ROPA is requested for an audit, the auditor would normally expect the most recent version
// that reflects the current activities, not a historical log of all previous versions or changes.
// But this does not mean that the history of certain data processing activities can be ignored.
// For example, if data has been transferred or shared, or if incidents (hack / leak of certain data
// or whatever) have occurred, this should be reflected in the version history of individual ROPA records.
type Ropa struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The STRM organization ID this ROPA is for.
	OrganizationId string         `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Records        []*Ropa_Record `protobuf:"bytes,2,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *Ropa) Reset() {
	*x = Ropa{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ropa) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ropa) ProtoMessage() {}

func (x *Ropa) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ropa.ProtoReflect.Descriptor instead.
func (*Ropa) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_rawDescGZIP(), []int{8}
}

func (x *Ropa) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *Ropa) GetRecords() []*Ropa_Record {
	if x != nil {
		return x.Records
	}
	return nil
}

type FormTemplate_EntryOrFormTemplateId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Part:
	//
	//	*FormTemplate_EntryOrFormTemplateId_FormTemplate
	//	*FormTemplate_EntryOrFormTemplateId_Entry
	Part isFormTemplate_EntryOrFormTemplateId_Part `protobuf_oneof:"part"`
}

func (x *FormTemplate_EntryOrFormTemplateId) Reset() {
	*x = FormTemplate_EntryOrFormTemplateId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormTemplate_EntryOrFormTemplateId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormTemplate_EntryOrFormTemplateId) ProtoMessage() {}

func (x *FormTemplate_EntryOrFormTemplateId) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormTemplate_EntryOrFormTemplateId.ProtoReflect.Descriptor instead.
func (*FormTemplate_EntryOrFormTemplateId) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_rawDescGZIP(), []int{1, 0}
}

func (m *FormTemplate_EntryOrFormTemplateId) GetPart() isFormTemplate_EntryOrFormTemplateId_Part {
	if m != nil {
		return m.Part
	}
	return nil
}

func (x *FormTemplate_EntryOrFormTemplateId) GetFormTemplate() *FormTemplateReference {
	if x, ok := x.GetPart().(*FormTemplate_EntryOrFormTemplateId_FormTemplate); ok {
		return x.FormTemplate
	}
	return nil
}

func (x *FormTemplate_EntryOrFormTemplateId) GetEntry() *Entry {
	if x, ok := x.GetPart().(*FormTemplate_EntryOrFormTemplateId_Entry); ok {
		return x.Entry
	}
	return nil
}

type isFormTemplate_EntryOrFormTemplateId_Part interface {
	isFormTemplate_EntryOrFormTemplateId_Part()
}

type FormTemplate_EntryOrFormTemplateId_FormTemplate struct {
	FormTemplate *FormTemplateReference `protobuf:"bytes,1,opt,name=form_template,json=formTemplate,proto3,oneof"`
}

type FormTemplate_EntryOrFormTemplateId_Entry struct {
	Entry *Entry `protobuf:"bytes,2,opt,name=entry,proto3,oneof"`
}

func (*FormTemplate_EntryOrFormTemplateId_FormTemplate) isFormTemplate_EntryOrFormTemplateId_Part() {}

func (*FormTemplate_EntryOrFormTemplateId_Entry) isFormTemplate_EntryOrFormTemplateId_Part() {}

// special kind of entry that renders a user-interface element, that when
// activated will create an entry of a certain type just above this entry.
type Entry_AddOneEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*Entry_AddOneEntry_Task
	//	*Entry_AddOneEntry_DataContract
	//	*Entry_AddOneEntry_Document
	//	*Entry_AddOneEntry_Pipeline
	//	*Entry_AddOneEntry_Question
	//	*Entry_AddOneEntry_Choices
	//	*Entry_AddOneEntry_Html
	Type isEntry_AddOneEntry_Type `protobuf_oneof:"type"`
}

func (x *Entry_AddOneEntry) Reset() {
	*x = Entry_AddOneEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entry_AddOneEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entry_AddOneEntry) ProtoMessage() {}

func (x *Entry_AddOneEntry) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entry_AddOneEntry.ProtoReflect.Descriptor instead.
func (*Entry_AddOneEntry) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_rawDescGZIP(), []int{3, 0}
}

func (m *Entry_AddOneEntry) GetType() isEntry_AddOneEntry_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Entry_AddOneEntry) GetTask() *Entry_Task {
	if x, ok := x.GetType().(*Entry_AddOneEntry_Task); ok {
		return x.Task
	}
	return nil
}

func (x *Entry_AddOneEntry) GetDataContract() *Entry_DataContract {
	if x, ok := x.GetType().(*Entry_AddOneEntry_DataContract); ok {
		return x.DataContract
	}
	return nil
}

func (x *Entry_AddOneEntry) GetDocument() *Entry_Document {
	if x, ok := x.GetType().(*Entry_AddOneEntry_Document); ok {
		return x.Document
	}
	return nil
}

func (x *Entry_AddOneEntry) GetPipeline() *Entry_Pipeline {
	if x, ok := x.GetType().(*Entry_AddOneEntry_Pipeline); ok {
		return x.Pipeline
	}
	return nil
}

func (x *Entry_AddOneEntry) GetQuestion() *Entry_Question {
	if x, ok := x.GetType().(*Entry_AddOneEntry_Question); ok {
		return x.Question
	}
	return nil
}

func (x *Entry_AddOneEntry) GetChoices() *Entry_MultipleChoiceItem {
	if x, ok := x.GetType().(*Entry_AddOneEntry_Choices); ok {
		return x.Choices
	}
	return nil
}

func (x *Entry_AddOneEntry) GetHtml() string {
	if x, ok := x.GetType().(*Entry_AddOneEntry_Html); ok {
		return x.Html
	}
	return ""
}

type isEntry_AddOneEntry_Type interface {
	isEntry_AddOneEntry_Type()
}

type Entry_AddOneEntry_Task struct {
	Task *Entry_Task `protobuf:"bytes,1,opt,name=task,proto3,oneof"`
}

type Entry_AddOneEntry_DataContract struct {
	DataContract *Entry_DataContract `protobuf:"bytes,2,opt,name=data_contract,json=dataContract,proto3,oneof"`
}

type Entry_AddOneEntry_Document struct {
	Document *Entry_Document `protobuf:"bytes,3,opt,name=document,proto3,oneof"`
}

type Entry_AddOneEntry_Pipeline struct {
	Pipeline *Entry_Pipeline `protobuf:"bytes,4,opt,name=pipeline,proto3,oneof"`
}

type Entry_AddOneEntry_Question struct {
	Question *Entry_Question `protobuf:"bytes,5,opt,name=question,proto3,oneof"`
}

type Entry_AddOneEntry_Choices struct {
	Choices *Entry_MultipleChoiceItem `protobuf:"bytes,6,opt,name=choices,proto3,oneof"`
}

type Entry_AddOneEntry_Html struct {
	Html string `protobuf:"bytes,7,opt,name=html,proto3,oneof"`
}

func (*Entry_AddOneEntry_Task) isEntry_AddOneEntry_Type() {}

func (*Entry_AddOneEntry_DataContract) isEntry_AddOneEntry_Type() {}

func (*Entry_AddOneEntry_Document) isEntry_AddOneEntry_Type() {}

func (*Entry_AddOneEntry_Pipeline) isEntry_AddOneEntry_Type() {}

func (*Entry_AddOneEntry_Question) isEntry_AddOneEntry_Type() {}

func (*Entry_AddOneEntry_Choices) isEntry_AddOneEntry_Type() {}

func (*Entry_AddOneEntry_Html) isEntry_AddOneEntry_Type() {}

type Entry_Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Entry_Task) Reset() {
	*x = Entry_Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entry_Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entry_Task) ProtoMessage() {}

func (x *Entry_Task) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entry_Task.ProtoReflect.Descriptor instead.
func (*Entry_Task) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_rawDescGZIP(), []int{3, 1}
}

type Entry_DataContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Data Contract details can be retrieved through the Data Contract API.
	Ref *v1.DataContractRef `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
}

func (x *Entry_DataContract) Reset() {
	*x = Entry_DataContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entry_DataContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entry_DataContract) ProtoMessage() {}

func (x *Entry_DataContract) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entry_DataContract.ProtoReflect.Descriptor instead.
func (*Entry_DataContract) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_rawDescGZIP(), []int{3, 2}
}

func (x *Entry_DataContract) GetRef() *v1.DataContractRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

type Entry_Document struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filename should be unique within the project.
	Filename string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
	// If the URI is set, then the document originates from an external source.
	Uri string `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *Entry_Document) Reset() {
	*x = Entry_Document{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entry_Document) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entry_Document) ProtoMessage() {}

func (x *Entry_Document) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entry_Document.ProtoReflect.Descriptor instead.
func (*Entry_Document) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_rawDescGZIP(), []int{3, 3}
}

func (x *Entry_Document) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *Entry_Document) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

type Entry_Pipeline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Pipeline:
	//
	//	*Entry_Pipeline_Stream
	//	*Entry_Pipeline_BatchJob
	Pipeline isEntry_Pipeline_Pipeline `protobuf_oneof:"pipeline"`
}

func (x *Entry_Pipeline) Reset() {
	*x = Entry_Pipeline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entry_Pipeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entry_Pipeline) ProtoMessage() {}

func (x *Entry_Pipeline) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entry_Pipeline.ProtoReflect.Descriptor instead.
func (*Entry_Pipeline) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_rawDescGZIP(), []int{3, 4}
}

func (m *Entry_Pipeline) GetPipeline() isEntry_Pipeline_Pipeline {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

func (x *Entry_Pipeline) GetStream() *v1.StreamRef {
	if x, ok := x.GetPipeline().(*Entry_Pipeline_Stream); ok {
		return x.Stream
	}
	return nil
}

func (x *Entry_Pipeline) GetBatchJob() *v1.BatchJobRef {
	if x, ok := x.GetPipeline().(*Entry_Pipeline_BatchJob); ok {
		return x.BatchJob
	}
	return nil
}

type isEntry_Pipeline_Pipeline interface {
	isEntry_Pipeline_Pipeline()
}

type Entry_Pipeline_Stream struct {
	Stream *v1.StreamRef `protobuf:"bytes,2,opt,name=stream,proto3,oneof"`
}

type Entry_Pipeline_BatchJob struct {
	BatchJob *v1.BatchJobRef `protobuf:"bytes,3,opt,name=batch_job,json=batchJob,proto3,oneof"`
}

func (*Entry_Pipeline_Stream) isEntry_Pipeline_Pipeline() {}

func (*Entry_Pipeline_BatchJob) isEntry_Pipeline_Pipeline() {}

type Entry_Question struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the question is the `content` field
	AnswersAndLabels []*Entry_Question_AnswerAndLabel `protobuf:"bytes,1,rep,name=answers_and_labels,json=answersAndLabels,proto3" json:"answers_and_labels,omitempty"`
}

func (x *Entry_Question) Reset() {
	*x = Entry_Question{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entry_Question) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entry_Question) ProtoMessage() {}

func (x *Entry_Question) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entry_Question.ProtoReflect.Descriptor instead.
func (*Entry_Question) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_rawDescGZIP(), []int{3, 5}
}

func (x *Entry_Question) GetAnswersAndLabels() []*Entry_Question_AnswerAndLabel {
	if x != nil {
		return x.AnswersAndLabels
	}
	return nil
}

type Entry_MultipleChoiceItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// the choices are what gets rendered
	Choices []string `protobuf:"bytes,2,rep,name=choices,proto3" json:"choices,omitempty"`
	// the weights are a 1 to 1 mapping on the choices, i.e. choice[2] corresponds to weight[2]
	Weights []float32 `protobuf:"fixed32,3,rep,packed,name=weights,proto3" json:"weights,omitempty"`
	// answers contain the zero-based index(es) to the choice(s) selected by the user.
	Answers []int32 `protobuf:"varint,4,rep,packed,name=answers,proto3" json:"answers,omitempty"`
	// Style determines both the type of rendering, and whether or not multiple answers might be given
	Style Entry_MultipleChoiceItem_Style `protobuf:"varint,5,opt,name=style,proto3,enum=strmprivacy.api.entities.v1alpha.Entry_MultipleChoiceItem_Style" json:"style,omitempty"`
	// in case of a project-intake template, these point to associated form template id's that
	// will be used to build a ProjectPlan by an on-the fly chaining of the forms that were checked.
	// For most entries, this field will be empty, but for project intake form templates, it should have the same
	// number of entries as the choices!
	AssociatedFormTemplateId []string `protobuf:"bytes,6,rep,name=associated_form_template_id,json=associatedFormTemplateId,proto3" json:"associated_form_template_id,omitempty"`
}

func (x *Entry_MultipleChoiceItem) Reset() {
	*x = Entry_MultipleChoiceItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entry_MultipleChoiceItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entry_MultipleChoiceItem) ProtoMessage() {}

func (x *Entry_MultipleChoiceItem) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entry_MultipleChoiceItem.ProtoReflect.Descriptor instead.
func (*Entry_MultipleChoiceItem) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_rawDescGZIP(), []int{3, 6}
}

func (x *Entry_MultipleChoiceItem) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Entry_MultipleChoiceItem) GetChoices() []string {
	if x != nil {
		return x.Choices
	}
	return nil
}

func (x *Entry_MultipleChoiceItem) GetWeights() []float32 {
	if x != nil {
		return x.Weights
	}
	return nil
}

func (x *Entry_MultipleChoiceItem) GetAnswers() []int32 {
	if x != nil {
		return x.Answers
	}
	return nil
}

func (x *Entry_MultipleChoiceItem) GetStyle() Entry_MultipleChoiceItem_Style {
	if x != nil {
		return x.Style
	}
	return Entry_MultipleChoiceItem_STYLE_UNSPECIFIED
}

func (x *Entry_MultipleChoiceItem) GetAssociatedFormTemplateId() []string {
	if x != nil {
		return x.AssociatedFormTemplateId
	}
	return nil
}

type Entry_RiskAssessmentItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Risk           string `protobuf:"bytes,2,opt,name=risk,proto3" json:"risk,omitempty"`
	HarmLikelihood string `protobuf:"bytes,3,opt,name=harm_likelihood,json=harmLikelihood,proto3" json:"harm_likelihood,omitempty"`
	HarmSeverity   string `protobuf:"bytes,4,opt,name=harm_severity,json=harmSeverity,proto3" json:"harm_severity,omitempty"`
	OverallRisk    string `protobuf:"bytes,5,opt,name=overall_risk,json=overallRisk,proto3" json:"overall_risk,omitempty"`
}

func (x *Entry_RiskAssessmentItem) Reset() {
	*x = Entry_RiskAssessmentItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entry_RiskAssessmentItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entry_RiskAssessmentItem) ProtoMessage() {}

func (x *Entry_RiskAssessmentItem) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entry_RiskAssessmentItem.ProtoReflect.Descriptor instead.
func (*Entry_RiskAssessmentItem) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_rawDescGZIP(), []int{3, 7}
}

func (x *Entry_RiskAssessmentItem) GetRisk() string {
	if x != nil {
		return x.Risk
	}
	return ""
}

func (x *Entry_RiskAssessmentItem) GetHarmLikelihood() string {
	if x != nil {
		return x.HarmLikelihood
	}
	return ""
}

func (x *Entry_RiskAssessmentItem) GetHarmSeverity() string {
	if x != nil {
		return x.HarmSeverity
	}
	return ""
}

func (x *Entry_RiskAssessmentItem) GetOverallRisk() string {
	if x != nil {
		return x.OverallRisk
	}
	return ""
}

type Entry_RiskMitigationItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Risk              string `protobuf:"bytes,2,opt,name=risk,proto3" json:"risk,omitempty"`
	OverallRisk       string `protobuf:"bytes,3,opt,name=overall_risk,json=overallRisk,proto3" json:"overall_risk,omitempty"`
	MitigationMeasure string `protobuf:"bytes,5,opt,name=mitigation_measure,json=mitigationMeasure,proto3" json:"mitigation_measure,omitempty"`
	ResidualRisk      string `protobuf:"bytes,6,opt,name=residual_risk,json=residualRisk,proto3" json:"residual_risk,omitempty"`
	Approval          string `protobuf:"bytes,7,opt,name=approval,proto3" json:"approval,omitempty"`
}

func (x *Entry_RiskMitigationItem) Reset() {
	*x = Entry_RiskMitigationItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entry_RiskMitigationItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entry_RiskMitigationItem) ProtoMessage() {}

func (x *Entry_RiskMitigationItem) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entry_RiskMitigationItem.ProtoReflect.Descriptor instead.
func (*Entry_RiskMitigationItem) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_rawDescGZIP(), []int{3, 8}
}

func (x *Entry_RiskMitigationItem) GetRisk() string {
	if x != nil {
		return x.Risk
	}
	return ""
}

func (x *Entry_RiskMitigationItem) GetOverallRisk() string {
	if x != nil {
		return x.OverallRisk
	}
	return ""
}

func (x *Entry_RiskMitigationItem) GetMitigationMeasure() string {
	if x != nil {
		return x.MitigationMeasure
	}
	return ""
}

func (x *Entry_RiskMitigationItem) GetResidualRisk() string {
	if x != nil {
		return x.ResidualRisk
	}
	return ""
}

func (x *Entry_RiskMitigationItem) GetApproval() string {
	if x != nil {
		return x.Approval
	}
	return ""
}

type Entry_RecordingItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Particular string `protobuf:"bytes,2,opt,name=particular,proto3" json:"particular,omitempty"`
	Remarks    string `protobuf:"bytes,4,opt,name=remarks,proto3" json:"remarks,omitempty"`
}

func (x *Entry_RecordingItem) Reset() {
	*x = Entry_RecordingItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entry_RecordingItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entry_RecordingItem) ProtoMessage() {}

func (x *Entry_RecordingItem) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entry_RecordingItem.ProtoReflect.Descriptor instead.
func (*Entry_RecordingItem) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_rawDescGZIP(), []int{3, 9}
}

func (x *Entry_RecordingItem) GetParticular() string {
	if x != nil {
		return x.Particular
	}
	return ""
}

func (x *Entry_RecordingItem) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

type Entry_SectionOpen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RenderInline bool `protobuf:"varint,1,opt,name=render_inline,json=renderInline,proto3" json:"render_inline,omitempty"`
}

func (x *Entry_SectionOpen) Reset() {
	*x = Entry_SectionOpen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entry_SectionOpen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entry_SectionOpen) ProtoMessage() {}

func (x *Entry_SectionOpen) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entry_SectionOpen.ProtoReflect.Descriptor instead.
func (*Entry_SectionOpen) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_rawDescGZIP(), []int{3, 10}
}

func (x *Entry_SectionOpen) GetRenderInline() bool {
	if x != nil {
		return x.RenderInline
	}
	return false
}

type Entry_SectionClose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Entry_SectionClose) Reset() {
	*x = Entry_SectionClose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entry_SectionClose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entry_SectionClose) ProtoMessage() {}

func (x *Entry_SectionClose) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entry_SectionClose.ProtoReflect.Descriptor instead.
func (*Entry_SectionClose) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_rawDescGZIP(), []int{3, 11}
}

type Entry_Question_AnswerAndLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Answer string `protobuf:"bytes,1,opt,name=answer,proto3" json:"answer,omitempty"`
	Label  string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *Entry_Question_AnswerAndLabel) Reset() {
	*x = Entry_Question_AnswerAndLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entry_Question_AnswerAndLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entry_Question_AnswerAndLabel) ProtoMessage() {}

func (x *Entry_Question_AnswerAndLabel) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entry_Question_AnswerAndLabel.ProtoReflect.Descriptor instead.
func (*Entry_Question_AnswerAndLabel) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_rawDescGZIP(), []int{3, 5, 0}
}

func (x *Entry_Question_AnswerAndLabel) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *Entry_Question_AnswerAndLabel) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

// Just a wrapper around a list of parties, used in the multi-maps in the ROPA record.
type Party_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parties []*Party `protobuf:"bytes,1,rep,name=parties,proto3" json:"parties,omitempty"`
}

func (x *Party_List) Reset() {
	*x = Party_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Party_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Party_List) ProtoMessage() {}

func (x *Party_List) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Party_List.ProtoReflect.Descriptor instead.
func (*Party_List) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_rawDescGZIP(), []int{5, 0}
}

func (x *Party_List) GetParties() []*Party {
	if x != nil {
		return x.Parties
	}
	return nil
}

// Just a wrapper around a list of categories, used in the multi-maps in the ROPA record.
type Category_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Categories []*Category `protobuf:"bytes,1,rep,name=categories,proto3" json:"categories,omitempty"`
}

func (x *Category_List) Reset() {
	*x = Category_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Category_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Category_List) ProtoMessage() {}

func (x *Category_List) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Category_List.ProtoReflect.Descriptor instead.
func (*Category_List) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_rawDescGZIP(), []int{6, 0}
}

func (x *Category_List) GetCategories() []*Category {
	if x != nil {
		return x.Categories
	}
	return nil
}

// Just a wrapper around a list of data assets, used in the multi-maps in the ROPA record.
type DataAsset_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataAssets []*DataAsset `protobuf:"bytes,1,rep,name=data_assets,json=dataAssets,proto3" json:"data_assets,omitempty"`
}

func (x *DataAsset_List) Reset() {
	*x = DataAsset_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataAsset_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataAsset_List) ProtoMessage() {}

func (x *DataAsset_List) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataAsset_List.ProtoReflect.Descriptor instead.
func (*DataAsset_List) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_rawDescGZIP(), []int{7, 0}
}

func (x *DataAsset_List) GetDataAssets() []*DataAsset {
	if x != nil {
		return x.DataAssets
	}
	return nil
}

type Ropa_Record struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The ID of the STRM organization this record belongs to.
	OrganizationId string                 `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Name           string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	UpdateTime     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	UpdateUser     *v1.User               `protobuf:"bytes,5,opt,name=update_user,json=updateUser,proto3" json:"update_user,omitempty"`
	Version        int32                  `protobuf:"varint,6,opt,name=version,proto3" json:"version,omitempty"`
	// Related parties, grouped by Party.RelationType, e.g. CONTROLLER, PROCESSOR, RECIPIENT.
	Parties map[string]*Party_List `protobuf:"bytes,7,rep,name=parties,proto3" json:"parties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Purpose levels as defined in the organizations Purpose Map.
	PurposeLevels []int32 `protobuf:"varint,8,rep,packed,name=purpose_levels,json=purposeLevels,proto3" json:"purpose_levels,omitempty"`
	// Related categories, grouped by their type, e.g. DATA_SUBJECT, PROCESSING.
	// Some may be derived from the data contract.
	Categories map[string]*Category_List `protobuf:"bytes,9,rep,name=categories,proto3" json:"categories,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Linked data contract(s), if applicable, can change over time.
	DataContractIds []string `protobuf:"bytes,10,rep,name=data_contract_ids,json=dataContractIds,proto3" json:"data_contract_ids,omitempty"`
	// Data assets, grouped by DataAsset.RelationType, e.g. DATA_SOURCE.
	DataAssets map[string]*DataAsset_List `protobuf:"bytes,11,rep,name=data_assets,json=dataAssets,proto3" json:"data_assets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Data transfer details.
	DataTransferDetails string `protobuf:"bytes,12,opt,name=data_transfer_details,json=dataTransferDetails,proto3" json:"data_transfer_details,omitempty"`
	// Data retention policies, references policies in the organization's policy list.
	DataRetentionPolicyIds []string `protobuf:"bytes,13,rep,name=data_retention_policy_ids,json=dataRetentionPolicyIds,proto3" json:"data_retention_policy_ids,omitempty"`
	// Additional information, free format.
	AdditionalInfo string `protobuf:"bytes,14,opt,name=additional_info,json=additionalInfo,proto3" json:"additional_info,omitempty"`
}

func (x *Ropa_Record) Reset() {
	*x = Ropa_Record{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ropa_Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ropa_Record) ProtoMessage() {}

func (x *Ropa_Record) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ropa_Record.ProtoReflect.Descriptor instead.
func (*Ropa_Record) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_rawDescGZIP(), []int{8, 0}
}

func (x *Ropa_Record) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Ropa_Record) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *Ropa_Record) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Ropa_Record) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Ropa_Record) GetUpdateUser() *v1.User {
	if x != nil {
		return x.UpdateUser
	}
	return nil
}

func (x *Ropa_Record) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Ropa_Record) GetParties() map[string]*Party_List {
	if x != nil {
		return x.Parties
	}
	return nil
}

func (x *Ropa_Record) GetPurposeLevels() []int32 {
	if x != nil {
		return x.PurposeLevels
	}
	return nil
}

func (x *Ropa_Record) GetCategories() map[string]*Category_List {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *Ropa_Record) GetDataContractIds() []string {
	if x != nil {
		return x.DataContractIds
	}
	return nil
}

func (x *Ropa_Record) GetDataAssets() map[string]*DataAsset_List {
	if x != nil {
		return x.DataAssets
	}
	return nil
}

func (x *Ropa_Record) GetDataTransferDetails() string {
	if x != nil {
		return x.DataTransferDetails
	}
	return ""
}

func (x *Ropa_Record) GetDataRetentionPolicyIds() []string {
	if x != nil {
		return x.DataRetentionPolicyIds
	}
	return nil
}

func (x *Ropa_Record) GetAdditionalInfo() string {
	if x != nil {
		return x.AdditionalInfo
	}
	return ""
}

var File_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto protoreflect.FileDescriptor

var file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_rawDesc = []byte{
	0x0a, 0x37, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x73, 0x74, 0x72, 0x6d, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x76, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x79, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x12, 0x27, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01,
	0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x07,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22,
	0xba, 0x03, 0x0a, 0x0c, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31,
	0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01,
	0x01, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x5a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x44, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2a, 0x0a,
	0x11, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x61,
	0x6b, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x6e, 0x74, 0x61, 0x6b, 0x65, 0x1a, 0xc0, 0x01, 0x0a, 0x15, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x4f, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x12, 0x5e, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x74, 0x72,
	0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x6f,
	0x72, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x05, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x06, 0x0a, 0x04, 0x70, 0x61, 0x72, 0x74, 0x22, 0x56, 0x0a, 0x15,
	0x46, 0x6f, 0x72, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x22, 0xbb, 0x19, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x72,
	0x06, 0xd0, 0x01, 0x01, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05,
	0x18, 0x64, 0xd0, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xfa, 0x42,
	0x08, 0x72, 0x06, 0x18, 0x88, 0x27, 0xd0, 0x01, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x64, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3b, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x08,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x68,
	0x65, 0x6c, 0x70, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x68, 0x65, 0x6c, 0x70, 0x54, 0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x12, 0x24, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x5f, 0x62, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x42, 0x65, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0b, 0xfa, 0x42, 0x08, 0x72, 0x06, 0xd0, 0x01, 0x01, 0xb0, 0x01, 0x01, 0x52, 0x0e, 0x66,
	0x6f, 0x72, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x42, 0x0a,
	0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74,
	0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x04, 0x74, 0x61, 0x73,
	0x6b, 0x12, 0x5b, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x00,
	0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x4e,
	0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4e,
	0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x48, 0x00, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x4e,
	0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56,
	0x0a, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x07, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x04, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x68, 0x74, 0x6d, 0x6c, 0x12, 0x58, 0x0a, 0x0c,
	0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x5b, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x74, 0x72,
	0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x48,
	0x00, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x1a, 0x99,
	0x04, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x42,
	0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73,
	0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x04, 0x74, 0x61,
	0x73, 0x6b, 0x12, 0x5b, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x74, 0x72, 0x6d,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48,
	0x00, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12,
	0x4e, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x4e, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12,
	0x4e, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x56, 0x0a, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x07,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x04, 0x68, 0x74, 0x6d, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x68, 0x74, 0x6d, 0x6c, 0x42, 0x0b, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x1a, 0x06, 0x0a, 0x04, 0x54, 0x61,
	0x73, 0x6b, 0x1a, 0x58, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x12, 0x48, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x66, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x03, 0x72, 0x65, 0x66, 0x1a, 0x38, 0x0a, 0x08,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x1a, 0xa1, 0x01, 0x0a, 0x08, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52, 0x06, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x47, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a,
	0x6f, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x66, 0x48, 0x00, 0x52, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x42, 0x0a,
	0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x1a, 0xb9, 0x01, 0x0a, 0x08, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6d, 0x0a, 0x12, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x52, 0x10, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x41, 0x6e, 0x64,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x3e, 0x0a, 0x0e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x41, 0x6e, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x1a, 0xe3, 0x02, 0x0a, 0x12, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x02, 0x52, 0x07, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x12,
	0x56, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40,
	0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x4c, 0x0a, 0x1b, 0x61, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0d, 0xfa, 0x42,
	0x0a, 0x92, 0x01, 0x07, 0x22, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x18, 0x61, 0x73, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x05, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x15,
	0x0a, 0x11, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x42, 0x4f,
	0x58, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x52, 0x4f, 0x50, 0x44, 0x4f, 0x57, 0x4e, 0x10,
	0x02, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x10, 0x03, 0x1a, 0x99, 0x01, 0x0a,
	0x12, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x72, 0x69, 0x73, 0x6b, 0x12, 0x27, 0x0a, 0x0f, 0x68, 0x61, 0x72, 0x6d, 0x5f,
	0x6c, 0x69, 0x6b, 0x65, 0x6c, 0x69, 0x68, 0x6f, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x68, 0x61, 0x72, 0x6d, 0x4c, 0x69, 0x6b, 0x65, 0x6c, 0x69, 0x68, 0x6f, 0x6f, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x68, 0x61, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x61, 0x72, 0x6d, 0x53, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c,
	0x5f, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x76, 0x65,
	0x72, 0x61, 0x6c, 0x6c, 0x52, 0x69, 0x73, 0x6b, 0x1a, 0xbb, 0x01, 0x0a, 0x12, 0x52, 0x69, 0x73,
	0x6b, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72,
	0x69, 0x73, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x72,
	0x69, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x76, 0x65, 0x72, 0x61,
	0x6c, 0x6c, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x69, 0x64, 0x75, 0x61,
	0x6c, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x1a, 0x49, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x75, 0x6c, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x1a, 0x32, 0x0a, 0x0b, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x1a, 0x0e, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x42, 0x0b, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x03, 0xf8,
	0x42, 0x01, 0x22, 0xd1, 0x02, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x50, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x22, 0x74, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45,
	0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x1b,
	0x0a, 0x17, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4f, 0x46, 0x46, 0x49, 0x43, 0x45, 0x52, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x04, 0x22, 0xc2, 0x03, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x12, 0x1b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xfa, 0x42,
	0x08, 0x72, 0x06, 0xd0, 0x01, 0x01, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a,
	0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x72, 0x06, 0x98, 0x01, 0x02, 0xd0, 0x01, 0x01, 0x52,
	0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x59, 0x0a, 0x0f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x1a, 0x49, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x07, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73,
	0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x5b,
	0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x19, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09,
	0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x22, 0xa9, 0x03, 0x0a, 0x08,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x72, 0x06, 0xd0, 0x01, 0x01, 0xb0, 0x01,
	0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x52, 0x0a, 0x04, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22,
	0x95, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x44, 0x41, 0x54, 0x41, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x0e,
	0x0a, 0x0a, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x10, 0x04, 0x12, 0x11,
	0x0a, 0x0d, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10,
	0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10,
	0x06, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x45,
	0x41, 0x53, 0x55, 0x52, 0x45, 0x10, 0x07, 0x22, 0x87, 0x04, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x72, 0x06, 0xd0, 0x01, 0x01, 0xb0, 0x01, 0x01, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x72,
	0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0d, 0x68, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x72, 0x6d,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x52, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2c, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x72, 0x06, 0x98, 0x01, 0x02, 0xd0,
	0x01, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3b,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x54, 0x0a, 0x04, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x73, 0x22, 0x3e, 0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10,
	0x01, 0x22, 0xdd, 0x09, 0x0a, 0x04, 0x52, 0x6f, 0x70, 0x61, 0x12, 0x34, 0x0a, 0x0f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x72, 0x06, 0xd0, 0x01, 0x01, 0xb0, 0x01, 0x01,
	0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x47, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x6f, 0x70, 0x61, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x1a, 0xd5, 0x08, 0x0a, 0x06, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0b, 0xfa, 0x42, 0x08, 0x72, 0x06, 0xd0, 0x01, 0x01, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x34, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x72,
	0x06, 0xd0, 0x01, 0x01, 0xb0, 0x01, 0x01, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x6f, 0x70, 0x61, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x73, 0x12, 0x5d, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x6f, 0x70, 0x61, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x64,
	0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x73, 0x12, 0x5e,
	0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x6f, 0x70, 0x61, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x32,
	0x0a, 0x15, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64,
	0x61, 0x74, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x68, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x6e, 0x0a, 0x0f, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x6f, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x42, 0x73, 0x0a, 0x23, 0x69, 0x6f, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x50, 0x01, 0x5a, 0x4a, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2d, 0x67, 0x6f, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x3b, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_rawDescOnce sync.Once
	file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_rawDescData = file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_rawDesc
)

func file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_rawDescGZIP() []byte {
	file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_rawDescOnce.Do(func() {
		file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_rawDescData = protoimpl.X.CompressGZIP(file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_rawDescData)
	})
	return file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_rawDescData
}

var file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_goTypes = []interface{}{
	(Entry_MultipleChoiceItem_Style)(0),        // 0: strmprivacy.api.entities.v1alpha.Entry.MultipleChoiceItem.Style
	(ContactDetails_ContactType)(0),            // 1: strmprivacy.api.entities.v1alpha.ContactDetails.ContactType
	(Party_RelationType)(0),                    // 2: strmprivacy.api.entities.v1alpha.Party.RelationType
	(Category_Type)(0),                         // 3: strmprivacy.api.entities.v1alpha.Category.Type
	(DataAsset_RelationType)(0),                // 4: strmprivacy.api.entities.v1alpha.DataAsset.RelationType
	(*ProjectPlan)(nil),                        // 5: strmprivacy.api.entities.v1alpha.ProjectPlan
	(*FormTemplate)(nil),                       // 6: strmprivacy.api.entities.v1alpha.FormTemplate
	(*FormTemplateReference)(nil),              // 7: strmprivacy.api.entities.v1alpha.FormTemplateReference
	(*Entry)(nil),                              // 8: strmprivacy.api.entities.v1alpha.Entry
	(*ContactDetails)(nil),                     // 9: strmprivacy.api.entities.v1alpha.ContactDetails
	(*Party)(nil),                              // 10: strmprivacy.api.entities.v1alpha.Party
	(*Category)(nil),                           // 11: strmprivacy.api.entities.v1alpha.Category
	(*DataAsset)(nil),                          // 12: strmprivacy.api.entities.v1alpha.DataAsset
	(*Ropa)(nil),                               // 13: strmprivacy.api.entities.v1alpha.Ropa
	(*FormTemplate_EntryOrFormTemplateId)(nil), // 14: strmprivacy.api.entities.v1alpha.FormTemplate.EntryOrFormTemplateId
	(*Entry_AddOneEntry)(nil),                  // 15: strmprivacy.api.entities.v1alpha.Entry.AddOneEntry
	(*Entry_Task)(nil),                         // 16: strmprivacy.api.entities.v1alpha.Entry.Task
	(*Entry_DataContract)(nil),                 // 17: strmprivacy.api.entities.v1alpha.Entry.DataContract
	(*Entry_Document)(nil),                     // 18: strmprivacy.api.entities.v1alpha.Entry.Document
	(*Entry_Pipeline)(nil),                     // 19: strmprivacy.api.entities.v1alpha.Entry.Pipeline
	(*Entry_Question)(nil),                     // 20: strmprivacy.api.entities.v1alpha.Entry.Question
	(*Entry_MultipleChoiceItem)(nil),           // 21: strmprivacy.api.entities.v1alpha.Entry.MultipleChoiceItem
	(*Entry_RiskAssessmentItem)(nil),           // 22: strmprivacy.api.entities.v1alpha.Entry.RiskAssessmentItem
	(*Entry_RiskMitigationItem)(nil),           // 23: strmprivacy.api.entities.v1alpha.Entry.RiskMitigationItem
	(*Entry_RecordingItem)(nil),                // 24: strmprivacy.api.entities.v1alpha.Entry.RecordingItem
	(*Entry_SectionOpen)(nil),                  // 25: strmprivacy.api.entities.v1alpha.Entry.SectionOpen
	(*Entry_SectionClose)(nil),                 // 26: strmprivacy.api.entities.v1alpha.Entry.SectionClose
	(*Entry_Question_AnswerAndLabel)(nil),      // 27: strmprivacy.api.entities.v1alpha.Entry.Question.AnswerAndLabel
	(*Party_List)(nil),                         // 28: strmprivacy.api.entities.v1alpha.Party.List
	(*Category_List)(nil),                      // 29: strmprivacy.api.entities.v1alpha.Category.List
	(*DataAsset_List)(nil),                     // 30: strmprivacy.api.entities.v1alpha.DataAsset.List
	(*Ropa_Record)(nil),                        // 31: strmprivacy.api.entities.v1alpha.Ropa.Record
	nil,                                        // 32: strmprivacy.api.entities.v1alpha.Ropa.Record.PartiesEntry
	nil,                                        // 33: strmprivacy.api.entities.v1alpha.Ropa.Record.CategoriesEntry
	nil,                                        // 34: strmprivacy.api.entities.v1alpha.Ropa.Record.DataAssetsEntry
	(*timestamppb.Timestamp)(nil),              // 35: google.protobuf.Timestamp
	(*v1.User)(nil),                            // 36: strmprivacy.api.entities.v1.User
	(*v1.DataContractRef)(nil),                 // 37: strmprivacy.api.entities.v1.DataContractRef
	(*v1.StreamRef)(nil),                       // 38: strmprivacy.api.entities.v1.StreamRef
	(*v1.BatchJobRef)(nil),                     // 39: strmprivacy.api.entities.v1.BatchJobRef
}
var file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_depIdxs = []int32{
	8,  // 0: strmprivacy.api.entities.v1alpha.ProjectPlan.entries:type_name -> strmprivacy.api.entities.v1alpha.Entry
	14, // 1: strmprivacy.api.entities.v1alpha.FormTemplate.items:type_name -> strmprivacy.api.entities.v1alpha.FormTemplate.EntryOrFormTemplateId
	35, // 2: strmprivacy.api.entities.v1alpha.Entry.creation_time:type_name -> google.protobuf.Timestamp
	35, // 3: strmprivacy.api.entities.v1alpha.Entry.due_time:type_name -> google.protobuf.Timestamp
	35, // 4: strmprivacy.api.entities.v1alpha.Entry.completion_time:type_name -> google.protobuf.Timestamp
	36, // 5: strmprivacy.api.entities.v1alpha.Entry.creator:type_name -> strmprivacy.api.entities.v1.User
	36, // 6: strmprivacy.api.entities.v1alpha.Entry.assignee:type_name -> strmprivacy.api.entities.v1.User
	16, // 7: strmprivacy.api.entities.v1alpha.Entry.task:type_name -> strmprivacy.api.entities.v1alpha.Entry.Task
	17, // 8: strmprivacy.api.entities.v1alpha.Entry.data_contract:type_name -> strmprivacy.api.entities.v1alpha.Entry.DataContract
	18, // 9: strmprivacy.api.entities.v1alpha.Entry.document:type_name -> strmprivacy.api.entities.v1alpha.Entry.Document
	19, // 10: strmprivacy.api.entities.v1alpha.Entry.pipeline:type_name -> strmprivacy.api.entities.v1alpha.Entry.Pipeline
	20, // 11: strmprivacy.api.entities.v1alpha.Entry.question:type_name -> strmprivacy.api.entities.v1alpha.Entry.Question
	21, // 12: strmprivacy.api.entities.v1alpha.Entry.choices:type_name -> strmprivacy.api.entities.v1alpha.Entry.MultipleChoiceItem
	25, // 13: strmprivacy.api.entities.v1alpha.Entry.section_open:type_name -> strmprivacy.api.entities.v1alpha.Entry.SectionOpen
	26, // 14: strmprivacy.api.entities.v1alpha.Entry.section_close:type_name -> strmprivacy.api.entities.v1alpha.Entry.SectionClose
	15, // 15: strmprivacy.api.entities.v1alpha.Entry.add_one_entry:type_name -> strmprivacy.api.entities.v1alpha.Entry.AddOneEntry
	1,  // 16: strmprivacy.api.entities.v1alpha.ContactDetails.type:type_name -> strmprivacy.api.entities.v1alpha.ContactDetails.ContactType
	9,  // 17: strmprivacy.api.entities.v1alpha.Party.contact_details:type_name -> strmprivacy.api.entities.v1alpha.ContactDetails
	35, // 18: strmprivacy.api.entities.v1alpha.Party.update_time:type_name -> google.protobuf.Timestamp
	3,  // 19: strmprivacy.api.entities.v1alpha.Category.type:type_name -> strmprivacy.api.entities.v1alpha.Category.Type
	35, // 20: strmprivacy.api.entities.v1alpha.Category.update_time:type_name -> google.protobuf.Timestamp
	11, // 21: strmprivacy.api.entities.v1alpha.DataAsset.categories:type_name -> strmprivacy.api.entities.v1alpha.Category
	10, // 22: strmprivacy.api.entities.v1alpha.DataAsset.hosting_party:type_name -> strmprivacy.api.entities.v1alpha.Party
	35, // 23: strmprivacy.api.entities.v1alpha.DataAsset.update_time:type_name -> google.protobuf.Timestamp
	31, // 24: strmprivacy.api.entities.v1alpha.Ropa.records:type_name -> strmprivacy.api.entities.v1alpha.Ropa.Record
	7,  // 25: strmprivacy.api.entities.v1alpha.FormTemplate.EntryOrFormTemplateId.form_template:type_name -> strmprivacy.api.entities.v1alpha.FormTemplateReference
	8,  // 26: strmprivacy.api.entities.v1alpha.FormTemplate.EntryOrFormTemplateId.entry:type_name -> strmprivacy.api.entities.v1alpha.Entry
	16, // 27: strmprivacy.api.entities.v1alpha.Entry.AddOneEntry.task:type_name -> strmprivacy.api.entities.v1alpha.Entry.Task
	17, // 28: strmprivacy.api.entities.v1alpha.Entry.AddOneEntry.data_contract:type_name -> strmprivacy.api.entities.v1alpha.Entry.DataContract
	18, // 29: strmprivacy.api.entities.v1alpha.Entry.AddOneEntry.document:type_name -> strmprivacy.api.entities.v1alpha.Entry.Document
	19, // 30: strmprivacy.api.entities.v1alpha.Entry.AddOneEntry.pipeline:type_name -> strmprivacy.api.entities.v1alpha.Entry.Pipeline
	20, // 31: strmprivacy.api.entities.v1alpha.Entry.AddOneEntry.question:type_name -> strmprivacy.api.entities.v1alpha.Entry.Question
	21, // 32: strmprivacy.api.entities.v1alpha.Entry.AddOneEntry.choices:type_name -> strmprivacy.api.entities.v1alpha.Entry.MultipleChoiceItem
	37, // 33: strmprivacy.api.entities.v1alpha.Entry.DataContract.ref:type_name -> strmprivacy.api.entities.v1.DataContractRef
	38, // 34: strmprivacy.api.entities.v1alpha.Entry.Pipeline.stream:type_name -> strmprivacy.api.entities.v1.StreamRef
	39, // 35: strmprivacy.api.entities.v1alpha.Entry.Pipeline.batch_job:type_name -> strmprivacy.api.entities.v1.BatchJobRef
	27, // 36: strmprivacy.api.entities.v1alpha.Entry.Question.answers_and_labels:type_name -> strmprivacy.api.entities.v1alpha.Entry.Question.AnswerAndLabel
	0,  // 37: strmprivacy.api.entities.v1alpha.Entry.MultipleChoiceItem.style:type_name -> strmprivacy.api.entities.v1alpha.Entry.MultipleChoiceItem.Style
	10, // 38: strmprivacy.api.entities.v1alpha.Party.List.parties:type_name -> strmprivacy.api.entities.v1alpha.Party
	11, // 39: strmprivacy.api.entities.v1alpha.Category.List.categories:type_name -> strmprivacy.api.entities.v1alpha.Category
	12, // 40: strmprivacy.api.entities.v1alpha.DataAsset.List.data_assets:type_name -> strmprivacy.api.entities.v1alpha.DataAsset
	35, // 41: strmprivacy.api.entities.v1alpha.Ropa.Record.update_time:type_name -> google.protobuf.Timestamp
	36, // 42: strmprivacy.api.entities.v1alpha.Ropa.Record.update_user:type_name -> strmprivacy.api.entities.v1.User
	32, // 43: strmprivacy.api.entities.v1alpha.Ropa.Record.parties:type_name -> strmprivacy.api.entities.v1alpha.Ropa.Record.PartiesEntry
	33, // 44: strmprivacy.api.entities.v1alpha.Ropa.Record.categories:type_name -> strmprivacy.api.entities.v1alpha.Ropa.Record.CategoriesEntry
	34, // 45: strmprivacy.api.entities.v1alpha.Ropa.Record.data_assets:type_name -> strmprivacy.api.entities.v1alpha.Ropa.Record.DataAssetsEntry
	28, // 46: strmprivacy.api.entities.v1alpha.Ropa.Record.PartiesEntry.value:type_name -> strmprivacy.api.entities.v1alpha.Party.List
	29, // 47: strmprivacy.api.entities.v1alpha.Ropa.Record.CategoriesEntry.value:type_name -> strmprivacy.api.entities.v1alpha.Category.List
	30, // 48: strmprivacy.api.entities.v1alpha.Ropa.Record.DataAssetsEntry.value:type_name -> strmprivacy.api.entities.v1alpha.DataAsset.List
	49, // [49:49] is the sub-list for method output_type
	49, // [49:49] is the sub-list for method input_type
	49, // [49:49] is the sub-list for extension type_name
	49, // [49:49] is the sub-list for extension extendee
	0,  // [0:49] is the sub-list for field type_name
}

func init() { file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_init() }
func file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_init() {
	if File_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormTemplateReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Party); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Category); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ropa); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormTemplate_EntryOrFormTemplateId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entry_AddOneEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entry_Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entry_DataContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entry_Document); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entry_Pipeline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entry_Question); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entry_MultipleChoiceItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entry_RiskAssessmentItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entry_RiskMitigationItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entry_RecordingItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entry_SectionOpen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entry_SectionClose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entry_Question_AnswerAndLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Party_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Category_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataAsset_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ropa_Record); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Entry_Task_)(nil),
		(*Entry_DataContract_)(nil),
		(*Entry_Document_)(nil),
		(*Entry_Pipeline_)(nil),
		(*Entry_Question_)(nil),
		(*Entry_Choices)(nil),
		(*Entry_Html)(nil),
		(*Entry_SectionOpen_)(nil),
		(*Entry_SectionClose_)(nil),
		(*Entry_AddOneEntry_)(nil),
	}
	file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*FormTemplate_EntryOrFormTemplateId_FormTemplate)(nil),
		(*FormTemplate_EntryOrFormTemplateId_Entry)(nil),
	}
	file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*Entry_AddOneEntry_Task)(nil),
		(*Entry_AddOneEntry_DataContract)(nil),
		(*Entry_AddOneEntry_Document)(nil),
		(*Entry_AddOneEntry_Pipeline)(nil),
		(*Entry_AddOneEntry_Question)(nil),
		(*Entry_AddOneEntry_Choices)(nil),
		(*Entry_AddOneEntry_Html)(nil),
	}
	file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*Entry_Pipeline_Stream)(nil),
		(*Entry_Pipeline_BatchJob)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_goTypes,
		DependencyIndexes: file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_depIdxs,
		EnumInfos:         file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_enumTypes,
		MessageInfos:      file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_msgTypes,
	}.Build()
	File_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto = out.File
	file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_rawDesc = nil
	file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_goTypes = nil
	file_strmprivacy_api_entities_v1alpha_entities_v1alpha_proto_depIdxs = nil
}
