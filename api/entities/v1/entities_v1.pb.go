// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: strmprivacy/api/entities/v1/entities_v1.proto

package entities

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	datetime "google.golang.org/genproto/googleapis/type/datetime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//
//Consent level is meant to interpret the consent-levels of an event for decryption purposes only.
//
//Cumulative means that the highest consent-level in an event must be greater than or equal to the single requested level
//for the decrypted stream.
//
//Granular means that the set of consent-levels in an event must enclose the set of requested event levels for the
//decrypted stream.
type ConsentLevelType int32

const (
	ConsentLevelType_CONSENT_LEVEL_TYPE_UNSPECIFIED ConsentLevelType = 0
	ConsentLevelType_CUMULATIVE                     ConsentLevelType = 1
	ConsentLevelType_GRANULAR                       ConsentLevelType = 2
)

// Enum value maps for ConsentLevelType.
var (
	ConsentLevelType_name = map[int32]string{
		0: "CONSENT_LEVEL_TYPE_UNSPECIFIED",
		1: "CUMULATIVE",
		2: "GRANULAR",
	}
	ConsentLevelType_value = map[string]int32{
		"CONSENT_LEVEL_TYPE_UNSPECIFIED": 0,
		"CUMULATIVE":                     1,
		"GRANULAR":                       2,
	}
)

func (x ConsentLevelType) Enum() *ConsentLevelType {
	p := new(ConsentLevelType)
	*p = x
	return p
}

func (x ConsentLevelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConsentLevelType) Descriptor() protoreflect.EnumDescriptor {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes[0].Descriptor()
}

func (ConsentLevelType) Type() protoreflect.EnumType {
	return &file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes[0]
}

func (x ConsentLevelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConsentLevelType.Descriptor instead.
func (ConsentLevelType) EnumDescriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{0}
}

type SinkType int32

const (
	SinkType_SINK_TYPE_UNSPECIFIED SinkType = 0
	SinkType_S3                    SinkType = 1
	SinkType_GCLOUD                SinkType = 2
)

// Enum value maps for SinkType.
var (
	SinkType_name = map[int32]string{
		0: "SINK_TYPE_UNSPECIFIED",
		1: "S3",
		2: "GCLOUD",
	}
	SinkType_value = map[string]int32{
		"SINK_TYPE_UNSPECIFIED": 0,
		"S3":                    1,
		"GCLOUD":                2,
	}
)

func (x SinkType) Enum() *SinkType {
	p := new(SinkType)
	*p = x
	return p
}

func (x SinkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SinkType) Descriptor() protoreflect.EnumDescriptor {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes[1].Descriptor()
}

func (SinkType) Type() protoreflect.EnumType {
	return &file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes[1]
}

func (x SinkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SinkType.Descriptor instead.
func (SinkType) EnumDescriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{1}
}

// (-- TODO align values with JAAS. see https://docs.confluent.io/platform/current/kafka/overview-authentication-methods.html --)
//     also see the Kafka exporter to determine the correct terminology here
//     SASL_SSL should probably be SASL_OAUTHBEARER --)
type AuthMechanism int32

const (
	AuthMechanism_AUTH_MECHANISM_UNSPECIFIED AuthMechanism = 0
	AuthMechanism_SASL_PLAIN                 AuthMechanism = 1
	AuthMechanism_SASL_SSL                   AuthMechanism = 2
)

// Enum value maps for AuthMechanism.
var (
	AuthMechanism_name = map[int32]string{
		0: "AUTH_MECHANISM_UNSPECIFIED",
		1: "SASL_PLAIN",
		2: "SASL_SSL",
	}
	AuthMechanism_value = map[string]int32{
		"AUTH_MECHANISM_UNSPECIFIED": 0,
		"SASL_PLAIN":                 1,
		"SASL_SSL":                   2,
	}
)

func (x AuthMechanism) Enum() *AuthMechanism {
	p := new(AuthMechanism)
	*p = x
	return p
}

func (x AuthMechanism) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthMechanism) Descriptor() protoreflect.EnumDescriptor {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes[2].Descriptor()
}

func (AuthMechanism) Type() protoreflect.EnumType {
	return &file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes[2]
}

func (x AuthMechanism) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthMechanism.Descriptor instead.
func (AuthMechanism) EnumDescriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{2}
}

type State int32

const (
	State_STATE_UNSPECIFIED State = 0
	State_PENDING           State = 1
	State_IN_REVIEW         State = 2
	State_REJECTED          State = 3
	State_ACTIVE            State = 4
	State_DELETED           State = 5
)

// Enum value maps for State.
var (
	State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "PENDING",
		2: "IN_REVIEW",
		3: "REJECTED",
		4: "ACTIVE",
		5: "DELETED",
	}
	State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"PENDING":           1,
		"IN_REVIEW":         2,
		"REJECTED":          3,
		"ACTIVE":            4,
		"DELETED":           5,
	}
)

func (x State) Enum() *State {
	p := new(State)
	*p = x
	return p
}

func (x State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (State) Descriptor() protoreflect.EnumDescriptor {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes[3].Descriptor()
}

func (State) Type() protoreflect.EnumType {
	return &file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes[3]
}

func (x State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use State.Descriptor instead.
func (State) EnumDescriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{3}
}

type SchemaType int32

const (
	SchemaType_SCHEMA_TYPE_UNSPECIFIED SchemaType = 0
	SchemaType_AVRO                    SchemaType = 1
	SchemaType_JSONSCHEMA              SchemaType = 2
)

// Enum value maps for SchemaType.
var (
	SchemaType_name = map[int32]string{
		0: "SCHEMA_TYPE_UNSPECIFIED",
		1: "AVRO",
		2: "JSONSCHEMA",
	}
	SchemaType_value = map[string]int32{
		"SCHEMA_TYPE_UNSPECIFIED": 0,
		"AVRO":                    1,
		"JSONSCHEMA":              2,
	}
)

func (x SchemaType) Enum() *SchemaType {
	p := new(SchemaType)
	*p = x
	return p
}

func (x SchemaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SchemaType) Descriptor() protoreflect.EnumDescriptor {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes[4].Descriptor()
}

func (SchemaType) Type() protoreflect.EnumType {
	return &file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes[4]
}

func (x SchemaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SchemaType.Descriptor instead.
func (SchemaType) EnumDescriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{4}
}

type SimpleSchemaNodeType int32

const (
	SimpleSchemaNodeType_SIMPLE_SCHEMA_NODE_TYPE_UNSPECIFIED SimpleSchemaNodeType = 0
	SimpleSchemaNodeType_STRING                              SimpleSchemaNodeType = 1
	SimpleSchemaNodeType_BOOLEAN                             SimpleSchemaNodeType = 2
	SimpleSchemaNodeType_FLOAT                               SimpleSchemaNodeType = 3
	SimpleSchemaNodeType_INTEGER                             SimpleSchemaNodeType = 4
	SimpleSchemaNodeType_LONG                                SimpleSchemaNodeType = 5
	SimpleSchemaNodeType_NODE                                SimpleSchemaNodeType = 10
)

// Enum value maps for SimpleSchemaNodeType.
var (
	SimpleSchemaNodeType_name = map[int32]string{
		0:  "SIMPLE_SCHEMA_NODE_TYPE_UNSPECIFIED",
		1:  "STRING",
		2:  "BOOLEAN",
		3:  "FLOAT",
		4:  "INTEGER",
		5:  "LONG",
		10: "NODE",
	}
	SimpleSchemaNodeType_value = map[string]int32{
		"SIMPLE_SCHEMA_NODE_TYPE_UNSPECIFIED": 0,
		"STRING":                              1,
		"BOOLEAN":                             2,
		"FLOAT":                               3,
		"INTEGER":                             4,
		"LONG":                                5,
		"NODE":                                10,
	}
)

func (x SimpleSchemaNodeType) Enum() *SimpleSchemaNodeType {
	p := new(SimpleSchemaNodeType)
	*p = x
	return p
}

func (x SimpleSchemaNodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SimpleSchemaNodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes[5].Descriptor()
}

func (SimpleSchemaNodeType) Type() protoreflect.EnumType {
	return &file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes[5]
}

func (x SimpleSchemaNodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SimpleSchemaNodeType.Descriptor instead.
func (SimpleSchemaNodeType) EnumDescriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{5}
}

type FilterPublicPrivate int32

const (
	FilterPublicPrivate_FILTER_PUBLIC_PRIVATE_UNSPECIFIED FilterPublicPrivate = 0
	FilterPublicPrivate_ONLY_PUBLIC                       FilterPublicPrivate = 1
	FilterPublicPrivate_ONLY_PRIVATE                      FilterPublicPrivate = 2
)

// Enum value maps for FilterPublicPrivate.
var (
	FilterPublicPrivate_name = map[int32]string{
		0: "FILTER_PUBLIC_PRIVATE_UNSPECIFIED",
		1: "ONLY_PUBLIC",
		2: "ONLY_PRIVATE",
	}
	FilterPublicPrivate_value = map[string]int32{
		"FILTER_PUBLIC_PRIVATE_UNSPECIFIED": 0,
		"ONLY_PUBLIC":                       1,
		"ONLY_PRIVATE":                      2,
	}
)

func (x FilterPublicPrivate) Enum() *FilterPublicPrivate {
	p := new(FilterPublicPrivate)
	*p = x
	return p
}

func (x FilterPublicPrivate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterPublicPrivate) Descriptor() protoreflect.EnumDescriptor {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes[6].Descriptor()
}

func (FilterPublicPrivate) Type() protoreflect.EnumType {
	return &file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes[6]
}

func (x FilterPublicPrivate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterPublicPrivate.Descriptor instead.
func (FilterPublicPrivate) EnumDescriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{6}
}

//
//Streams are source or derived streams depending on whether or not linked_stream is null.
//Key streams are a separate entity in the api.
type Stream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ref *StreamRef `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	// customer's description for this Stream.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// consent levels for derived streams
	ConsentLevels []int32 `protobuf:"varint,3,rep,packed,name=consent_levels,json=consentLevels,proto3" json:"consent_levels,omitempty"`
	// how event consent-levels are interpreted by decrypters.
	ConsentLevelType ConsentLevelType `protobuf:"varint,4,opt,name=consent_level_type,json=consentLevelType,proto3,enum=strmprivacy.api.entities.v1.ConsentLevelType" json:"consent_level_type,omitempty"`
	// whether or not this stream is enabled.
	Enabled bool `protobuf:"varint,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// stream limits
	Limits *Limits `protobuf:"bytes,6,opt,name=limits,proto3" json:"limits,omitempty"`
	// null for source streams
	LinkedStream string `protobuf:"bytes,7,opt,name=linked_stream,json=linkedStream,proto3" json:"linked_stream,omitempty"`
	// customer purposes.
	Tags        []string       `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	Credentials []*Credentials `protobuf:"bytes,9,rep,name=credentials,proto3" json:"credentials,omitempty"`
	// field masking is defined per OUTPUT stream and event-contract ref. combination
	//
	//The default empty map means no masking. Otherwise, the algorithm in the decrypter is as follows.
	//
	// A source stream is (partially) decrypted, and events that don't have enough permissions are dropped.
	// the event contract ref string is used to find a MaskedFields instance.
	// if present, for all field patterns in the MaskedFields instance, the hash with the specified seed is applied.
	MaskedFields *MaskedFields `protobuf:"bytes,10,opt,name=masked_fields,json=maskedFields,proto3" json:"masked_fields,omitempty"`
}

func (x *Stream) Reset() {
	*x = Stream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stream) ProtoMessage() {}

func (x *Stream) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stream.ProtoReflect.Descriptor instead.
func (*Stream) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{0}
}

func (x *Stream) GetRef() *StreamRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *Stream) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Stream) GetConsentLevels() []int32 {
	if x != nil {
		return x.ConsentLevels
	}
	return nil
}

func (x *Stream) GetConsentLevelType() ConsentLevelType {
	if x != nil {
		return x.ConsentLevelType
	}
	return ConsentLevelType_CONSENT_LEVEL_TYPE_UNSPECIFIED
}

func (x *Stream) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Stream) GetLimits() *Limits {
	if x != nil {
		return x.Limits
	}
	return nil
}

func (x *Stream) GetLinkedStream() string {
	if x != nil {
		return x.LinkedStream
	}
	return ""
}

func (x *Stream) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Stream) GetCredentials() []*Credentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *Stream) GetMaskedFields() *MaskedFields {
	if x != nil {
		return x.MaskedFields
	}
	return nil
}

type MaskedFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// default Murmurhash3 for empty string
	HashType string `protobuf:"bytes,1,opt,name=hash_type,json=hashType,proto3" json:"hash_type,omitempty"`
	// hashing seed
	Seed string `protobuf:"bytes,2,opt,name=seed,proto3" json:"seed,omitempty"`
	// map of event-contract-ref vs field patterns
	FieldPatterns map[string]*MaskedFields_PatternList `protobuf:"bytes,3,rep,name=field_patterns,json=fieldPatterns,proto3" json:"field_patterns,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MaskedFields) Reset() {
	*x = MaskedFields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaskedFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaskedFields) ProtoMessage() {}

func (x *MaskedFields) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaskedFields.ProtoReflect.Descriptor instead.
func (*MaskedFields) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{1}
}

func (x *MaskedFields) GetHashType() string {
	if x != nil {
		return x.HashType
	}
	return ""
}

func (x *MaskedFields) GetSeed() string {
	if x != nil {
		return x.Seed
	}
	return ""
}

func (x *MaskedFields) GetFieldPatterns() map[string]*MaskedFields_PatternList {
	if x != nil {
		return x.FieldPatterns
	}
	return nil
}

type Limits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// filled in from customer profile
	EventRate int64 `protobuf:"varint,1,opt,name=event_rate,json=eventRate,proto3" json:"event_rate,omitempty"`
	// filled in from customer profile
	EventCount int64 `protobuf:"varint,2,opt,name=event_count,json=eventCount,proto3" json:"event_count,omitempty"`
}

func (x *Limits) Reset() {
	*x = Limits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Limits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Limits) ProtoMessage() {}

func (x *Limits) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Limits.ProtoReflect.Descriptor instead.
func (*Limits) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{2}
}

func (x *Limits) GetEventRate() int64 {
	if x != nil {
		return x.EventRate
	}
	return 0
}

func (x *Limits) GetEventCount() int64 {
	if x != nil {
		return x.EventCount
	}
	return 0
}

//
//A Stream of key-link, encryption-key messages created from a source stream
//with the same `name`.
type KeyStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ref *KeyStreamRef `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	// -- TODO: this field is not used --
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *KeyStream) Reset() {
	*x = KeyStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyStream) ProtoMessage() {}

func (x *KeyStream) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyStream.ProtoReflect.Descriptor instead.
func (*KeyStream) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{3}
}

func (x *KeyStream) GetRef() *KeyStreamRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *KeyStream) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// refers to a event stream.
type StreamRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BillingId string `protobuf:"bytes,1,opt,name=billing_id,json=billingId,proto3" json:"billing_id,omitempty"`
	// the name of the stream
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *StreamRef) Reset() {
	*x = StreamRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamRef) ProtoMessage() {}

func (x *StreamRef) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamRef.ProtoReflect.Descriptor instead.
func (*StreamRef) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{4}
}

func (x *StreamRef) GetBillingId() string {
	if x != nil {
		return x.BillingId
	}
	return ""
}

func (x *StreamRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// refers to a key stream.
type KeyStreamRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BillingId string `protobuf:"bytes,1,opt,name=billing_id,json=billingId,proto3" json:"billing_id,omitempty"`
	// the name of the stream
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *KeyStreamRef) Reset() {
	*x = KeyStreamRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyStreamRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyStreamRef) ProtoMessage() {}

func (x *KeyStreamRef) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyStreamRef.ProtoReflect.Descriptor instead.
func (*KeyStreamRef) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{5}
}

func (x *KeyStreamRef) GetBillingId() string {
	if x != nil {
		return x.BillingId
	}
	return ""
}

func (x *KeyStreamRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

//
//Credentials to produce to the event-gateway, or to consume from egress.
type Credentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BillingId string `protobuf:"bytes,1,opt,name=billing_id,json=billingId,proto3" json:"billing_id,omitempty"`
	ClientId  string `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// as this property is secret, it is not always returned
	ClientSecret string `protobuf:"bytes,3,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
}

func (x *Credentials) Reset() {
	*x = Credentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Credentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credentials) ProtoMessage() {}

func (x *Credentials) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credentials.ProtoReflect.Descriptor instead.
func (*Credentials) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{6}
}

func (x *Credentials) GetBillingId() string {
	if x != nil {
		return x.BillingId
	}
	return ""
}

func (x *Credentials) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *Credentials) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

// the sink config used by the batch exporters.
type Sink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ref      *SinkRef `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	SinkType SinkType `protobuf:"varint,2,opt,name=sink_type,json=sinkType,proto3,enum=strmprivacy.api.entities.v1.SinkType" json:"sink_type,omitempty"`
	// Types that are assignable to Config:
	//	*Sink_Bucket
	Config isSink_Config `protobuf_oneof:"config"`
}

func (x *Sink) Reset() {
	*x = Sink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sink) ProtoMessage() {}

func (x *Sink) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sink.ProtoReflect.Descriptor instead.
func (*Sink) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{7}
}

func (x *Sink) GetRef() *SinkRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *Sink) GetSinkType() SinkType {
	if x != nil {
		return x.SinkType
	}
	return SinkType_SINK_TYPE_UNSPECIFIED
}

func (m *Sink) GetConfig() isSink_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *Sink) GetBucket() *BucketConfig {
	if x, ok := x.GetConfig().(*Sink_Bucket); ok {
		return x.Bucket
	}
	return nil
}

type isSink_Config interface {
	isSink_Config()
}

type Sink_Bucket struct {
	Bucket *BucketConfig `protobuf:"bytes,4,opt,name=bucket,proto3,oneof"`
}

func (*Sink_Bucket) isSink_Config() {}

type SinkRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BillingId string `protobuf:"bytes,1,opt,name=billing_id,json=billingId,proto3" json:"billing_id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SinkRef) Reset() {
	*x = SinkRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SinkRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SinkRef) ProtoMessage() {}

func (x *SinkRef) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SinkRef.ProtoReflect.Descriptor instead.
func (*SinkRef) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{8}
}

func (x *SinkRef) GetBillingId() string {
	if x != nil {
		return x.BillingId
	}
	return ""
}

func (x *SinkRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type BucketConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (-- api-linter: core::0122::name-suffix=disabled
	//     aip.dev/not-precedent: We refer to a bucket name. --)
	BucketName string `protobuf:"bytes,4,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	// The credentials that are to be used to access the sink target (e.g. S3 or Google Cloud Storage)
	Credentials string `protobuf:"bytes,5,opt,name=credentials,proto3" json:"credentials,omitempty"`
	// The ARN of the role to assume.
	//If present, start an AssumeRole flow to get temporary credentials in another AWS account.
	//This is used when the customer has a separate users account.
	//Default there is no assumed role.
	AssumeRoleArn string `protobuf:"bytes,6,opt,name=assume_role_arn,json=assumeRoleArn,proto3" json:"assume_role_arn,omitempty"`
}

func (x *BucketConfig) Reset() {
	*x = BucketConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketConfig) ProtoMessage() {}

func (x *BucketConfig) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketConfig.ProtoReflect.Descriptor instead.
func (*BucketConfig) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{9}
}

func (x *BucketConfig) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *BucketConfig) GetCredentials() string {
	if x != nil {
		return x.Credentials
	}
	return ""
}

func (x *BucketConfig) GetAssumeRoleArn() string {
	if x != nil {
		return x.AssumeRoleArn
	}
	return ""
}

//
//A batch exporter.
type BatchExporter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ref *BatchExporterRef `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	// Types that are assignable to StreamOrKeyStreamRef:
	//	*BatchExporter_StreamRef
	//	*BatchExporter_KeyStreamRef
	StreamOrKeyStreamRef isBatchExporter_StreamOrKeyStreamRef `protobuf_oneof:"stream_or_key_stream_ref"`
	// granularity of seconds, nanos is unused
	Interval *durationpb.Duration `protobuf:"bytes,4,opt,name=interval,proto3" json:"interval,omitempty"`
	// (-- api-linter: core::0122::name-suffix=disabled
	//     aip.dev/not-precedent: We refer to the sink by name. --)
	SinkName              string `protobuf:"bytes,5,opt,name=sink_name,json=sinkName,proto3" json:"sink_name,omitempty"`
	PathPrefix            string `protobuf:"bytes,6,opt,name=path_prefix,json=pathPrefix,proto3" json:"path_prefix,omitempty"`
	IncludeExistingEvents bool   `protobuf:"varint,7,opt,name=include_existing_events,json=includeExistingEvents,proto3" json:"include_existing_events,omitempty"`
}

func (x *BatchExporter) Reset() {
	*x = BatchExporter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchExporter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchExporter) ProtoMessage() {}

func (x *BatchExporter) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchExporter.ProtoReflect.Descriptor instead.
func (*BatchExporter) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{10}
}

func (x *BatchExporter) GetRef() *BatchExporterRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (m *BatchExporter) GetStreamOrKeyStreamRef() isBatchExporter_StreamOrKeyStreamRef {
	if m != nil {
		return m.StreamOrKeyStreamRef
	}
	return nil
}

func (x *BatchExporter) GetStreamRef() *StreamRef {
	if x, ok := x.GetStreamOrKeyStreamRef().(*BatchExporter_StreamRef); ok {
		return x.StreamRef
	}
	return nil
}

func (x *BatchExporter) GetKeyStreamRef() *KeyStreamRef {
	if x, ok := x.GetStreamOrKeyStreamRef().(*BatchExporter_KeyStreamRef); ok {
		return x.KeyStreamRef
	}
	return nil
}

func (x *BatchExporter) GetInterval() *durationpb.Duration {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *BatchExporter) GetSinkName() string {
	if x != nil {
		return x.SinkName
	}
	return ""
}

func (x *BatchExporter) GetPathPrefix() string {
	if x != nil {
		return x.PathPrefix
	}
	return ""
}

func (x *BatchExporter) GetIncludeExistingEvents() bool {
	if x != nil {
		return x.IncludeExistingEvents
	}
	return false
}

type isBatchExporter_StreamOrKeyStreamRef interface {
	isBatchExporter_StreamOrKeyStreamRef()
}

type BatchExporter_StreamRef struct {
	StreamRef *StreamRef `protobuf:"bytes,2,opt,name=stream_ref,json=streamRef,proto3,oneof"`
}

type BatchExporter_KeyStreamRef struct {
	KeyStreamRef *KeyStreamRef `protobuf:"bytes,3,opt,name=key_stream_ref,json=keyStreamRef,proto3,oneof"`
}

func (*BatchExporter_StreamRef) isBatchExporter_StreamOrKeyStreamRef() {}

func (*BatchExporter_KeyStreamRef) isBatchExporter_StreamOrKeyStreamRef() {}

type BatchExporterRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BillingId string `protobuf:"bytes,1,opt,name=billing_id,json=billingId,proto3" json:"billing_id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *BatchExporterRef) Reset() {
	*x = BatchExporterRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchExporterRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchExporterRef) ProtoMessage() {}

func (x *BatchExporterRef) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchExporterRef.ProtoReflect.Descriptor instead.
func (*BatchExporterRef) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{11}
}

func (x *BatchExporterRef) GetBillingId() string {
	if x != nil {
		return x.BillingId
	}
	return ""
}

func (x *BatchExporterRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

//
//Currently only our internal shared export cluster.
type KafkaCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ref              *KafkaClusterRef `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	BootstrapServers string           `protobuf:"bytes,2,opt,name=bootstrap_servers,json=bootstrapServers,proto3" json:"bootstrap_servers,omitempty"`
	AuthMechanism    AuthMechanism    `protobuf:"varint,3,opt,name=auth_mechanism,json=authMechanism,proto3,enum=strmprivacy.api.entities.v1.AuthMechanism" json:"auth_mechanism,omitempty"`
	TokenUri         string           `protobuf:"bytes,4,opt,name=token_uri,json=tokenUri,proto3" json:"token_uri,omitempty"`
}

func (x *KafkaCluster) Reset() {
	*x = KafkaCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaCluster) ProtoMessage() {}

func (x *KafkaCluster) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaCluster.ProtoReflect.Descriptor instead.
func (*KafkaCluster) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{12}
}

func (x *KafkaCluster) GetRef() *KafkaClusterRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *KafkaCluster) GetBootstrapServers() string {
	if x != nil {
		return x.BootstrapServers
	}
	return ""
}

func (x *KafkaCluster) GetAuthMechanism() AuthMechanism {
	if x != nil {
		return x.AuthMechanism
	}
	return AuthMechanism_AUTH_MECHANISM_UNSPECIFIED
}

func (x *KafkaCluster) GetTokenUri() string {
	if x != nil {
		return x.TokenUri
	}
	return ""
}

//
//How to refer to a certain Kafka cluster.
type KafkaClusterRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (-- streammachine for the default export cluster --)
	BillingId string `protobuf:"bytes,1,opt,name=billing_id,json=billingId,proto3" json:"billing_id,omitempty"`
	// (-- shared export --)
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *KafkaClusterRef) Reset() {
	*x = KafkaClusterRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaClusterRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaClusterRef) ProtoMessage() {}

func (x *KafkaClusterRef) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaClusterRef.ProtoReflect.Descriptor instead.
func (*KafkaClusterRef) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{13}
}

func (x *KafkaClusterRef) GetBillingId() string {
	if x != nil {
		return x.BillingId
	}
	return ""
}

func (x *KafkaClusterRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type KafkaExporter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ref       *KafkaExporterRef    `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	StreamRef *StreamRef           `protobuf:"bytes,2,opt,name=stream_ref,json=streamRef,proto3" json:"stream_ref,omitempty"`
	Target    *KafkaExporterTarget `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	Users     []*KafkaUser         `protobuf:"bytes,4,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *KafkaExporter) Reset() {
	*x = KafkaExporter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaExporter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaExporter) ProtoMessage() {}

func (x *KafkaExporter) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaExporter.ProtoReflect.Descriptor instead.
func (*KafkaExporter) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{14}
}

func (x *KafkaExporter) GetRef() *KafkaExporterRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *KafkaExporter) GetStreamRef() *StreamRef {
	if x != nil {
		return x.StreamRef
	}
	return nil
}

func (x *KafkaExporter) GetTarget() *KafkaExporterTarget {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *KafkaExporter) GetUsers() []*KafkaUser {
	if x != nil {
		return x.Users
	}
	return nil
}

type KafkaExporterRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BillingId string `protobuf:"bytes,1,opt,name=billing_id,json=billingId,proto3" json:"billing_id,omitempty"`
	// default value  <cluster-name>-<stream-name>
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *KafkaExporterRef) Reset() {
	*x = KafkaExporterRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaExporterRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaExporterRef) ProtoMessage() {}

func (x *KafkaExporterRef) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaExporterRef.ProtoReflect.Descriptor instead.
func (*KafkaExporterRef) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{15}
}

func (x *KafkaExporterRef) GetBillingId() string {
	if x != nil {
		return x.BillingId
	}
	return ""
}

func (x *KafkaExporterRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type KafkaExporterTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// what cluster to produce to
	ClusterRef *KafkaClusterRef `protobuf:"bytes,1,opt,name=cluster_ref,json=clusterRef,proto3" json:"cluster_ref,omitempty"`
	// the topic this exporter produces to
	Topic string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	// used to access the target Kafka Cluster in case of OAuth based authentication
	ClientId string `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// used to access the target Kafka Cluster in case of OAuth based authentication
	ClientSecret string `protobuf:"bytes,4,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
}

func (x *KafkaExporterTarget) Reset() {
	*x = KafkaExporterTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaExporterTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaExporterTarget) ProtoMessage() {}

func (x *KafkaExporterTarget) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaExporterTarget.ProtoReflect.Descriptor instead.
func (*KafkaExporterTarget) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{16}
}

func (x *KafkaExporterTarget) GetClusterRef() *KafkaClusterRef {
	if x != nil {
		return x.ClusterRef
	}
	return nil
}

func (x *KafkaExporterTarget) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *KafkaExporterTarget) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *KafkaExporterTarget) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

//
//User credentials to consume from topic produced by Kafka Exporter.
//
//The kafka exporter is linked to a certain cluster, so this entity is bound to a certain
//kafka cluster.
type KafkaUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ref *KafkaUserRef `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	// (-- api-linter: core::0122::name-suffix=disabled
	//     aip.dev/not-precedent: We refer to the kafka exporter by name. --)
	KafkaExporterName string           `protobuf:"bytes,3,opt,name=kafka_exporter_name,json=kafkaExporterName,proto3" json:"kafka_exporter_name,omitempty"`
	Topic             string           `protobuf:"bytes,4,opt,name=topic,proto3" json:"topic,omitempty"`
	ClientId          string           `protobuf:"bytes,5,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret      string           `protobuf:"bytes,6,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	ClusterRef        *KafkaClusterRef `protobuf:"bytes,7,opt,name=cluster_ref,json=clusterRef,proto3" json:"cluster_ref,omitempty"`
}

func (x *KafkaUser) Reset() {
	*x = KafkaUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaUser) ProtoMessage() {}

func (x *KafkaUser) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaUser.ProtoReflect.Descriptor instead.
func (*KafkaUser) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{17}
}

func (x *KafkaUser) GetRef() *KafkaUserRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *KafkaUser) GetKafkaExporterName() string {
	if x != nil {
		return x.KafkaExporterName
	}
	return ""
}

func (x *KafkaUser) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *KafkaUser) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *KafkaUser) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *KafkaUser) GetClusterRef() *KafkaClusterRef {
	if x != nil {
		return x.ClusterRef
	}
	return nil
}

type KafkaUserRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BillingId string `protobuf:"bytes,1,opt,name=billing_id,json=billingId,proto3" json:"billing_id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *KafkaUserRef) Reset() {
	*x = KafkaUserRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaUserRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaUserRef) ProtoMessage() {}

func (x *KafkaUserRef) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaUserRef.ProtoReflect.Descriptor instead.
func (*KafkaUserRef) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{18}
}

func (x *KafkaUserRef) GetBillingId() string {
	if x != nil {
		return x.BillingId
	}
	return ""
}

func (x *KafkaUserRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

//
//for descriptive purposes only.
type ConsentLevelMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ref *ConsentLevelMappingRef `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	// some text like 'analytics'
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ConsentLevelMapping) Reset() {
	*x = ConsentLevelMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsentLevelMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsentLevelMapping) ProtoMessage() {}

func (x *ConsentLevelMapping) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsentLevelMapping.ProtoReflect.Descriptor instead.
func (*ConsentLevelMapping) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{19}
}

func (x *ConsentLevelMapping) GetRef() *ConsentLevelMappingRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *ConsentLevelMapping) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ConsentLevelMappingRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BillingId string `protobuf:"bytes,1,opt,name=billing_id,json=billingId,proto3" json:"billing_id,omitempty"`
	// the typically small integer value that we use in the events.
	Level int32 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *ConsentLevelMappingRef) Reset() {
	*x = ConsentLevelMappingRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsentLevelMappingRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsentLevelMappingRef) ProtoMessage() {}

func (x *ConsentLevelMappingRef) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsentLevelMappingRef.ProtoReflect.Descriptor instead.
func (*ConsentLevelMappingRef) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{20}
}

func (x *ConsentLevelMappingRef) GetBillingId() string {
	if x != nil {
		return x.BillingId
	}
	return ""
}

func (x *ConsentLevelMappingRef) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type WindowedEventCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime  *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	EventCount int64                  `protobuf:"varint,3,opt,name=event_count,json=eventCount,proto3" json:"event_count,omitempty"`
}

func (x *WindowedEventCount) Reset() {
	*x = WindowedEventCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowedEventCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowedEventCount) ProtoMessage() {}

func (x *WindowedEventCount) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowedEventCount.ProtoReflect.Descriptor instead.
func (*WindowedEventCount) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{21}
}

func (x *WindowedEventCount) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *WindowedEventCount) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *WindowedEventCount) GetEventCount() int64 {
	if x != nil {
		return x.EventCount
	}
	return 0
}

type SchemaRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Handle     string     `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle,omitempty"`
	Name       string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version    string     `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	SchemaType SchemaType `protobuf:"varint,4,opt,name=schema_type,json=schemaType,proto3,enum=strmprivacy.api.entities.v1.SchemaType" json:"schema_type,omitempty"`
}

func (x *SchemaRef) Reset() {
	*x = SchemaRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaRef) ProtoMessage() {}

func (x *SchemaRef) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaRef.ProtoReflect.Descriptor instead.
func (*SchemaRef) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{22}
}

func (x *SchemaRef) GetHandle() string {
	if x != nil {
		return x.Handle
	}
	return ""
}

func (x *SchemaRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SchemaRef) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SchemaRef) GetSchemaType() SchemaType {
	if x != nil {
		return x.SchemaType
	}
	return SchemaType_SCHEMA_TYPE_UNSPECIFIED
}

type Schema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ref   *SchemaRef `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	State State      `protobuf:"varint,2,opt,name=state,proto3,enum=strmprivacy.api.entities.v1.State" json:"state,omitempty"`
	// (-- 'is' is intentional here (see https://google.aip.dev/140#booleans) --)
	IsPublic     bool                           `protobuf:"varint,3,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	Definition   string                         `protobuf:"bytes,4,opt,name=definition,proto3" json:"definition,omitempty"`
	Fingerprint  string                         `protobuf:"bytes,5,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	Metadata     *SchemaMetadata                `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
	SimpleSchema *Schema_SimpleSchemaDefinition `protobuf:"bytes,7,opt,name=simple_schema,json=simpleSchema,proto3" json:"simple_schema,omitempty"`
}

func (x *Schema) Reset() {
	*x = Schema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema) ProtoMessage() {}

func (x *Schema) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema.ProtoReflect.Descriptor instead.
func (*Schema) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{23}
}

func (x *Schema) GetRef() *SchemaRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *Schema) GetState() State {
	if x != nil {
		return x.State
	}
	return State_STATE_UNSPECIFIED
}

func (x *Schema) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *Schema) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *Schema) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *Schema) GetMetadata() *SchemaMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Schema) GetSimpleSchema() *Schema_SimpleSchemaDefinition {
	if x != nil {
		return x.SimpleSchema
	}
	return nil
}

type SimpleSchemaNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type SimpleSchemaNodeType `protobuf:"varint,1,opt,name=type,proto3,enum=strmprivacy.api.entities.v1.SimpleSchemaNodeType" json:"type,omitempty"`
	Name string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// avro compatible name set by creator OR derived from name
	AvroName string              `protobuf:"bytes,7,opt,name=avro_name,json=avroName,proto3" json:"avro_name,omitempty"`
	Repeated bool                `protobuf:"varint,3,opt,name=repeated,proto3" json:"repeated,omitempty"`
	Required bool                `protobuf:"varint,4,opt,name=required,proto3" json:"required,omitempty"`
	Nodes    []*SimpleSchemaNode `protobuf:"bytes,5,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Doc      string              `protobuf:"bytes,6,opt,name=doc,proto3" json:"doc,omitempty"`
}

func (x *SimpleSchemaNode) Reset() {
	*x = SimpleSchemaNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleSchemaNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleSchemaNode) ProtoMessage() {}

func (x *SimpleSchemaNode) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleSchemaNode.ProtoReflect.Descriptor instead.
func (*SimpleSchemaNode) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{24}
}

func (x *SimpleSchemaNode) GetType() SimpleSchemaNodeType {
	if x != nil {
		return x.Type
	}
	return SimpleSchemaNodeType_SIMPLE_SCHEMA_NODE_TYPE_UNSPECIFIED
}

func (x *SimpleSchemaNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SimpleSchemaNode) GetAvroName() string {
	if x != nil {
		return x.AvroName
	}
	return ""
}

func (x *SimpleSchemaNode) GetRepeated() bool {
	if x != nil {
		return x.Repeated
	}
	return false
}

func (x *SimpleSchemaNode) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *SimpleSchemaNode) GetNodes() []*SimpleSchemaNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *SimpleSchemaNode) GetDoc() string {
	if x != nil {
		return x.Doc
	}
	return ""
}

type SchemaMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The human readable title of this Schema. Used in the Portal. Defaults to the Schema name. This field can be modified.
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// The (optional) description of this Schema. Used in the Portal. Markdown syntax is supported. This field can be modified.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// The timestamp when this Schema was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The (optional) URI to the icon used with this Schema. This always an absolute URI, with the https scheme. Used in the Portal.
	IconUri string `protobuf:"bytes,4,opt,name=icon_uri,json=iconUri,proto3" json:"icon_uri,omitempty"`
	// Generic (key/value) labels for this Schema.
	Labels     []*Label `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty"`
	Domains    []string `protobuf:"bytes,6,rep,name=domains,proto3" json:"domains,omitempty"`
	Industries []string `protobuf:"bytes,7,rep,name=industries,proto3" json:"industries,omitempty"`
}

func (x *SchemaMetadata) Reset() {
	*x = SchemaMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaMetadata) ProtoMessage() {}

func (x *SchemaMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaMetadata.ProtoReflect.Descriptor instead.
func (*SchemaMetadata) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{25}
}

func (x *SchemaMetadata) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SchemaMetadata) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SchemaMetadata) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *SchemaMetadata) GetIconUri() string {
	if x != nil {
		return x.IconUri
	}
	return ""
}

func (x *SchemaMetadata) GetLabels() []*Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *SchemaMetadata) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *SchemaMetadata) GetIndustries() []string {
	if x != nil {
		return x.Industries
	}
	return nil
}

type EventContractRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Handle  string `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *EventContractRef) Reset() {
	*x = EventContractRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventContractRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventContractRef) ProtoMessage() {}

func (x *EventContractRef) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventContractRef.ProtoReflect.Descriptor instead.
func (*EventContractRef) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{26}
}

func (x *EventContractRef) GetHandle() string {
	if x != nil {
		return x.Handle
	}
	return ""
}

func (x *EventContractRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EventContractRef) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type EventContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ref       *EventContractRef `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	State     State             `protobuf:"varint,2,opt,name=state,proto3,enum=strmprivacy.api.entities.v1.State" json:"state,omitempty"`
	SchemaRef *SchemaRef        `protobuf:"bytes,3,opt,name=schema_ref,json=schemaRef,proto3" json:"schema_ref,omitempty"`
	// (-- 'is' is intentional here (see https://google.aip.dev/140#booleans) --)
	IsPublic bool `protobuf:"varint,4,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	// FIXME rename key_field to event_sequence_field
	KeyField    string                 `protobuf:"bytes,5,opt,name=key_field,json=keyField,proto3" json:"key_field,omitempty"`
	PiiFields   map[string]int32       `protobuf:"bytes,6,rep,name=pii_fields,json=piiFields,proto3" json:"pii_fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Validations []*Validation          `protobuf:"bytes,7,rep,name=validations,proto3" json:"validations,omitempty"`
	Metadata    *EventContractMetadata `protobuf:"bytes,8,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *EventContract) Reset() {
	*x = EventContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventContract) ProtoMessage() {}

func (x *EventContract) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventContract.ProtoReflect.Descriptor instead.
func (*EventContract) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{27}
}

func (x *EventContract) GetRef() *EventContractRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *EventContract) GetState() State {
	if x != nil {
		return x.State
	}
	return State_STATE_UNSPECIFIED
}

func (x *EventContract) GetSchemaRef() *SchemaRef {
	if x != nil {
		return x.SchemaRef
	}
	return nil
}

func (x *EventContract) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *EventContract) GetKeyField() string {
	if x != nil {
		return x.KeyField
	}
	return ""
}

func (x *EventContract) GetPiiFields() map[string]int32 {
	if x != nil {
		return x.PiiFields
	}
	return nil
}

func (x *EventContract) GetValidations() []*Validation {
	if x != nil {
		return x.Validations
	}
	return nil
}

func (x *EventContract) GetMetadata() *EventContractMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type EventContractMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The human readable title of this Event Contract. Used in the Portal. Defaults to the Event Contract name. This field can be modified.
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// The (optional) description of this Event Contract. Used in the Portal. Markdown syntax is supported. This field can be modified.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// The timestamp when this Event Contract was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The (optional) URI to the icon used with this Event Contract. This always an absolute URI, with the https scheme. Used in the Portal.
	IconUri string `protobuf:"bytes,4,opt,name=icon_uri,json=iconUri,proto3" json:"icon_uri,omitempty"`
	// Generic (key/value) labels for this Event Contract.
	Labels     []*Label `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty"`
	Domains    []string `protobuf:"bytes,6,rep,name=domains,proto3" json:"domains,omitempty"`
	Industries []string `protobuf:"bytes,7,rep,name=industries,proto3" json:"industries,omitempty"`
}

func (x *EventContractMetadata) Reset() {
	*x = EventContractMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventContractMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventContractMetadata) ProtoMessage() {}

func (x *EventContractMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventContractMetadata.ProtoReflect.Descriptor instead.
func (*EventContractMetadata) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{28}
}

func (x *EventContractMetadata) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *EventContractMetadata) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *EventContractMetadata) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *EventContractMetadata) GetIconUri() string {
	if x != nil {
		return x.IconUri
	}
	return ""
}

func (x *EventContractMetadata) GetLabels() []*Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *EventContractMetadata) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *EventContractMetadata) GetIndustries() []string {
	if x != nil {
		return x.Industries
	}
	return nil
}

type Label struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of the label.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The (optional) value of the label. An empty string means there is no value.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Label) Reset() {
	*x = Label{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Label) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Label) ProtoMessage() {}

func (x *Label) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Label.ProtoReflect.Descriptor instead.
func (*Label) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{29}
}

func (x *Label) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Label) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Validation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Type  string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Validation) Reset() {
	*x = Validation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Validation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Validation) ProtoMessage() {}

func (x *Validation) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Validation.ProtoReflect.Descriptor instead.
func (*Validation) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{30}
}

func (x *Validation) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *Validation) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Validation) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type StreamTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stream         *Stream          `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	KeyStream      *KeyStream       `protobuf:"bytes,2,opt,name=key_stream,json=keyStream,proto3" json:"key_stream,omitempty"`
	Derived        []*Stream        `protobuf:"bytes,3,rep,name=derived,proto3" json:"derived,omitempty"`
	BatchExporters []*BatchExporter `protobuf:"bytes,4,rep,name=batch_exporters,json=batchExporters,proto3" json:"batch_exporters,omitempty"`
	KafkaExporters []*KafkaExporter `protobuf:"bytes,5,rep,name=kafka_exporters,json=kafkaExporters,proto3" json:"kafka_exporters,omitempty"`
}

func (x *StreamTree) Reset() {
	*x = StreamTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamTree) ProtoMessage() {}

func (x *StreamTree) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamTree.ProtoReflect.Descriptor instead.
func (*StreamTree) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{31}
}

func (x *StreamTree) GetStream() *Stream {
	if x != nil {
		return x.Stream
	}
	return nil
}

func (x *StreamTree) GetKeyStream() *KeyStream {
	if x != nil {
		return x.KeyStream
	}
	return nil
}

func (x *StreamTree) GetDerived() []*Stream {
	if x != nil {
		return x.Derived
	}
	return nil
}

func (x *StreamTree) GetBatchExporters() []*BatchExporter {
	if x != nil {
		return x.BatchExporters
	}
	return nil
}

func (x *StreamTree) GetKafkaExporters() []*KafkaExporter {
	if x != nil {
		return x.KafkaExporters
	}
	return nil
}

type SinkTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sink           *Sink            `protobuf:"bytes,1,opt,name=sink,proto3" json:"sink,omitempty"`
	BatchExporters []*BatchExporter `protobuf:"bytes,2,rep,name=batch_exporters,json=batchExporters,proto3" json:"batch_exporters,omitempty"`
}

func (x *SinkTree) Reset() {
	*x = SinkTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SinkTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SinkTree) ProtoMessage() {}

func (x *SinkTree) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SinkTree.ProtoReflect.Descriptor instead.
func (*SinkTree) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{32}
}

func (x *SinkTree) GetSink() *Sink {
	if x != nil {
		return x.Sink
	}
	return nil
}

func (x *SinkTree) GetBatchExporters() []*BatchExporter {
	if x != nil {
		return x.BatchExporters
	}
	return nil
}

// Batch Jobs
//Currently we  only support:
//- CSV as DataFormat type
//- a clean database for every batch job
//- CSV files with a header row, because the header is needed to get the field names
type BatchJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ref                *BatchJobRef              `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	SourceData         *BatchData                `protobuf:"bytes,2,opt,name=source_data,json=sourceData,proto3" json:"source_data,omitempty"`
	Consent            *BatchJobConsentConfig    `protobuf:"bytes,3,opt,name=consent,proto3" json:"consent,omitempty"`
	Encryption         *BatchJobEncryptionConfig `protobuf:"bytes,4,opt,name=encryption,proto3" json:"encryption,omitempty"`
	EventContractRef   *EventContractRef         `protobuf:"bytes,5,opt,name=event_contract_ref,json=eventContractRef,proto3" json:"event_contract_ref,omitempty"`
	EncryptedData      *EncryptedData            `protobuf:"bytes,6,opt,name=encrypted_data,json=encryptedData,proto3" json:"encrypted_data,omitempty"`
	EncryptionKeysData *EncryptionKeysData       `protobuf:"bytes,7,opt,name=encryption_keys_data,json=encryptionKeysData,proto3" json:"encryption_keys_data,omitempty"`
	DerivedData        []*BatchJobDerivedData    `protobuf:"bytes,8,rep,name=derived_data,json=derivedData,proto3" json:"derived_data,omitempty"`
}

func (x *BatchJob) Reset() {
	*x = BatchJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchJob) ProtoMessage() {}

func (x *BatchJob) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchJob.ProtoReflect.Descriptor instead.
func (*BatchJob) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{33}
}

func (x *BatchJob) GetRef() *BatchJobRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *BatchJob) GetSourceData() *BatchData {
	if x != nil {
		return x.SourceData
	}
	return nil
}

func (x *BatchJob) GetConsent() *BatchJobConsentConfig {
	if x != nil {
		return x.Consent
	}
	return nil
}

func (x *BatchJob) GetEncryption() *BatchJobEncryptionConfig {
	if x != nil {
		return x.Encryption
	}
	return nil
}

func (x *BatchJob) GetEventContractRef() *EventContractRef {
	if x != nil {
		return x.EventContractRef
	}
	return nil
}

func (x *BatchJob) GetEncryptedData() *EncryptedData {
	if x != nil {
		return x.EncryptedData
	}
	return nil
}

func (x *BatchJob) GetEncryptionKeysData() *EncryptionKeysData {
	if x != nil {
		return x.EncryptionKeysData
	}
	return nil
}

func (x *BatchJob) GetDerivedData() []*BatchJobDerivedData {
	if x != nil {
		return x.DerivedData
	}
	return nil
}

type BatchJobRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BillingId string `protobuf:"bytes,1,opt,name=billing_id,json=billingId,proto3" json:"billing_id,omitempty"`
	// the UUIDv4 of the job
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *BatchJobRef) Reset() {
	*x = BatchJobRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchJobRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchJobRef) ProtoMessage() {}

func (x *BatchJobRef) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchJobRef.ProtoReflect.Descriptor instead.
func (*BatchJobRef) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{34}
}

func (x *BatchJobRef) GetBillingId() string {
	if x != nil {
		return x.BillingId
	}
	return ""
}

func (x *BatchJobRef) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type BucketLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sink       *Sink  `protobuf:"bytes,1,opt,name=sink,proto3" json:"sink,omitempty"`
	ObjectName string `protobuf:"bytes,2,opt,name=object_name,json=objectName,proto3" json:"object_name,omitempty"`
}

func (x *BucketLocation) Reset() {
	*x = BucketLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketLocation) ProtoMessage() {}

func (x *BucketLocation) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketLocation.ProtoReflect.Descriptor instead.
func (*BucketLocation) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{35}
}

func (x *BucketLocation) GetSink() *Sink {
	if x != nil {
		return x.Sink
	}
	return nil
}

func (x *BucketLocation) GetObjectName() string {
	if x != nil {
		return x.ObjectName
	}
	return ""
}

type BatchData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Location:
	//	*BatchData_Bucket
	//	*BatchData_RawContents
	//	*BatchData_LocalFilePath
	Location isBatchData_Location `protobuf_oneof:"location"`
	// Types that are assignable to DataType:
	//	*BatchData_Csv
	DataType isBatchData_DataType `protobuf_oneof:"data_type"`
}

func (x *BatchData) Reset() {
	*x = BatchData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchData) ProtoMessage() {}

func (x *BatchData) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchData.ProtoReflect.Descriptor instead.
func (*BatchData) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{36}
}

func (m *BatchData) GetLocation() isBatchData_Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (x *BatchData) GetBucket() *BucketLocation {
	if x, ok := x.GetLocation().(*BatchData_Bucket); ok {
		return x.Bucket
	}
	return nil
}

func (x *BatchData) GetRawContents() string {
	if x, ok := x.GetLocation().(*BatchData_RawContents); ok {
		return x.RawContents
	}
	return ""
}

func (x *BatchData) GetLocalFilePath() string {
	if x, ok := x.GetLocation().(*BatchData_LocalFilePath); ok {
		return x.LocalFilePath
	}
	return ""
}

func (m *BatchData) GetDataType() isBatchData_DataType {
	if m != nil {
		return m.DataType
	}
	return nil
}

func (x *BatchData) GetCsv() *CsvData {
	if x, ok := x.GetDataType().(*BatchData_Csv); ok {
		return x.Csv
	}
	return nil
}

type isBatchData_Location interface {
	isBatchData_Location()
}

type BatchData_Bucket struct {
	Bucket *BucketLocation `protobuf:"bytes,1,opt,name=bucket,proto3,oneof"`
}

type BatchData_RawContents struct {
	RawContents string `protobuf:"bytes,2,opt,name=raw_contents,json=rawContents,proto3,oneof"`
}

type BatchData_LocalFilePath struct {
	LocalFilePath string `protobuf:"bytes,3,opt,name=local_file_path,json=localFilePath,proto3,oneof"`
}

func (*BatchData_Bucket) isBatchData_Location() {}

func (*BatchData_RawContents) isBatchData_Location() {}

func (*BatchData_LocalFilePath) isBatchData_Location() {}

type isBatchData_DataType interface {
	isBatchData_DataType()
}

type BatchData_Csv struct {
	Csv *CsvData `protobuf:"bytes,4,opt,name=csv,proto3,oneof"`
}

func (*BatchData_Csv) isBatchData_DataType() {}

type CsvData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charset string `protobuf:"bytes,1,opt,name=charset,proto3" json:"charset,omitempty"`
}

func (x *CsvData) Reset() {
	*x = CsvData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsvData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsvData) ProtoMessage() {}

func (x *CsvData) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsvData.ProtoReflect.Descriptor instead.
func (*CsvData) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{37}
}

func (x *CsvData) GetCharset() string {
	if x != nil {
		return x.Charset
	}
	return ""
}

type EncryptedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target *BatchData `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *EncryptedData) Reset() {
	*x = EncryptedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedData) ProtoMessage() {}

func (x *EncryptedData) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedData.ProtoReflect.Descriptor instead.
func (*EncryptedData) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{38}
}

func (x *EncryptedData) GetTarget() *BatchData {
	if x != nil {
		return x.Target
	}
	return nil
}

type EncryptionKeysData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target *BatchData `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *EncryptionKeysData) Reset() {
	*x = EncryptionKeysData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptionKeysData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptionKeysData) ProtoMessage() {}

func (x *EncryptionKeysData) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptionKeysData.ProtoReflect.Descriptor instead.
func (*EncryptionKeysData) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{39}
}

func (x *EncryptionKeysData) GetTarget() *BatchData {
	if x != nil {
		return x.Target
	}
	return nil
}

type BatchJobDerivedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target           *BatchData       `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	ConsentLevels    []int32          `protobuf:"varint,2,rep,packed,name=consent_levels,json=consentLevels,proto3" json:"consent_levels,omitempty"`
	ConsentLevelType ConsentLevelType `protobuf:"varint,3,opt,name=consent_level_type,json=consentLevelType,proto3,enum=strmprivacy.api.entities.v1.ConsentLevelType" json:"consent_level_type,omitempty"`
	MaskedFields     *MaskedFields    `protobuf:"bytes,4,opt,name=masked_fields,json=maskedFields,proto3" json:"masked_fields,omitempty"`
}

func (x *BatchJobDerivedData) Reset() {
	*x = BatchJobDerivedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchJobDerivedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchJobDerivedData) ProtoMessage() {}

func (x *BatchJobDerivedData) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchJobDerivedData.ProtoReflect.Descriptor instead.
func (*BatchJobDerivedData) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{40}
}

func (x *BatchJobDerivedData) GetTarget() *BatchData {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *BatchJobDerivedData) GetConsentLevels() []int32 {
	if x != nil {
		return x.ConsentLevels
	}
	return nil
}

func (x *BatchJobDerivedData) GetConsentLevelType() ConsentLevelType {
	if x != nil {
		return x.ConsentLevelType
	}
	return ConsentLevelType_CONSENT_LEVEL_TYPE_UNSPECIFIED
}

func (x *BatchJobDerivedData) GetMaskedFields() *MaskedFields {
	if x != nil {
		return x.MaskedFields
	}
	return nil
}

type BatchJobEncryptionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimestampConfig *BatchJobTimestampConfig `protobuf:"bytes,1,opt,name=timestamp_config,json=timestampConfig,proto3" json:"timestamp_config,omitempty"`
	GroupId         string                   `protobuf:"bytes,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *BatchJobEncryptionConfig) Reset() {
	*x = BatchJobEncryptionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchJobEncryptionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchJobEncryptionConfig) ProtoMessage() {}

func (x *BatchJobEncryptionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchJobEncryptionConfig.ProtoReflect.Descriptor instead.
func (*BatchJobEncryptionConfig) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{41}
}

func (x *BatchJobEncryptionConfig) GetTimestampConfig() *BatchJobTimestampConfig {
	if x != nil {
		return x.TimestampConfig
	}
	return nil
}

func (x *BatchJobEncryptionConfig) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

type BatchJobTimestampConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName string `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	// Java Time Format template, see https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html
	Format          string             `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	DefaultTimeZone *datetime.TimeZone `protobuf:"bytes,3,opt,name=default_time_zone,json=defaultTimeZone,proto3" json:"default_time_zone,omitempty"`
}

func (x *BatchJobTimestampConfig) Reset() {
	*x = BatchJobTimestampConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchJobTimestampConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchJobTimestampConfig) ProtoMessage() {}

func (x *BatchJobTimestampConfig) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchJobTimestampConfig.ProtoReflect.Descriptor instead.
func (*BatchJobTimestampConfig) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{42}
}

func (x *BatchJobTimestampConfig) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *BatchJobTimestampConfig) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *BatchJobTimestampConfig) GetDefaultTimeZone() *datetime.TimeZone {
	if x != nil {
		return x.DefaultTimeZone
	}
	return nil
}

type BatchJobConsentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultConsentLevels  []int32                        `protobuf:"varint,1,rep,packed,name=default_consent_levels,json=defaultConsentLevels,proto3" json:"default_consent_levels,omitempty"`
	ConsentLevelExtractor *BatchJobConsentLevelExtractor `protobuf:"bytes,2,opt,name=consent_level_extractor,json=consentLevelExtractor,proto3" json:"consent_level_extractor,omitempty"`
}

func (x *BatchJobConsentConfig) Reset() {
	*x = BatchJobConsentConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchJobConsentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchJobConsentConfig) ProtoMessage() {}

func (x *BatchJobConsentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchJobConsentConfig.ProtoReflect.Descriptor instead.
func (*BatchJobConsentConfig) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{43}
}

func (x *BatchJobConsentConfig) GetDefaultConsentLevels() []int32 {
	if x != nil {
		return x.DefaultConsentLevels
	}
	return nil
}

func (x *BatchJobConsentConfig) GetConsentLevelExtractor() *BatchJobConsentLevelExtractor {
	if x != nil {
		return x.ConsentLevelExtractor
	}
	return nil
}

type BatchJobConsentLevelExtractor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName     string                    `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	FieldPatterns map[string]*ConsentLevels `protobuf:"bytes,2,rep,name=field_patterns,json=fieldPatterns,proto3" json:"field_patterns,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BatchJobConsentLevelExtractor) Reset() {
	*x = BatchJobConsentLevelExtractor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchJobConsentLevelExtractor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchJobConsentLevelExtractor) ProtoMessage() {}

func (x *BatchJobConsentLevelExtractor) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchJobConsentLevelExtractor.ProtoReflect.Descriptor instead.
func (*BatchJobConsentLevelExtractor) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{44}
}

func (x *BatchJobConsentLevelExtractor) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *BatchJobConsentLevelExtractor) GetFieldPatterns() map[string]*ConsentLevels {
	if x != nil {
		return x.FieldPatterns
	}
	return nil
}

type ConsentLevels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsentLevels []int32 `protobuf:"varint,1,rep,packed,name=consent_levels,json=consentLevels,proto3" json:"consent_levels,omitempty"`
}

func (x *ConsentLevels) Reset() {
	*x = ConsentLevels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsentLevels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsentLevels) ProtoMessage() {}

func (x *ConsentLevels) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsentLevels.ProtoReflect.Descriptor instead.
func (*ConsentLevels) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{45}
}

func (x *ConsentLevels) GetConsentLevels() []int32 {
	if x != nil {
		return x.ConsentLevels
	}
	return nil
}

type MaskedFields_PatternList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldPatterns []string `protobuf:"bytes,1,rep,name=field_patterns,json=fieldPatterns,proto3" json:"field_patterns,omitempty"`
}

func (x *MaskedFields_PatternList) Reset() {
	*x = MaskedFields_PatternList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaskedFields_PatternList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaskedFields_PatternList) ProtoMessage() {}

func (x *MaskedFields_PatternList) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaskedFields_PatternList.ProtoReflect.Descriptor instead.
func (*MaskedFields_PatternList) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{1, 1}
}

func (x *MaskedFields_PatternList) GetFieldPatterns() []string {
	if x != nil {
		return x.FieldPatterns
	}
	return nil
}

type Schema_SimpleSchemaDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// avro compatible name set by creator OR derived from name
	AvroName string `protobuf:"bytes,5,opt,name=avro_name,json=avroName,proto3" json:"avro_name,omitempty"`
	// must be Avro compatible. When absent becomes <handle>.<name>.v<version>
	Namespace string              `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Doc       string              `protobuf:"bytes,3,opt,name=doc,proto3" json:"doc,omitempty"`
	Nodes     []*SimpleSchemaNode `protobuf:"bytes,4,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *Schema_SimpleSchemaDefinition) Reset() {
	*x = Schema_SimpleSchemaDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema_SimpleSchemaDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema_SimpleSchemaDefinition) ProtoMessage() {}

func (x *Schema_SimpleSchemaDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema_SimpleSchemaDefinition.ProtoReflect.Descriptor instead.
func (*Schema_SimpleSchemaDefinition) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{23, 0}
}

func (x *Schema_SimpleSchemaDefinition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Schema_SimpleSchemaDefinition) GetAvroName() string {
	if x != nil {
		return x.AvroName
	}
	return ""
}

func (x *Schema_SimpleSchemaDefinition) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Schema_SimpleSchemaDefinition) GetDoc() string {
	if x != nil {
		return x.Doc
	}
	return ""
}

func (x *Schema_SimpleSchemaDefinition) GetNodes() []*SimpleSchemaNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

var File_strmprivacy_api_entities_v1_entities_v1_proto protoreflect.FileDescriptor

var file_strmprivacy_api_entities_v1_entities_v1_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1b, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa8, 0x04, 0x0a, 0x06, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x3d, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x66, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x03, 0x72, 0x65, 0x66, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x5b, 0x0a,
	0x12, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x73, 0x74, 0x72, 0x6d,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x06, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x72, 0x6d,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6c,
	0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x12, 0x4f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x74, 0x72, 0x6d,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x4e, 0x0a, 0x0d, 0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x73, 0x6b, 0x65,
	0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x0c, 0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xd3, 0x02, 0x0a, 0x0c, 0x4d, 0x61, 0x73, 0x6b, 0x65, 0x64,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x73, 0x65, 0x65, 0x64, 0x12, 0x63, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x73, 0x6b, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x1a, 0x77, 0x0a, 0x12,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x4b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x34, 0x0a, 0x0b, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x70, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x22, 0x52, 0x0a, 0x06, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x6a, 0x0a, 0x09, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x40, 0x0a, 0x03,
	0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x72, 0x6d,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x66, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x1b,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x48, 0x0a, 0x09, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x66, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x09, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4b, 0x0a, 0x0c, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x66, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x7d, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x22, 0xdb, 0x01, 0x0a, 0x04, 0x53, 0x69, 0x6e, 0x6b, 0x12, 0x3b, 0x0a, 0x03, 0x72, 0x65,
	0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x66, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x47, 0x0a, 0x09, 0x73, 0x69, 0x6e, 0x6b, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x72,
	0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x73, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x43, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x06, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0x46, 0x0a, 0x07, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x66, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x09, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x0c, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x24, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x5f,
	0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x61, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x72, 0x6e, 0x22, 0xce, 0x03,
	0x0a, 0x0d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12,
	0x44, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73,
	0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x52, 0x65, 0x66, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x4c, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x72, 0x6d,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x66, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x66, 0x12, 0x56, 0x0a, 0x0e, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74,
	0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x66, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x48, 0x00, 0x52, 0x0c, 0x6b,
	0x65, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x66, 0x12, 0x3a, 0x0a, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x69, 0x6e, 0x6b, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x08, 0x73, 0x69, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x74,
	0x68, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x61, 0x74, 0x68, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x42, 0x1a, 0x0a, 0x18, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x72, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x22, 0x4f,
	0x0a, 0x10, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x66, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0xfa, 0x01, 0x0a, 0x0c, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x43, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x61, 0x66, 0x6b,
	0x61, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x66, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x30, 0x0a, 0x11, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72,
	0x61, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x56, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x5f,
	0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2a, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x72, 0x69, 0x22, 0x4e, 0x0a, 0x0f,
	0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12,
	0x22, 0x0a, 0x0a, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xae, 0x02, 0x0a,
	0x0d, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x44,
	0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x74,
	0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x52, 0x65, 0x66, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x03, 0x72, 0x65, 0x66, 0x12, 0x4a, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x72,
	0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x66,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x66,
	0x12, 0x4d, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b,
	0x61, 0x66, 0x6b, 0x61, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x3c, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x61, 0x66,
	0x6b, 0x61, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x4f, 0x0a,
	0x10, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x66, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc6,
	0x01, 0x0a, 0x13, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x52, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74,
	0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x66, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0xbd, 0x02, 0x0a, 0x09, 0x4b, 0x61, 0x66, 0x6b,
	0x61, 0x55, 0x73, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x33, 0x0a, 0x13, 0x6b, 0x61, 0x66, 0x6b, 0x61,
	0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x11, 0x6b, 0x61, 0x66, 0x6b, 0x61,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x12, 0x52, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x66, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x66, 0x22, 0x4b, 0x0a, 0x0c, 0x4b, 0x61, 0x66, 0x6b, 0x61,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x09, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x7a, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x4a, 0x0a, 0x03, 0x72,
	0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x57, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x09, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xb6, 0x01, 0x0a, 0x12, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0b,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xaf, 0x01, 0x0a, 0x09, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x66,
	0x12, 0x1b, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x17, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x72,
	0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x22, 0xda, 0x04, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12,
	0x3d, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73,
	0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x52, 0x65, 0x66, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x3d,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x23, 0x0a, 0x0a, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x25, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x5f, 0x0a, 0x0d, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x1a, 0xbe, 0x01, 0x0a, 0x16, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x76, 0x72, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x61, 0x76, 0x72, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x6f,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x6f, 0x63, 0x12, 0x43, 0x0a, 0x05,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x74,
	0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x22, 0x99, 0x02, 0x0a, 0x10, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e,
	0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x72, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x76, 0x72, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x64,
	0x6f, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x6f, 0x63, 0x22, 0xb9, 0x02,
	0x0a, 0x0e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x69,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x69, 0x63, 0x6f,
	0x6e, 0x55, 0x72, 0x69, 0x12, 0x3f, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x69,
	0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x67, 0x0a, 0x10, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x66, 0x12, 0x1b, 0x0a,
	0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xd2, 0x04, 0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x12, 0x44, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x66,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x3d, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x72, 0x6d,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x52, 0x65, 0x66, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x52, 0x65, 0x66, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x12, 0x20, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x58, 0x0a, 0x0a, 0x70, 0x69, 0x69, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x50, 0x69, 0x69, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x70, 0x69, 0x69, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x49,
	0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x74,
	0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3c, 0x0a, 0x0e, 0x50, 0x69, 0x69,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc0, 0x02, 0x0a, 0x15, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72,
	0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x69, 0x63,
	0x6f, 0x6e, 0x55, 0x72, 0x69, 0x12, 0x3f, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a,
	0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x39, 0x0a, 0x05, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x15, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5b, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x17,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xfe, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x72, 0x65,
	0x65, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x12, 0x45, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x09, 0x6b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x3d, 0x0a, 0x07, 0x64, 0x65,
	0x72, 0x69, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74,
	0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x07, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x0f, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x52, 0x0e,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x73, 0x12, 0x53,
	0x0a, 0x0f, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x52, 0x0e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x08, 0x53, 0x69, 0x6e, 0x6b, 0x54, 0x72, 0x65, 0x65,
	0x12, 0x3a, 0x0a, 0x04, 0x73, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6e,
	0x6b, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x73, 0x69, 0x6e, 0x6b, 0x12, 0x53, 0x0a, 0x0f,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x52, 0x0e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x73, 0x22, 0xc4, 0x05, 0x0a, 0x08, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x12, 0x3f,
	0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x74,
	0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x66, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12,
	0x4c, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x51, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x12, 0x5a, 0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x12,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x72,
	0x65, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x66, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x66, 0x12, 0x56,
	0x0a, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x66, 0x0a, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x12, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x58,
	0x0a, 0x0c, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x44, 0x65, 0x72, 0x69, 0x76,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x72,
	0x69, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0x46, 0x0a, 0x0b, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x66, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x09, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x68, 0x0a, 0x0e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x04, 0x73, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x69, 0x6e, 0x6b, 0x52, 0x04, 0x73, 0x69, 0x6e, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xf4, 0x01, 0x0a, 0x09, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x23, 0x0a, 0x0c, 0x72, 0x61, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x38,
	0x0a, 0x03, 0x63, 0x73, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74,
	0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x73, 0x76, 0x44, 0x61, 0x74,
	0x61, 0x48, 0x01, 0x52, 0x03, 0x63, 0x73, 0x76, 0x42, 0x0a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x23, 0x0a, 0x07, 0x43, 0x73, 0x76, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x22, 0x54, 0x0a, 0x0d, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x59, 0x0a, 0x12,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x43, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0xae, 0x02, 0x0a, 0x13, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x4a, 0x6f, 0x62, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x43, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x5b, 0x0a, 0x12, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x6d, 0x61, 0x73, 0x6b,
	0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x73, 0x6b, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x0c, 0x6d, 0x61, 0x73, 0x6b,
	0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x18, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x4a, 0x6f, 0x62, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x64, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0xa2, 0x01, 0x0a, 0x17,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x46, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65,
	0x22, 0xcb, 0x01, 0x0a, 0x15, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x39, 0x0a, 0x16, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x77, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xa2,
	0x02, 0x0a, 0x1d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x74, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x73, 0x1a, 0x6c, 0x0a, 0x12, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x40, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73,
	0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x36, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2a, 0x54, 0x0a, 0x10, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x55, 0x4d, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x52, 0x41, 0x4e, 0x55, 0x4c, 0x41, 0x52, 0x10,
	0x02, 0x2a, 0x39, 0x0a, 0x08, 0x53, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x53, 0x49, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x53, 0x33, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x47, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x10, 0x02, 0x2a, 0x4d, 0x0a, 0x0d,
	0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12, 0x1e, 0x0a,
	0x1a, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4d, 0x45, 0x43, 0x48, 0x41, 0x4e, 0x49, 0x53, 0x4d, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x53, 0x41, 0x53, 0x4c, 0x5f, 0x50, 0x4c, 0x41, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x53, 0x41, 0x53, 0x4c, 0x5f, 0x53, 0x53, 0x4c, 0x10, 0x02, 0x2a, 0x61, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50,
	0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x5f, 0x52,
	0x45, 0x56, 0x49, 0x45, 0x57, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x04, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x05, 0x2a, 0x43,
	0x0a, 0x0a, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17,
	0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x56, 0x52,
	0x4f, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4a, 0x53, 0x4f, 0x4e, 0x53, 0x43, 0x48, 0x45, 0x4d,
	0x41, 0x10, 0x02, 0x2a, 0x84, 0x01, 0x0a, 0x14, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x23,
	0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x4e, 0x4f,
	0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10, 0x02, 0x12, 0x09,
	0x0a, 0x05, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x54,
	0x45, 0x47, 0x45, 0x52, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x05,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x0a, 0x2a, 0x5f, 0x0a, 0x13, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x12, 0x25, 0x0a, 0x21, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x55, 0x42, 0x4c,
	0x49, 0x43, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x4e, 0x4c, 0x59,
	0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x4e, 0x4c,
	0x59, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x02, 0x42, 0x69, 0x0a, 0x1e, 0x69,
	0x6f, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a,
	0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x72, 0x6d,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2d, 0x67, 0x6f, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescOnce sync.Once
	file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescData = file_strmprivacy_api_entities_v1_entities_v1_proto_rawDesc
)

func file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP() []byte {
	file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescOnce.Do(func() {
		file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescData = protoimpl.X.CompressGZIP(file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescData)
	})
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescData
}

var file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes = make([]protoimpl.MessageInfo, 51)
var file_strmprivacy_api_entities_v1_entities_v1_proto_goTypes = []interface{}{
	(ConsentLevelType)(0),                 // 0: strmprivacy.api.entities.v1.ConsentLevelType
	(SinkType)(0),                         // 1: strmprivacy.api.entities.v1.SinkType
	(AuthMechanism)(0),                    // 2: strmprivacy.api.entities.v1.AuthMechanism
	(State)(0),                            // 3: strmprivacy.api.entities.v1.State
	(SchemaType)(0),                       // 4: strmprivacy.api.entities.v1.SchemaType
	(SimpleSchemaNodeType)(0),             // 5: strmprivacy.api.entities.v1.SimpleSchemaNodeType
	(FilterPublicPrivate)(0),              // 6: strmprivacy.api.entities.v1.FilterPublicPrivate
	(*Stream)(nil),                        // 7: strmprivacy.api.entities.v1.Stream
	(*MaskedFields)(nil),                  // 8: strmprivacy.api.entities.v1.MaskedFields
	(*Limits)(nil),                        // 9: strmprivacy.api.entities.v1.Limits
	(*KeyStream)(nil),                     // 10: strmprivacy.api.entities.v1.KeyStream
	(*StreamRef)(nil),                     // 11: strmprivacy.api.entities.v1.StreamRef
	(*KeyStreamRef)(nil),                  // 12: strmprivacy.api.entities.v1.KeyStreamRef
	(*Credentials)(nil),                   // 13: strmprivacy.api.entities.v1.Credentials
	(*Sink)(nil),                          // 14: strmprivacy.api.entities.v1.Sink
	(*SinkRef)(nil),                       // 15: strmprivacy.api.entities.v1.SinkRef
	(*BucketConfig)(nil),                  // 16: strmprivacy.api.entities.v1.BucketConfig
	(*BatchExporter)(nil),                 // 17: strmprivacy.api.entities.v1.BatchExporter
	(*BatchExporterRef)(nil),              // 18: strmprivacy.api.entities.v1.BatchExporterRef
	(*KafkaCluster)(nil),                  // 19: strmprivacy.api.entities.v1.KafkaCluster
	(*KafkaClusterRef)(nil),               // 20: strmprivacy.api.entities.v1.KafkaClusterRef
	(*KafkaExporter)(nil),                 // 21: strmprivacy.api.entities.v1.KafkaExporter
	(*KafkaExporterRef)(nil),              // 22: strmprivacy.api.entities.v1.KafkaExporterRef
	(*KafkaExporterTarget)(nil),           // 23: strmprivacy.api.entities.v1.KafkaExporterTarget
	(*KafkaUser)(nil),                     // 24: strmprivacy.api.entities.v1.KafkaUser
	(*KafkaUserRef)(nil),                  // 25: strmprivacy.api.entities.v1.KafkaUserRef
	(*ConsentLevelMapping)(nil),           // 26: strmprivacy.api.entities.v1.ConsentLevelMapping
	(*ConsentLevelMappingRef)(nil),        // 27: strmprivacy.api.entities.v1.ConsentLevelMappingRef
	(*WindowedEventCount)(nil),            // 28: strmprivacy.api.entities.v1.WindowedEventCount
	(*SchemaRef)(nil),                     // 29: strmprivacy.api.entities.v1.SchemaRef
	(*Schema)(nil),                        // 30: strmprivacy.api.entities.v1.Schema
	(*SimpleSchemaNode)(nil),              // 31: strmprivacy.api.entities.v1.SimpleSchemaNode
	(*SchemaMetadata)(nil),                // 32: strmprivacy.api.entities.v1.SchemaMetadata
	(*EventContractRef)(nil),              // 33: strmprivacy.api.entities.v1.EventContractRef
	(*EventContract)(nil),                 // 34: strmprivacy.api.entities.v1.EventContract
	(*EventContractMetadata)(nil),         // 35: strmprivacy.api.entities.v1.EventContractMetadata
	(*Label)(nil),                         // 36: strmprivacy.api.entities.v1.Label
	(*Validation)(nil),                    // 37: strmprivacy.api.entities.v1.Validation
	(*StreamTree)(nil),                    // 38: strmprivacy.api.entities.v1.StreamTree
	(*SinkTree)(nil),                      // 39: strmprivacy.api.entities.v1.SinkTree
	(*BatchJob)(nil),                      // 40: strmprivacy.api.entities.v1.BatchJob
	(*BatchJobRef)(nil),                   // 41: strmprivacy.api.entities.v1.BatchJobRef
	(*BucketLocation)(nil),                // 42: strmprivacy.api.entities.v1.BucketLocation
	(*BatchData)(nil),                     // 43: strmprivacy.api.entities.v1.BatchData
	(*CsvData)(nil),                       // 44: strmprivacy.api.entities.v1.CsvData
	(*EncryptedData)(nil),                 // 45: strmprivacy.api.entities.v1.EncryptedData
	(*EncryptionKeysData)(nil),            // 46: strmprivacy.api.entities.v1.EncryptionKeysData
	(*BatchJobDerivedData)(nil),           // 47: strmprivacy.api.entities.v1.BatchJobDerivedData
	(*BatchJobEncryptionConfig)(nil),      // 48: strmprivacy.api.entities.v1.BatchJobEncryptionConfig
	(*BatchJobTimestampConfig)(nil),       // 49: strmprivacy.api.entities.v1.BatchJobTimestampConfig
	(*BatchJobConsentConfig)(nil),         // 50: strmprivacy.api.entities.v1.BatchJobConsentConfig
	(*BatchJobConsentLevelExtractor)(nil), // 51: strmprivacy.api.entities.v1.BatchJobConsentLevelExtractor
	(*ConsentLevels)(nil),                 // 52: strmprivacy.api.entities.v1.ConsentLevels
	nil,                                   // 53: strmprivacy.api.entities.v1.MaskedFields.FieldPatternsEntry
	(*MaskedFields_PatternList)(nil),      // 54: strmprivacy.api.entities.v1.MaskedFields.PatternList
	(*Schema_SimpleSchemaDefinition)(nil), // 55: strmprivacy.api.entities.v1.Schema.SimpleSchemaDefinition
	nil,                                   // 56: strmprivacy.api.entities.v1.EventContract.PiiFieldsEntry
	nil,                                   // 57: strmprivacy.api.entities.v1.BatchJobConsentLevelExtractor.FieldPatternsEntry
	(*durationpb.Duration)(nil),           // 58: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),         // 59: google.protobuf.Timestamp
	(*datetime.TimeZone)(nil),             // 60: google.type.TimeZone
}
var file_strmprivacy_api_entities_v1_entities_v1_proto_depIdxs = []int32{
	11, // 0: strmprivacy.api.entities.v1.Stream.ref:type_name -> strmprivacy.api.entities.v1.StreamRef
	0,  // 1: strmprivacy.api.entities.v1.Stream.consent_level_type:type_name -> strmprivacy.api.entities.v1.ConsentLevelType
	9,  // 2: strmprivacy.api.entities.v1.Stream.limits:type_name -> strmprivacy.api.entities.v1.Limits
	13, // 3: strmprivacy.api.entities.v1.Stream.credentials:type_name -> strmprivacy.api.entities.v1.Credentials
	8,  // 4: strmprivacy.api.entities.v1.Stream.masked_fields:type_name -> strmprivacy.api.entities.v1.MaskedFields
	53, // 5: strmprivacy.api.entities.v1.MaskedFields.field_patterns:type_name -> strmprivacy.api.entities.v1.MaskedFields.FieldPatternsEntry
	12, // 6: strmprivacy.api.entities.v1.KeyStream.ref:type_name -> strmprivacy.api.entities.v1.KeyStreamRef
	15, // 7: strmprivacy.api.entities.v1.Sink.ref:type_name -> strmprivacy.api.entities.v1.SinkRef
	1,  // 8: strmprivacy.api.entities.v1.Sink.sink_type:type_name -> strmprivacy.api.entities.v1.SinkType
	16, // 9: strmprivacy.api.entities.v1.Sink.bucket:type_name -> strmprivacy.api.entities.v1.BucketConfig
	18, // 10: strmprivacy.api.entities.v1.BatchExporter.ref:type_name -> strmprivacy.api.entities.v1.BatchExporterRef
	11, // 11: strmprivacy.api.entities.v1.BatchExporter.stream_ref:type_name -> strmprivacy.api.entities.v1.StreamRef
	12, // 12: strmprivacy.api.entities.v1.BatchExporter.key_stream_ref:type_name -> strmprivacy.api.entities.v1.KeyStreamRef
	58, // 13: strmprivacy.api.entities.v1.BatchExporter.interval:type_name -> google.protobuf.Duration
	20, // 14: strmprivacy.api.entities.v1.KafkaCluster.ref:type_name -> strmprivacy.api.entities.v1.KafkaClusterRef
	2,  // 15: strmprivacy.api.entities.v1.KafkaCluster.auth_mechanism:type_name -> strmprivacy.api.entities.v1.AuthMechanism
	22, // 16: strmprivacy.api.entities.v1.KafkaExporter.ref:type_name -> strmprivacy.api.entities.v1.KafkaExporterRef
	11, // 17: strmprivacy.api.entities.v1.KafkaExporter.stream_ref:type_name -> strmprivacy.api.entities.v1.StreamRef
	23, // 18: strmprivacy.api.entities.v1.KafkaExporter.target:type_name -> strmprivacy.api.entities.v1.KafkaExporterTarget
	24, // 19: strmprivacy.api.entities.v1.KafkaExporter.users:type_name -> strmprivacy.api.entities.v1.KafkaUser
	20, // 20: strmprivacy.api.entities.v1.KafkaExporterTarget.cluster_ref:type_name -> strmprivacy.api.entities.v1.KafkaClusterRef
	25, // 21: strmprivacy.api.entities.v1.KafkaUser.ref:type_name -> strmprivacy.api.entities.v1.KafkaUserRef
	20, // 22: strmprivacy.api.entities.v1.KafkaUser.cluster_ref:type_name -> strmprivacy.api.entities.v1.KafkaClusterRef
	27, // 23: strmprivacy.api.entities.v1.ConsentLevelMapping.ref:type_name -> strmprivacy.api.entities.v1.ConsentLevelMappingRef
	59, // 24: strmprivacy.api.entities.v1.WindowedEventCount.start_time:type_name -> google.protobuf.Timestamp
	59, // 25: strmprivacy.api.entities.v1.WindowedEventCount.end_time:type_name -> google.protobuf.Timestamp
	4,  // 26: strmprivacy.api.entities.v1.SchemaRef.schema_type:type_name -> strmprivacy.api.entities.v1.SchemaType
	29, // 27: strmprivacy.api.entities.v1.Schema.ref:type_name -> strmprivacy.api.entities.v1.SchemaRef
	3,  // 28: strmprivacy.api.entities.v1.Schema.state:type_name -> strmprivacy.api.entities.v1.State
	32, // 29: strmprivacy.api.entities.v1.Schema.metadata:type_name -> strmprivacy.api.entities.v1.SchemaMetadata
	55, // 30: strmprivacy.api.entities.v1.Schema.simple_schema:type_name -> strmprivacy.api.entities.v1.Schema.SimpleSchemaDefinition
	5,  // 31: strmprivacy.api.entities.v1.SimpleSchemaNode.type:type_name -> strmprivacy.api.entities.v1.SimpleSchemaNodeType
	31, // 32: strmprivacy.api.entities.v1.SimpleSchemaNode.nodes:type_name -> strmprivacy.api.entities.v1.SimpleSchemaNode
	59, // 33: strmprivacy.api.entities.v1.SchemaMetadata.create_time:type_name -> google.protobuf.Timestamp
	36, // 34: strmprivacy.api.entities.v1.SchemaMetadata.labels:type_name -> strmprivacy.api.entities.v1.Label
	33, // 35: strmprivacy.api.entities.v1.EventContract.ref:type_name -> strmprivacy.api.entities.v1.EventContractRef
	3,  // 36: strmprivacy.api.entities.v1.EventContract.state:type_name -> strmprivacy.api.entities.v1.State
	29, // 37: strmprivacy.api.entities.v1.EventContract.schema_ref:type_name -> strmprivacy.api.entities.v1.SchemaRef
	56, // 38: strmprivacy.api.entities.v1.EventContract.pii_fields:type_name -> strmprivacy.api.entities.v1.EventContract.PiiFieldsEntry
	37, // 39: strmprivacy.api.entities.v1.EventContract.validations:type_name -> strmprivacy.api.entities.v1.Validation
	35, // 40: strmprivacy.api.entities.v1.EventContract.metadata:type_name -> strmprivacy.api.entities.v1.EventContractMetadata
	59, // 41: strmprivacy.api.entities.v1.EventContractMetadata.create_time:type_name -> google.protobuf.Timestamp
	36, // 42: strmprivacy.api.entities.v1.EventContractMetadata.labels:type_name -> strmprivacy.api.entities.v1.Label
	7,  // 43: strmprivacy.api.entities.v1.StreamTree.stream:type_name -> strmprivacy.api.entities.v1.Stream
	10, // 44: strmprivacy.api.entities.v1.StreamTree.key_stream:type_name -> strmprivacy.api.entities.v1.KeyStream
	7,  // 45: strmprivacy.api.entities.v1.StreamTree.derived:type_name -> strmprivacy.api.entities.v1.Stream
	17, // 46: strmprivacy.api.entities.v1.StreamTree.batch_exporters:type_name -> strmprivacy.api.entities.v1.BatchExporter
	21, // 47: strmprivacy.api.entities.v1.StreamTree.kafka_exporters:type_name -> strmprivacy.api.entities.v1.KafkaExporter
	14, // 48: strmprivacy.api.entities.v1.SinkTree.sink:type_name -> strmprivacy.api.entities.v1.Sink
	17, // 49: strmprivacy.api.entities.v1.SinkTree.batch_exporters:type_name -> strmprivacy.api.entities.v1.BatchExporter
	41, // 50: strmprivacy.api.entities.v1.BatchJob.ref:type_name -> strmprivacy.api.entities.v1.BatchJobRef
	43, // 51: strmprivacy.api.entities.v1.BatchJob.source_data:type_name -> strmprivacy.api.entities.v1.BatchData
	50, // 52: strmprivacy.api.entities.v1.BatchJob.consent:type_name -> strmprivacy.api.entities.v1.BatchJobConsentConfig
	48, // 53: strmprivacy.api.entities.v1.BatchJob.encryption:type_name -> strmprivacy.api.entities.v1.BatchJobEncryptionConfig
	33, // 54: strmprivacy.api.entities.v1.BatchJob.event_contract_ref:type_name -> strmprivacy.api.entities.v1.EventContractRef
	45, // 55: strmprivacy.api.entities.v1.BatchJob.encrypted_data:type_name -> strmprivacy.api.entities.v1.EncryptedData
	46, // 56: strmprivacy.api.entities.v1.BatchJob.encryption_keys_data:type_name -> strmprivacy.api.entities.v1.EncryptionKeysData
	47, // 57: strmprivacy.api.entities.v1.BatchJob.derived_data:type_name -> strmprivacy.api.entities.v1.BatchJobDerivedData
	14, // 58: strmprivacy.api.entities.v1.BucketLocation.sink:type_name -> strmprivacy.api.entities.v1.Sink
	42, // 59: strmprivacy.api.entities.v1.BatchData.bucket:type_name -> strmprivacy.api.entities.v1.BucketLocation
	44, // 60: strmprivacy.api.entities.v1.BatchData.csv:type_name -> strmprivacy.api.entities.v1.CsvData
	43, // 61: strmprivacy.api.entities.v1.EncryptedData.target:type_name -> strmprivacy.api.entities.v1.BatchData
	43, // 62: strmprivacy.api.entities.v1.EncryptionKeysData.target:type_name -> strmprivacy.api.entities.v1.BatchData
	43, // 63: strmprivacy.api.entities.v1.BatchJobDerivedData.target:type_name -> strmprivacy.api.entities.v1.BatchData
	0,  // 64: strmprivacy.api.entities.v1.BatchJobDerivedData.consent_level_type:type_name -> strmprivacy.api.entities.v1.ConsentLevelType
	8,  // 65: strmprivacy.api.entities.v1.BatchJobDerivedData.masked_fields:type_name -> strmprivacy.api.entities.v1.MaskedFields
	49, // 66: strmprivacy.api.entities.v1.BatchJobEncryptionConfig.timestamp_config:type_name -> strmprivacy.api.entities.v1.BatchJobTimestampConfig
	60, // 67: strmprivacy.api.entities.v1.BatchJobTimestampConfig.default_time_zone:type_name -> google.type.TimeZone
	51, // 68: strmprivacy.api.entities.v1.BatchJobConsentConfig.consent_level_extractor:type_name -> strmprivacy.api.entities.v1.BatchJobConsentLevelExtractor
	57, // 69: strmprivacy.api.entities.v1.BatchJobConsentLevelExtractor.field_patterns:type_name -> strmprivacy.api.entities.v1.BatchJobConsentLevelExtractor.FieldPatternsEntry
	54, // 70: strmprivacy.api.entities.v1.MaskedFields.FieldPatternsEntry.value:type_name -> strmprivacy.api.entities.v1.MaskedFields.PatternList
	31, // 71: strmprivacy.api.entities.v1.Schema.SimpleSchemaDefinition.nodes:type_name -> strmprivacy.api.entities.v1.SimpleSchemaNode
	52, // 72: strmprivacy.api.entities.v1.BatchJobConsentLevelExtractor.FieldPatternsEntry.value:type_name -> strmprivacy.api.entities.v1.ConsentLevels
	73, // [73:73] is the sub-list for method output_type
	73, // [73:73] is the sub-list for method input_type
	73, // [73:73] is the sub-list for extension type_name
	73, // [73:73] is the sub-list for extension extendee
	0,  // [0:73] is the sub-list for field type_name
}

func init() { file_strmprivacy_api_entities_v1_entities_v1_proto_init() }
func file_strmprivacy_api_entities_v1_entities_v1_proto_init() {
	if File_strmprivacy_api_entities_v1_entities_v1_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaskedFields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Limits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyStreamRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Credentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SinkRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchExporter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchExporterRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaClusterRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaExporter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaExporterRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaExporterTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaUserRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsentLevelMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsentLevelMappingRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowedEventCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchemaRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleSchemaNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchemaMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventContractRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventContractMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Label); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Validation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SinkTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchJobRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsvData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptionKeysData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchJobDerivedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchJobEncryptionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchJobTimestampConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchJobConsentConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchJobConsentLevelExtractor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsentLevels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaskedFields_PatternList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schema_SimpleSchemaDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*Sink_Bucket)(nil),
	}
	file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*BatchExporter_StreamRef)(nil),
		(*BatchExporter_KeyStreamRef)(nil),
	}
	file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[36].OneofWrappers = []interface{}{
		(*BatchData_Bucket)(nil),
		(*BatchData_RawContents)(nil),
		(*BatchData_LocalFilePath)(nil),
		(*BatchData_Csv)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_strmprivacy_api_entities_v1_entities_v1_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   51,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_strmprivacy_api_entities_v1_entities_v1_proto_goTypes,
		DependencyIndexes: file_strmprivacy_api_entities_v1_entities_v1_proto_depIdxs,
		EnumInfos:         file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes,
		MessageInfos:      file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes,
	}.Build()
	File_strmprivacy_api_entities_v1_entities_v1_proto = out.File
	file_strmprivacy_api_entities_v1_entities_v1_proto_rawDesc = nil
	file_strmprivacy_api_entities_v1_entities_v1_proto_goTypes = nil
	file_strmprivacy_api_entities_v1_entities_v1_proto_depIdxs = nil
}
