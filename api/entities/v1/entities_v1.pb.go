// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: strmprivacy/api/entities/v1/entities_v1.proto

package entities

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	datetime "google.golang.org/genproto/googleapis/type/datetime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserRole int32

const (
	UserRole_USER_ROLE_UNSPECIFIED UserRole = 0
	UserRole_ADMIN                 UserRole = 1
	UserRole_PROJECT_ADMIN         UserRole = 2
	UserRole_APPROVER              UserRole = 3
	UserRole_MEMBER                UserRole = 4
)

// Enum value maps for UserRole.
var (
	UserRole_name = map[int32]string{
		0: "USER_ROLE_UNSPECIFIED",
		1: "ADMIN",
		2: "PROJECT_ADMIN",
		3: "APPROVER",
		4: "MEMBER",
	}
	UserRole_value = map[string]int32{
		"USER_ROLE_UNSPECIFIED": 0,
		"ADMIN":                 1,
		"PROJECT_ADMIN":         2,
		"APPROVER":              3,
		"MEMBER":                4,
	}
)

func (x UserRole) Enum() *UserRole {
	p := new(UserRole)
	*p = x
	return p
}

func (x UserRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserRole) Descriptor() protoreflect.EnumDescriptor {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes[0].Descriptor()
}

func (UserRole) Type() protoreflect.EnumType {
	return &file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes[0]
}

func (x UserRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserRole.Descriptor instead.
func (UserRole) EnumDescriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{0}
}

type BatchJobStateType int32

const (
	BatchJobStateType_BATCH_JOB_STATE_TYPE_UNSPECIFIED BatchJobStateType = 0
	BatchJobStateType_PENDING                          BatchJobStateType = 1
	BatchJobStateType_STARTED                          BatchJobStateType = 2
	BatchJobStateType_ERROR_STARTING                   BatchJobStateType = 3
	BatchJobStateType_RUNNING                          BatchJobStateType = 4
	BatchJobStateType_FINISHED                         BatchJobStateType = 5
	BatchJobStateType_ERROR                            BatchJobStateType = 6
)

// Enum value maps for BatchJobStateType.
var (
	BatchJobStateType_name = map[int32]string{
		0: "BATCH_JOB_STATE_TYPE_UNSPECIFIED",
		1: "PENDING",
		2: "STARTED",
		3: "ERROR_STARTING",
		4: "RUNNING",
		5: "FINISHED",
		6: "ERROR",
	}
	BatchJobStateType_value = map[string]int32{
		"BATCH_JOB_STATE_TYPE_UNSPECIFIED": 0,
		"PENDING":                          1,
		"STARTED":                          2,
		"ERROR_STARTING":                   3,
		"RUNNING":                          4,
		"FINISHED":                         5,
		"ERROR":                            6,
	}
)

func (x BatchJobStateType) Enum() *BatchJobStateType {
	p := new(BatchJobStateType)
	*p = x
	return p
}

func (x BatchJobStateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BatchJobStateType) Descriptor() protoreflect.EnumDescriptor {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes[1].Descriptor()
}

func (BatchJobStateType) Type() protoreflect.EnumType {
	return &file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes[1]
}

func (x BatchJobStateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BatchJobStateType.Descriptor instead.
func (BatchJobStateType) EnumDescriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{1}
}

//
//Consent level is meant to interpret the consent-levels of an event for decryption purposes only.
//
//Cumulative means that the highest consent-level in an event must be greater than or equal to the single requested level
//for the decrypted stream.
//
//Granular means that the set of consent-levels in an event must enclose the set of requested event levels for the
//decrypted stream.
type ConsentLevelType int32

const (
	ConsentLevelType_CONSENT_LEVEL_TYPE_UNSPECIFIED ConsentLevelType = 0
	ConsentLevelType_CUMULATIVE                     ConsentLevelType = 1
	ConsentLevelType_GRANULAR                       ConsentLevelType = 2
)

// Enum value maps for ConsentLevelType.
var (
	ConsentLevelType_name = map[int32]string{
		0: "CONSENT_LEVEL_TYPE_UNSPECIFIED",
		1: "CUMULATIVE",
		2: "GRANULAR",
	}
	ConsentLevelType_value = map[string]int32{
		"CONSENT_LEVEL_TYPE_UNSPECIFIED": 0,
		"CUMULATIVE":                     1,
		"GRANULAR":                       2,
	}
)

func (x ConsentLevelType) Enum() *ConsentLevelType {
	p := new(ConsentLevelType)
	*p = x
	return p
}

func (x ConsentLevelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConsentLevelType) Descriptor() protoreflect.EnumDescriptor {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes[2].Descriptor()
}

func (ConsentLevelType) Type() protoreflect.EnumType {
	return &file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes[2]
}

func (x ConsentLevelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConsentLevelType.Descriptor instead.
func (ConsentLevelType) EnumDescriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{2}
}

// Deprecated: Do not use.
type SinkType int32

const (
	SinkType_SINK_TYPE_UNSPECIFIED SinkType = 0
	SinkType_S3                    SinkType = 1
	SinkType_GCLOUD                SinkType = 2
)

// Enum value maps for SinkType.
var (
	SinkType_name = map[int32]string{
		0: "SINK_TYPE_UNSPECIFIED",
		1: "S3",
		2: "GCLOUD",
	}
	SinkType_value = map[string]int32{
		"SINK_TYPE_UNSPECIFIED": 0,
		"S3":                    1,
		"GCLOUD":                2,
	}
)

func (x SinkType) Enum() *SinkType {
	p := new(SinkType)
	*p = x
	return p
}

func (x SinkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SinkType) Descriptor() protoreflect.EnumDescriptor {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes[3].Descriptor()
}

func (SinkType) Type() protoreflect.EnumType {
	return &file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes[3]
}

func (x SinkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SinkType.Descriptor instead.
func (SinkType) EnumDescriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{3}
}

// (-- TODO align values with JAAS. see https://docs.confluent.io/platform/current/kafka/overview-authentication-methods.html --)
//     also see the Kafka exporter to determine the correct terminology here
//     SASL_SSL should probably be SASL_OAUTHBEARER --)
type AuthMechanism int32

const (
	AuthMechanism_AUTH_MECHANISM_UNSPECIFIED AuthMechanism = 0
	AuthMechanism_SASL_PLAIN                 AuthMechanism = 1
	AuthMechanism_SASL_SSL                   AuthMechanism = 2
)

// Enum value maps for AuthMechanism.
var (
	AuthMechanism_name = map[int32]string{
		0: "AUTH_MECHANISM_UNSPECIFIED",
		1: "SASL_PLAIN",
		2: "SASL_SSL",
	}
	AuthMechanism_value = map[string]int32{
		"AUTH_MECHANISM_UNSPECIFIED": 0,
		"SASL_PLAIN":                 1,
		"SASL_SSL":                   2,
	}
)

func (x AuthMechanism) Enum() *AuthMechanism {
	p := new(AuthMechanism)
	*p = x
	return p
}

func (x AuthMechanism) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthMechanism) Descriptor() protoreflect.EnumDescriptor {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes[4].Descriptor()
}

func (AuthMechanism) Type() protoreflect.EnumType {
	return &file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes[4]
}

func (x AuthMechanism) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthMechanism.Descriptor instead.
func (AuthMechanism) EnumDescriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{4}
}

type SchemaType int32

const (
	SchemaType_SCHEMA_TYPE_UNSPECIFIED SchemaType = 0
	SchemaType_AVRO                    SchemaType = 1
	SchemaType_JSONSCHEMA              SchemaType = 2
)

// Enum value maps for SchemaType.
var (
	SchemaType_name = map[int32]string{
		0: "SCHEMA_TYPE_UNSPECIFIED",
		1: "AVRO",
		2: "JSONSCHEMA",
	}
	SchemaType_value = map[string]int32{
		"SCHEMA_TYPE_UNSPECIFIED": 0,
		"AVRO":                    1,
		"JSONSCHEMA":              2,
	}
)

func (x SchemaType) Enum() *SchemaType {
	p := new(SchemaType)
	*p = x
	return p
}

func (x SchemaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SchemaType) Descriptor() protoreflect.EnumDescriptor {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes[5].Descriptor()
}

func (SchemaType) Type() protoreflect.EnumType {
	return &file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes[5]
}

func (x SchemaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SchemaType.Descriptor instead.
func (SchemaType) EnumDescriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{5}
}

type SimpleSchemaNodeType int32

const (
	SimpleSchemaNodeType_SIMPLE_SCHEMA_NODE_TYPE_UNSPECIFIED SimpleSchemaNodeType = 0
	SimpleSchemaNodeType_STRING                              SimpleSchemaNodeType = 1
	SimpleSchemaNodeType_BOOLEAN                             SimpleSchemaNodeType = 2
	SimpleSchemaNodeType_FLOAT                               SimpleSchemaNodeType = 3
	SimpleSchemaNodeType_INTEGER                             SimpleSchemaNodeType = 4
	SimpleSchemaNodeType_LONG                                SimpleSchemaNodeType = 5
	SimpleSchemaNodeType_NODE                                SimpleSchemaNodeType = 10
)

// Enum value maps for SimpleSchemaNodeType.
var (
	SimpleSchemaNodeType_name = map[int32]string{
		0:  "SIMPLE_SCHEMA_NODE_TYPE_UNSPECIFIED",
		1:  "STRING",
		2:  "BOOLEAN",
		3:  "FLOAT",
		4:  "INTEGER",
		5:  "LONG",
		10: "NODE",
	}
	SimpleSchemaNodeType_value = map[string]int32{
		"SIMPLE_SCHEMA_NODE_TYPE_UNSPECIFIED": 0,
		"STRING":                              1,
		"BOOLEAN":                             2,
		"FLOAT":                               3,
		"INTEGER":                             4,
		"LONG":                                5,
		"NODE":                                10,
	}
)

func (x SimpleSchemaNodeType) Enum() *SimpleSchemaNodeType {
	p := new(SimpleSchemaNodeType)
	*p = x
	return p
}

func (x SimpleSchemaNodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SimpleSchemaNodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes[6].Descriptor()
}

func (SimpleSchemaNodeType) Type() protoreflect.EnumType {
	return &file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes[6]
}

func (x SimpleSchemaNodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SimpleSchemaNodeType.Descriptor instead.
func (SimpleSchemaNodeType) EnumDescriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{6}
}

type FilterPublicPrivate int32

const (
	FilterPublicPrivate_FILTER_PUBLIC_PRIVATE_UNSPECIFIED FilterPublicPrivate = 0
	FilterPublicPrivate_ONLY_PUBLIC                       FilterPublicPrivate = 1
	FilterPublicPrivate_ONLY_PRIVATE                      FilterPublicPrivate = 2
)

// Enum value maps for FilterPublicPrivate.
var (
	FilterPublicPrivate_name = map[int32]string{
		0: "FILTER_PUBLIC_PRIVATE_UNSPECIFIED",
		1: "ONLY_PUBLIC",
		2: "ONLY_PRIVATE",
	}
	FilterPublicPrivate_value = map[string]int32{
		"FILTER_PUBLIC_PRIVATE_UNSPECIFIED": 0,
		"ONLY_PUBLIC":                       1,
		"ONLY_PRIVATE":                      2,
	}
)

func (x FilterPublicPrivate) Enum() *FilterPublicPrivate {
	p := new(FilterPublicPrivate)
	*p = x
	return p
}

func (x FilterPublicPrivate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterPublicPrivate) Descriptor() protoreflect.EnumDescriptor {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes[7].Descriptor()
}

func (FilterPublicPrivate) Type() protoreflect.EnumType {
	return &file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes[7]
}

func (x FilterPublicPrivate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterPublicPrivate.Descriptor instead.
func (FilterPublicPrivate) EnumDescriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{7}
}

type StatisticalDataType int32

const (
	StatisticalDataType_STATISTICAL_DATA_TYPE_UNSPECIFIED StatisticalDataType = 0
	StatisticalDataType_NOMINAL                           StatisticalDataType = 1
	StatisticalDataType_ORDINAL                           StatisticalDataType = 2
	StatisticalDataType_NUMERICAL                         StatisticalDataType = 3
)

// Enum value maps for StatisticalDataType.
var (
	StatisticalDataType_name = map[int32]string{
		0: "STATISTICAL_DATA_TYPE_UNSPECIFIED",
		1: "NOMINAL",
		2: "ORDINAL",
		3: "NUMERICAL",
	}
	StatisticalDataType_value = map[string]int32{
		"STATISTICAL_DATA_TYPE_UNSPECIFIED": 0,
		"NOMINAL":                           1,
		"ORDINAL":                           2,
		"NUMERICAL":                         3,
	}
)

func (x StatisticalDataType) Enum() *StatisticalDataType {
	p := new(StatisticalDataType)
	*p = x
	return p
}

func (x StatisticalDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatisticalDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes[8].Descriptor()
}

func (StatisticalDataType) Type() protoreflect.EnumType {
	return &file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes[8]
}

func (x StatisticalDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatisticalDataType.Descriptor instead.
func (StatisticalDataType) EnumDescriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{8}
}

type SubscriptionPlan int32

const (
	SubscriptionPlan_SUBSCRIPTION_PLAN_UNSPECIFIED SubscriptionPlan = 0
	SubscriptionPlan_FREE                          SubscriptionPlan = 1
	SubscriptionPlan_BUSINESS                      SubscriptionPlan = 2
	SubscriptionPlan_SELF_HOSTED                   SubscriptionPlan = 3
	SubscriptionPlan_AWS_MARKETPLACE_PAYG          SubscriptionPlan = 4
	SubscriptionPlan_AWS_MARKETPLACE_BYOL          SubscriptionPlan = 5
)

// Enum value maps for SubscriptionPlan.
var (
	SubscriptionPlan_name = map[int32]string{
		0: "SUBSCRIPTION_PLAN_UNSPECIFIED",
		1: "FREE",
		2: "BUSINESS",
		3: "SELF_HOSTED",
		4: "AWS_MARKETPLACE_PAYG",
		5: "AWS_MARKETPLACE_BYOL",
	}
	SubscriptionPlan_value = map[string]int32{
		"SUBSCRIPTION_PLAN_UNSPECIFIED": 0,
		"FREE":                          1,
		"BUSINESS":                      2,
		"SELF_HOSTED":                   3,
		"AWS_MARKETPLACE_PAYG":          4,
		"AWS_MARKETPLACE_BYOL":          5,
	}
)

func (x SubscriptionPlan) Enum() *SubscriptionPlan {
	p := new(SubscriptionPlan)
	*p = x
	return p
}

func (x SubscriptionPlan) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubscriptionPlan) Descriptor() protoreflect.EnumDescriptor {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes[9].Descriptor()
}

func (SubscriptionPlan) Type() protoreflect.EnumType {
	return &file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes[9]
}

func (x SubscriptionPlan) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubscriptionPlan.Descriptor instead.
func (SubscriptionPlan) EnumDescriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{9}
}

type DatabaseType int32

const (
	DatabaseType_DATABASE_TYPE_UNSPECIFIED DatabaseType = 0
	DatabaseType_POSTGRES                  DatabaseType = 1
)

// Enum value maps for DatabaseType.
var (
	DatabaseType_name = map[int32]string{
		0: "DATABASE_TYPE_UNSPECIFIED",
		1: "POSTGRES",
	}
	DatabaseType_value = map[string]int32{
		"DATABASE_TYPE_UNSPECIFIED": 0,
		"POSTGRES":                  1,
	}
)

func (x DatabaseType) Enum() *DatabaseType {
	p := new(DatabaseType)
	*p = x
	return p
}

func (x DatabaseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DatabaseType) Descriptor() protoreflect.EnumDescriptor {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes[10].Descriptor()
}

func (DatabaseType) Type() protoreflect.EnumType {
	return &file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes[10]
}

func (x DatabaseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DatabaseType.Descriptor instead.
func (DatabaseType) EnumDescriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{10}
}

type Policy_State int32

const (
	Policy_STATE_UNSPECIFIED Policy_State = 0
	Policy_STATE_DRAFT       Policy_State = 1
	Policy_STATE_ACTIVE      Policy_State = 2
	Policy_STATE_ARCHIVED    Policy_State = 3
)

// Enum value maps for Policy_State.
var (
	Policy_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "STATE_DRAFT",
		2: "STATE_ACTIVE",
		3: "STATE_ARCHIVED",
	}
	Policy_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"STATE_DRAFT":       1,
		"STATE_ACTIVE":      2,
		"STATE_ARCHIVED":    3,
	}
)

func (x Policy_State) Enum() *Policy_State {
	p := new(Policy_State)
	*p = x
	return p
}

func (x Policy_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Policy_State) Descriptor() protoreflect.EnumDescriptor {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes[11].Descriptor()
}

func (Policy_State) Type() protoreflect.EnumType {
	return &file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes[11]
}

func (x Policy_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Policy_State.Descriptor instead.
func (Policy_State) EnumDescriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{35, 0}
}

type Schema_State int32

const (
	Schema_STATE_UNSPECIFIED Schema_State = 0
	//
	// This schema is valid and complete, but has not been accepted yet, can still be modified and also deleted.
	Schema_DRAFT Schema_State = 1
	//
	// This schema is valid and complete can be used for events and batch jobs. It cannot be modified or deleted.
	Schema_ACTIVE Schema_State = 2
	//
	// This schema is valid and complete has been active, but no more events can be sent using this schema. In-flight events are still processed.
	Schema_ARCHIVED Schema_State = 3
	//
	// This schema is in review. It can be used once it has been approved.
	Schema_IN_REVIEW Schema_State = 4
	//
	// This schema is still under construction.
	Schema_INCOMPLETE Schema_State = 5
	//
	// This schema is approved and when activated can be used used for events and batch jobs. It cannot be modified or deleted.
	Schema_APPROVED Schema_State = 6
)

// Enum value maps for Schema_State.
var (
	Schema_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "DRAFT",
		2: "ACTIVE",
		3: "ARCHIVED",
		4: "IN_REVIEW",
		5: "INCOMPLETE",
		6: "APPROVED",
	}
	Schema_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"DRAFT":             1,
		"ACTIVE":            2,
		"ARCHIVED":          3,
		"IN_REVIEW":         4,
		"INCOMPLETE":        5,
		"APPROVED":          6,
	}
)

func (x Schema_State) Enum() *Schema_State {
	p := new(Schema_State)
	*p = x
	return p
}

func (x Schema_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Schema_State) Descriptor() protoreflect.EnumDescriptor {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes[12].Descriptor()
}

func (Schema_State) Type() protoreflect.EnumType {
	return &file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes[12]
}

func (x Schema_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Schema_State.Descriptor instead.
func (Schema_State) EnumDescriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{38, 0}
}

type EventContract_State int32

const (
	EventContract_STATE_UNSPECIFIED EventContract_State = 0
	//
	// This event contract is valid and complete, but has not been accepted yet, can still be modified and also deleted.
	EventContract_DRAFT EventContract_State = 1
	//
	// This event contract is valid and complete can be used for events and batch jobs. It cannot be modified or deleted.
	EventContract_ACTIVE EventContract_State = 2
	//
	// This event contract is valid and complete has been active, but no more events can be sent using this schema. In-flight events are still processed.
	EventContract_ARCHIVED EventContract_State = 3
	//
	// This event contract is in review. It can be used once it has been approved.
	EventContract_IN_REVIEW EventContract_State = 4
	//
	// This event contract is still under construction.
	EventContract_INCOMPLETE EventContract_State = 5
)

// Enum value maps for EventContract_State.
var (
	EventContract_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "DRAFT",
		2: "ACTIVE",
		3: "ARCHIVED",
		4: "IN_REVIEW",
		5: "INCOMPLETE",
	}
	EventContract_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"DRAFT":             1,
		"ACTIVE":            2,
		"ARCHIVED":          3,
		"IN_REVIEW":         4,
		"INCOMPLETE":        5,
	}
)

func (x EventContract_State) Enum() *EventContract_State {
	p := new(EventContract_State)
	*p = x
	return p
}

func (x EventContract_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventContract_State) Descriptor() protoreflect.EnumDescriptor {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes[13].Descriptor()
}

func (EventContract_State) Type() protoreflect.EnumType {
	return &file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes[13]
}

func (x EventContract_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventContract_State.Descriptor instead.
func (EventContract_State) EnumDescriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{42, 0}
}

type DataContract_State int32

const (
	DataContract_STATE_UNSPECIFIED DataContract_State = 0
	//
	// This data contract is valid and complete, but has not been accepted yet, can still be modified and also deleted.
	DataContract_DRAFT DataContract_State = 1
	//
	// This data contract is in review. It can be used once it has been approved.
	DataContract_IN_REVIEW DataContract_State = 2
	//
	// This data contract is valid and complete can be used for events and batch jobs. It cannot be modified or deleted.
	DataContract_ACTIVE DataContract_State = 3
	//
	// This data contract is valid and complete has been active, but no more events can be sent using this data contract. In-flight events are still processed.
	DataContract_ARCHIVED DataContract_State = 4
	//
	// This data contract is still under construction.
	DataContract_INCOMPLETE DataContract_State = 5
	//
	// This data contract is approved and when activated can be used used for events and batch jobs. It cannot be modified or deleted.
	DataContract_APPROVED DataContract_State = 6
)

// Enum value maps for DataContract_State.
var (
	DataContract_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "DRAFT",
		2: "IN_REVIEW",
		3: "ACTIVE",
		4: "ARCHIVED",
		5: "INCOMPLETE",
		6: "APPROVED",
	}
	DataContract_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"DRAFT":             1,
		"IN_REVIEW":         2,
		"ACTIVE":            3,
		"ARCHIVED":          4,
		"INCOMPLETE":        5,
		"APPROVED":          6,
	}
)

func (x DataContract_State) Enum() *DataContract_State {
	p := new(DataContract_State)
	*p = x
	return p
}

func (x DataContract_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataContract_State) Descriptor() protoreflect.EnumDescriptor {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes[14].Descriptor()
}

func (DataContract_State) Type() protoreflect.EnumType {
	return &file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes[14]
}

func (x DataContract_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataContract_State.Descriptor instead.
func (DataContract_State) EnumDescriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{65, 0}
}

type FieldMetadata_NullHandlingConfig_NullHandlingType int32

const (
	FieldMetadata_NullHandlingConfig_NULL_HANDLING_TYPE_UNSPECIFIED FieldMetadata_NullHandlingConfig_NullHandlingType = 0
	FieldMetadata_NullHandlingConfig_DROP_RECORD                    FieldMetadata_NullHandlingConfig_NullHandlingType = 1
	FieldMetadata_NullHandlingConfig_DEFAULT_VALUE                  FieldMetadata_NullHandlingConfig_NullHandlingType = 2
)

// Enum value maps for FieldMetadata_NullHandlingConfig_NullHandlingType.
var (
	FieldMetadata_NullHandlingConfig_NullHandlingType_name = map[int32]string{
		0: "NULL_HANDLING_TYPE_UNSPECIFIED",
		1: "DROP_RECORD",
		2: "DEFAULT_VALUE",
	}
	FieldMetadata_NullHandlingConfig_NullHandlingType_value = map[string]int32{
		"NULL_HANDLING_TYPE_UNSPECIFIED": 0,
		"DROP_RECORD":                    1,
		"DEFAULT_VALUE":                  2,
	}
)

func (x FieldMetadata_NullHandlingConfig_NullHandlingType) Enum() *FieldMetadata_NullHandlingConfig_NullHandlingType {
	p := new(FieldMetadata_NullHandlingConfig_NullHandlingType)
	*p = x
	return p
}

func (x FieldMetadata_NullHandlingConfig_NullHandlingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FieldMetadata_NullHandlingConfig_NullHandlingType) Descriptor() protoreflect.EnumDescriptor {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes[15].Descriptor()
}

func (FieldMetadata_NullHandlingConfig_NullHandlingType) Type() protoreflect.EnumType {
	return &file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes[15]
}

func (x FieldMetadata_NullHandlingConfig_NullHandlingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FieldMetadata_NullHandlingConfig_NullHandlingType.Descriptor instead.
func (FieldMetadata_NullHandlingConfig_NullHandlingType) EnumDescriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{66, 1, 0}
}

type Project_State int32

const (
	Project_STATE_UNSPECIFIED Project_State = 0
	Project_OPERATIONAL       Project_State = 1
	Project_PENDING_DELETION  Project_State = 2
)

// Enum value maps for Project_State.
var (
	Project_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "OPERATIONAL",
		2: "PENDING_DELETION",
	}
	Project_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"OPERATIONAL":       1,
		"PENDING_DELETION":  2,
	}
)

func (x Project_State) Enum() *Project_State {
	p := new(Project_State)
	*p = x
	return p
}

func (x Project_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Project_State) Descriptor() protoreflect.EnumDescriptor {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes[16].Descriptor()
}

func (Project_State) Type() protoreflect.EnumType {
	return &file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes[16]
}

func (x Project_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Project_State.Descriptor instead.
func (Project_State) EnumDescriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{68, 0}
}

//
// Streams are source or derived streams depending on whether or not linked_stream is null.
// Key streams are a separate entity in the api.
type Stream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ref *StreamRef `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	// Stream description
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	//
	// consent levels for derived streams
	//
	// constraints:
	// if consent_level_type ==  CUMULATIVE then
	// size = 1
	// endif
	ConsentLevels []int32 `protobuf:"varint,3,rep,packed,name=consent_levels,json=consentLevels,proto3" json:"consent_levels,omitempty"`
	// how event consent-levels are interpreted by decrypters.
	ConsentLevelType ConsentLevelType `protobuf:"varint,4,opt,name=consent_level_type,json=consentLevelType,proto3,enum=strmprivacy.api.entities.v1.ConsentLevelType" json:"consent_level_type,omitempty"`
	// whether or not this stream is enabled.
	Enabled bool `protobuf:"varint,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// stream limits
	Limits *Limits `protobuf:"bytes,6,opt,name=limits,proto3" json:"limits,omitempty"`
	// null for source streams
	LinkedStream string `protobuf:"bytes,7,opt,name=linked_stream,json=linkedStream,proto3" json:"linked_stream,omitempty"`
	// tags are meant for customers to tag their streams
	Tags        []string       `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	Credentials []*Credentials `protobuf:"bytes,9,rep,name=credentials,proto3" json:"credentials,omitempty"`
	// field masking is defined per OUTPUT stream and event-contract ref. combination
	//
	// The default empty map means no masking. Otherwise, the algorithm in the decrypter is as follows.
	//
	// A source stream is (partially) decrypted, and events that don't have enough permissions are dropped.
	// the event contract ref string is used to find a MaskedFields instance.
	// if present, for all field patterns in the MaskedFields instance, the hash with the specified seed is applied.
	MaskedFields *MaskedFields `protobuf:"bytes,10,opt,name=masked_fields,json=maskedFields,proto3" json:"masked_fields,omitempty"`
	// Kafka topic of the stream. Deprecated in favor of topic in message ExtendedStream
	//
	// Deprecated: Do not use.
	KafkaTopic string `protobuf:"bytes,11,opt,name=kafka_topic,json=kafkaTopic,proto3" json:"kafka_topic,omitempty"`
	// The id of the policy that should be applied to this stream's data
	PolicyId string `protobuf:"bytes,12,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
}

func (x *Stream) Reset() {
	*x = Stream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stream) ProtoMessage() {}

func (x *Stream) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stream.ProtoReflect.Descriptor instead.
func (*Stream) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{0}
}

func (x *Stream) GetRef() *StreamRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *Stream) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Stream) GetConsentLevels() []int32 {
	if x != nil {
		return x.ConsentLevels
	}
	return nil
}

func (x *Stream) GetConsentLevelType() ConsentLevelType {
	if x != nil {
		return x.ConsentLevelType
	}
	return ConsentLevelType_CONSENT_LEVEL_TYPE_UNSPECIFIED
}

func (x *Stream) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Stream) GetLimits() *Limits {
	if x != nil {
		return x.Limits
	}
	return nil
}

func (x *Stream) GetLinkedStream() string {
	if x != nil {
		return x.LinkedStream
	}
	return ""
}

func (x *Stream) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Stream) GetCredentials() []*Credentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *Stream) GetMaskedFields() *MaskedFields {
	if x != nil {
		return x.MaskedFields
	}
	return nil
}

// Deprecated: Do not use.
func (x *Stream) GetKafkaTopic() string {
	if x != nil {
		return x.KafkaTopic
	}
	return ""
}

func (x *Stream) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

type ExtendedStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stream *Stream `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	// The Kafka Topic name that the data is published to
	Topic string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	// The UUID identifier of the Stream, used in Kubernetes
	Uuid string `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// whether or not a key stream EXISTS for this stream.
	// So when this flag is true, there are TWO topics associated with this stream.
	// TODO: Rename to has_key_stream, requires many updates in api gateway.
	KeyStream bool `protobuf:"varint,4,opt,name=key_stream,json=keyStream,proto3" json:"key_stream,omitempty"`
}

func (x *ExtendedStream) Reset() {
	*x = ExtendedStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtendedStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendedStream) ProtoMessage() {}

func (x *ExtendedStream) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendedStream.ProtoReflect.Descriptor instead.
func (*ExtendedStream) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{1}
}

func (x *ExtendedStream) GetStream() *Stream {
	if x != nil {
		return x.Stream
	}
	return nil
}

func (x *ExtendedStream) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *ExtendedStream) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ExtendedStream) GetKeyStream() bool {
	if x != nil {
		return x.KeyStream
	}
	return false
}

type ExtendedStreamGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceStream   *ExtendedStream   `protobuf:"bytes,1,opt,name=source_stream,json=sourceStream,proto3" json:"source_stream,omitempty"`
	DerivedStreams []*ExtendedStream `protobuf:"bytes,2,rep,name=derived_streams,json=derivedStreams,proto3" json:"derived_streams,omitempty"`
}

func (x *ExtendedStreamGroup) Reset() {
	*x = ExtendedStreamGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtendedStreamGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendedStreamGroup) ProtoMessage() {}

func (x *ExtendedStreamGroup) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendedStreamGroup.ProtoReflect.Descriptor instead.
func (*ExtendedStreamGroup) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{2}
}

func (x *ExtendedStreamGroup) GetSourceStream() *ExtendedStream {
	if x != nil {
		return x.SourceStream
	}
	return nil
}

func (x *ExtendedStreamGroup) GetDerivedStreams() []*ExtendedStream {
	if x != nil {
		return x.DerivedStreams
	}
	return nil
}

type MaskedFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Default Murmurhash3 if empty
	HashType string `protobuf:"bytes,1,opt,name=hash_type,json=hashType,proto3" json:"hash_type,omitempty"`
	// hashing seed
	Seed string `protobuf:"bytes,2,opt,name=seed,proto3" json:"seed,omitempty"`
	//
	// map of event-contract-ref vs field patterns
	//
	// constraints:
	// data-contract-refs should be existing data contracts
	// field_patterns should be valid values (checked by events-core)
	// the field_patterns list should have no duplicates.
	FieldPatterns map[string]*MaskedFields_PatternList `protobuf:"bytes,3,rep,name=field_patterns,json=fieldPatterns,proto3" json:"field_patterns,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MaskedFields) Reset() {
	*x = MaskedFields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaskedFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaskedFields) ProtoMessage() {}

func (x *MaskedFields) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaskedFields.ProtoReflect.Descriptor instead.
func (*MaskedFields) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{3}
}

func (x *MaskedFields) GetHashType() string {
	if x != nil {
		return x.HashType
	}
	return ""
}

func (x *MaskedFields) GetSeed() string {
	if x != nil {
		return x.Seed
	}
	return ""
}

func (x *MaskedFields) GetFieldPatterns() map[string]*MaskedFields_PatternList {
	if x != nil {
		return x.FieldPatterns
	}
	return nil
}

type Limits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// filled in from customer profile
	EventRate int64 `protobuf:"varint,1,opt,name=event_rate,json=eventRate,proto3" json:"event_rate,omitempty"`
	// filled in from customer profile
	EventCount int64 `protobuf:"varint,2,opt,name=event_count,json=eventCount,proto3" json:"event_count,omitempty"`
}

func (x *Limits) Reset() {
	*x = Limits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Limits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Limits) ProtoMessage() {}

func (x *Limits) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Limits.ProtoReflect.Descriptor instead.
func (*Limits) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{4}
}

func (x *Limits) GetEventRate() int64 {
	if x != nil {
		return x.EventRate
	}
	return 0
}

func (x *Limits) GetEventCount() int64 {
	if x != nil {
		return x.EventCount
	}
	return 0
}

//
//A Stream of key-link, encryption-key, policy-id messages created from a source stream
//with the same `name`.
type KeyStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ref *KeyStreamRef `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	// -- TODO: this field is not used --
	//
	// Deprecated: Do not use.
	Status     string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	KafkaTopic string `protobuf:"bytes,3,opt,name=kafka_topic,json=kafkaTopic,proto3" json:"kafka_topic,omitempty"`
}

func (x *KeyStream) Reset() {
	*x = KeyStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyStream) ProtoMessage() {}

func (x *KeyStream) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyStream.ProtoReflect.Descriptor instead.
func (*KeyStream) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{5}
}

func (x *KeyStream) GetRef() *KeyStreamRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

// Deprecated: Do not use.
func (x *KeyStream) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *KeyStream) GetKafkaTopic() string {
	if x != nil {
		return x.KafkaTopic
	}
	return ""
}

// refers to a event stream.
type StreamRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	BillingId string `protobuf:"bytes,1,opt,name=billing_id,json=billingId,proto3" json:"billing_id,omitempty"`
	//
	// the name of the stream
	// constraints: generic name
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProjectId string `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *StreamRef) Reset() {
	*x = StreamRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamRef) ProtoMessage() {}

func (x *StreamRef) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamRef.ProtoReflect.Descriptor instead.
func (*StreamRef) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{6}
}

// Deprecated: Do not use.
func (x *StreamRef) GetBillingId() string {
	if x != nil {
		return x.BillingId
	}
	return ""
}

func (x *StreamRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StreamRef) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

// refers to a key stream.
type KeyStreamRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	BillingId string `protobuf:"bytes,1,opt,name=billing_id,json=billingId,proto3" json:"billing_id,omitempty"`
	// the name of the stream
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProjectId string `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *KeyStreamRef) Reset() {
	*x = KeyStreamRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyStreamRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyStreamRef) ProtoMessage() {}

func (x *KeyStreamRef) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyStreamRef.ProtoReflect.Descriptor instead.
func (*KeyStreamRef) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{7}
}

// Deprecated: Do not use.
func (x *KeyStreamRef) GetBillingId() string {
	if x != nil {
		return x.BillingId
	}
	return ""
}

func (x *KeyStreamRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KeyStreamRef) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

//
//Credentials to produce to the event-gateway, or to consume from egress.
type Credentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BillingId string `protobuf:"bytes,1,opt,name=billing_id,json=billingId,proto3" json:"billing_id,omitempty"`
	ClientId  string `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// as this property is secret, it is not always returned
	ClientSecret string `protobuf:"bytes,3,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	ProjectId    string `protobuf:"bytes,4,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *Credentials) Reset() {
	*x = Credentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Credentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credentials) ProtoMessage() {}

func (x *Credentials) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credentials.ProtoReflect.Descriptor instead.
func (*Credentials) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{8}
}

func (x *Credentials) GetBillingId() string {
	if x != nil {
		return x.BillingId
	}
	return ""
}

func (x *Credentials) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *Credentials) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *Credentials) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

// the sink config used by the batch exporters.
// Deprecated: Do not use.
type Sink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ref      *SinkRef `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	SinkType SinkType `protobuf:"varint,2,opt,name=sink_type,json=sinkType,proto3,enum=strmprivacy.api.entities.v1.SinkType" json:"sink_type,omitempty"`
	// Types that are assignable to Config:
	//	*Sink_Bucket
	Config isSink_Config `protobuf_oneof:"config"`
}

func (x *Sink) Reset() {
	*x = Sink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sink) ProtoMessage() {}

func (x *Sink) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sink.ProtoReflect.Descriptor instead.
func (*Sink) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{9}
}

func (x *Sink) GetRef() *SinkRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *Sink) GetSinkType() SinkType {
	if x != nil {
		return x.SinkType
	}
	return SinkType_SINK_TYPE_UNSPECIFIED
}

func (m *Sink) GetConfig() isSink_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *Sink) GetBucket() *BucketConfig {
	if x, ok := x.GetConfig().(*Sink_Bucket); ok {
		return x.Bucket
	}
	return nil
}

type isSink_Config interface {
	isSink_Config()
}

type Sink_Bucket struct {
	Bucket *BucketConfig `protobuf:"bytes,4,opt,name=bucket,proto3,oneof"`
}

func (*Sink_Bucket) isSink_Config() {}

// Deprecated: Do not use.
type SinkRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BillingId string `protobuf:"bytes,1,opt,name=billing_id,json=billingId,proto3" json:"billing_id,omitempty"`
	// constraints: generic name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SinkRef) Reset() {
	*x = SinkRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SinkRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SinkRef) ProtoMessage() {}

func (x *SinkRef) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SinkRef.ProtoReflect.Descriptor instead.
func (*SinkRef) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{10}
}

func (x *SinkRef) GetBillingId() string {
	if x != nil {
		return x.BillingId
	}
	return ""
}

func (x *SinkRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type BucketConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// constraints: validated via access check
	BucketName string `protobuf:"bytes,4,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	// The credentials that are to be used to access the sink target (e.g. S3 or Google Cloud Storage)
	Credentials string `protobuf:"bytes,5,opt,name=credentials,proto3" json:"credentials,omitempty"`
	// The ARN of the role to assume.
	// If present, start an AssumeRole flow to get temporary credentials in another AWS account.
	// This is used when the customer has a separate users account.
	// Default there is no assumed role.
	AssumeRoleArn string `protobuf:"bytes,6,opt,name=assume_role_arn,json=assumeRoleArn,proto3" json:"assume_role_arn,omitempty"`
}

func (x *BucketConfig) Reset() {
	*x = BucketConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketConfig) ProtoMessage() {}

func (x *BucketConfig) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketConfig.ProtoReflect.Descriptor instead.
func (*BucketConfig) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{11}
}

func (x *BucketConfig) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *BucketConfig) GetCredentials() string {
	if x != nil {
		return x.Credentials
	}
	return ""
}

func (x *BucketConfig) GetAssumeRoleArn() string {
	if x != nil {
		return x.AssumeRoleArn
	}
	return ""
}

type DataConnector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ref *DataConnectorRef `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	// Types that are assignable to Location:
	//	*DataConnector_S3Bucket
	//	*DataConnector_GoogleCloudStorageBucket
	//	*DataConnector_AzureBlobStorageContainer
	//	*DataConnector_JdbcConfig
	Location          isDataConnector_Location        `protobuf_oneof:"location"`
	Uuid              string                          `protobuf:"bytes,5,opt,name=uuid,proto3" json:"uuid,omitempty"`
	DependentEntities *DataConnectorDependentEntities `protobuf:"bytes,6,opt,name=dependent_entities,json=dependentEntities,proto3" json:"dependent_entities,omitempty"`
}

func (x *DataConnector) Reset() {
	*x = DataConnector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataConnector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataConnector) ProtoMessage() {}

func (x *DataConnector) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataConnector.ProtoReflect.Descriptor instead.
func (*DataConnector) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{12}
}

func (x *DataConnector) GetRef() *DataConnectorRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (m *DataConnector) GetLocation() isDataConnector_Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (x *DataConnector) GetS3Bucket() *AwsS3BucketLocation {
	if x, ok := x.GetLocation().(*DataConnector_S3Bucket); ok {
		return x.S3Bucket
	}
	return nil
}

func (x *DataConnector) GetGoogleCloudStorageBucket() *GoogleCloudStorageBucketLocation {
	if x, ok := x.GetLocation().(*DataConnector_GoogleCloudStorageBucket); ok {
		return x.GoogleCloudStorageBucket
	}
	return nil
}

func (x *DataConnector) GetAzureBlobStorageContainer() *AzureBlobStorageContainerLocation {
	if x, ok := x.GetLocation().(*DataConnector_AzureBlobStorageContainer); ok {
		return x.AzureBlobStorageContainer
	}
	return nil
}

func (x *DataConnector) GetJdbcConfig() *JdbcConfig {
	if x, ok := x.GetLocation().(*DataConnector_JdbcConfig); ok {
		return x.JdbcConfig
	}
	return nil
}

func (x *DataConnector) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *DataConnector) GetDependentEntities() *DataConnectorDependentEntities {
	if x != nil {
		return x.DependentEntities
	}
	return nil
}

type isDataConnector_Location interface {
	isDataConnector_Location()
}

type DataConnector_S3Bucket struct {
	S3Bucket *AwsS3BucketLocation `protobuf:"bytes,2,opt,name=s3_bucket,json=s3Bucket,proto3,oneof"`
}

type DataConnector_GoogleCloudStorageBucket struct {
	GoogleCloudStorageBucket *GoogleCloudStorageBucketLocation `protobuf:"bytes,3,opt,name=google_cloud_storage_bucket,json=googleCloudStorageBucket,proto3,oneof"`
}

type DataConnector_AzureBlobStorageContainer struct {
	AzureBlobStorageContainer *AzureBlobStorageContainerLocation `protobuf:"bytes,4,opt,name=azure_blob_storage_container,json=azureBlobStorageContainer,proto3,oneof"`
}

type DataConnector_JdbcConfig struct {
	JdbcConfig *JdbcConfig `protobuf:"bytes,7,opt,name=jdbc_config,json=jdbcConfig,proto3,oneof"`
}

func (*DataConnector_S3Bucket) isDataConnector_Location() {}

func (*DataConnector_GoogleCloudStorageBucket) isDataConnector_Location() {}

func (*DataConnector_AzureBlobStorageContainer) isDataConnector_Location() {}

func (*DataConnector_JdbcConfig) isDataConnector_Location() {}

type DataConnectorRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	BillingId string `protobuf:"bytes,1,opt,name=billing_id,json=billingId,proto3" json:"billing_id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProjectId string `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *DataConnectorRef) Reset() {
	*x = DataConnectorRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataConnectorRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataConnectorRef) ProtoMessage() {}

func (x *DataConnectorRef) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataConnectorRef.ProtoReflect.Descriptor instead.
func (*DataConnectorRef) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{13}
}

// Deprecated: Do not use.
func (x *DataConnectorRef) GetBillingId() string {
	if x != nil {
		return x.BillingId
	}
	return ""
}

func (x *DataConnectorRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DataConnectorRef) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type DataConnectorDependentEntities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchExporters            []*BatchExporter            `protobuf:"bytes,1,rep,name=batch_exporters,json=batchExporters,proto3" json:"batch_exporters,omitempty"`
	BatchJobs                 []*BatchJob                 `protobuf:"bytes,2,rep,name=batch_jobs,json=batchJobs,proto3" json:"batch_jobs,omitempty"`
	MicroAggregationBatchJobs []*MicroAggregationBatchJob `protobuf:"bytes,3,rep,name=micro_aggregation_batch_jobs,json=microAggregationBatchJobs,proto3" json:"micro_aggregation_batch_jobs,omitempty"`
}

func (x *DataConnectorDependentEntities) Reset() {
	*x = DataConnectorDependentEntities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataConnectorDependentEntities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataConnectorDependentEntities) ProtoMessage() {}

func (x *DataConnectorDependentEntities) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataConnectorDependentEntities.ProtoReflect.Descriptor instead.
func (*DataConnectorDependentEntities) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{14}
}

func (x *DataConnectorDependentEntities) GetBatchExporters() []*BatchExporter {
	if x != nil {
		return x.BatchExporters
	}
	return nil
}

func (x *DataConnectorDependentEntities) GetBatchJobs() []*BatchJob {
	if x != nil {
		return x.BatchJobs
	}
	return nil
}

func (x *DataConnectorDependentEntities) GetMicroAggregationBatchJobs() []*MicroAggregationBatchJob {
	if x != nil {
		return x.MicroAggregationBatchJobs
	}
	return nil
}

type AwsS3BucketLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (-- api-linter: core::0122::name-suffix=disabled
	//     aip.dev/not-precedent: We refer to a bucket name. --)
	BucketName string `protobuf:"bytes,1,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	// The AWS IAM credentials that give access to this bucket, in JSON format as returned by the AWS CLI. This means a
	// JSON with at least one property: "AccessKey", which contains at least the two properties: "AccessKeyId" and
	// "SecretAccessKey".
	Credentials string `protobuf:"bytes,2,opt,name=credentials,proto3" json:"credentials,omitempty"`
	// The ARN of the role to assume.
	// If present, start an AssumeRole flow to get temporary credentials in another AWS account.
	// This is used when the customer has a separate users account.
	// Default there is no assumed role.
	AssumeRoleArn string `protobuf:"bytes,3,opt,name=assume_role_arn,json=assumeRoleArn,proto3" json:"assume_role_arn,omitempty"`
}

func (x *AwsS3BucketLocation) Reset() {
	*x = AwsS3BucketLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsS3BucketLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsS3BucketLocation) ProtoMessage() {}

func (x *AwsS3BucketLocation) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsS3BucketLocation.ProtoReflect.Descriptor instead.
func (*AwsS3BucketLocation) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{15}
}

func (x *AwsS3BucketLocation) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *AwsS3BucketLocation) GetCredentials() string {
	if x != nil {
		return x.Credentials
	}
	return ""
}

func (x *AwsS3BucketLocation) GetAssumeRoleArn() string {
	if x != nil {
		return x.AssumeRoleArn
	}
	return ""
}

type GoogleCloudStorageBucketLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (-- api-linter: core::0122::name-suffix=disabled
	//     aip.dev/not-precedent: We refer to a bucket name. --)
	BucketName string `protobuf:"bytes,1,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	// The Google Cloud Service Account credentials JSON that is used to access the Google Cloud Storage bucket.
	// We do not support credentials in P12 format.
	Credentials string `protobuf:"bytes,2,opt,name=credentials,proto3" json:"credentials,omitempty"`
}

func (x *GoogleCloudStorageBucketLocation) Reset() {
	*x = GoogleCloudStorageBucketLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudStorageBucketLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudStorageBucketLocation) ProtoMessage() {}

func (x *GoogleCloudStorageBucketLocation) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudStorageBucketLocation.ProtoReflect.Descriptor instead.
func (*GoogleCloudStorageBucketLocation) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{16}
}

func (x *GoogleCloudStorageBucketLocation) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *GoogleCloudStorageBucketLocation) GetCredentials() string {
	if x != nil {
		return x.Credentials
	}
	return ""
}

type AzureBlobStorageContainerLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The base URI of the Azure Storage Account. Typically this is 'https://<your-account-name>.blob.core.windows.net',
	// but Azure users can map this to their own domain or subdomain.
	StorageAccountUri string `protobuf:"bytes,1,opt,name=storage_account_uri,json=storageAccountUri,proto3" json:"storage_account_uri,omitempty"`
	// (-- api-linter: core::0122::name-suffix=disabled
	//     aip.dev/not-precedent: We refer to a container name. --)
	// Name of the Storage Container
	ContainerName string `protobuf:"bytes,2,opt,name=container_name,json=containerName,proto3" json:"container_name,omitempty"`
	// The AAD client secret credential used to acquire a token for the AAD application that has the required
	// permissions on this Blob Storage Container.
	ClientSecretCredential *AzureClientSecretCredential `protobuf:"bytes,3,opt,name=client_secret_credential,json=clientSecretCredential,proto3" json:"client_secret_credential,omitempty"`
}

func (x *AzureBlobStorageContainerLocation) Reset() {
	*x = AzureBlobStorageContainerLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AzureBlobStorageContainerLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AzureBlobStorageContainerLocation) ProtoMessage() {}

func (x *AzureBlobStorageContainerLocation) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AzureBlobStorageContainerLocation.ProtoReflect.Descriptor instead.
func (*AzureBlobStorageContainerLocation) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{17}
}

func (x *AzureBlobStorageContainerLocation) GetStorageAccountUri() string {
	if x != nil {
		return x.StorageAccountUri
	}
	return ""
}

func (x *AzureBlobStorageContainerLocation) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *AzureBlobStorageContainerLocation) GetClientSecretCredential() *AzureClientSecretCredential {
	if x != nil {
		return x.ClientSecretCredential
	}
	return nil
}

type AzureClientSecretCredential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Tenant ID of the Azure AD Application.
	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// Client ID of the Azure AD Application.
	ClientId string `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// Client secret to use for authentication.
	ClientSecret string `protobuf:"bytes,3,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
}

func (x *AzureClientSecretCredential) Reset() {
	*x = AzureClientSecretCredential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AzureClientSecretCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AzureClientSecretCredential) ProtoMessage() {}

func (x *AzureClientSecretCredential) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AzureClientSecretCredential.ProtoReflect.Descriptor instead.
func (*AzureClientSecretCredential) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{18}
}

func (x *AzureClientSecretCredential) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *AzureClientSecretCredential) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *AzureClientSecretCredential) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

type JdbcConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username     string       `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password     string       `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	DatabaseType DatabaseType `protobuf:"varint,3,opt,name=database_type,json=databaseType,proto3,enum=strmprivacy.api.entities.v1.DatabaseType" json:"database_type,omitempty"`
	Host         string       `protobuf:"bytes,4,opt,name=host,proto3" json:"host,omitempty"`
	Port         int32        `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	Database     string       `protobuf:"bytes,6,opt,name=database,proto3" json:"database,omitempty"`
}

func (x *JdbcConfig) Reset() {
	*x = JdbcConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JdbcConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JdbcConfig) ProtoMessage() {}

func (x *JdbcConfig) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JdbcConfig.ProtoReflect.Descriptor instead.
func (*JdbcConfig) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{19}
}

func (x *JdbcConfig) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *JdbcConfig) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *JdbcConfig) GetDatabaseType() DatabaseType {
	if x != nil {
		return x.DatabaseType
	}
	return DatabaseType_DATABASE_TYPE_UNSPECIFIED
}

func (x *JdbcConfig) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *JdbcConfig) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *JdbcConfig) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

type DataType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to DataType:
	//	*DataType_Csv
	DataType isDataType_DataType `protobuf_oneof:"data_type"`
}

func (x *DataType) Reset() {
	*x = DataType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataType) ProtoMessage() {}

func (x *DataType) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataType.ProtoReflect.Descriptor instead.
func (*DataType) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{20}
}

func (m *DataType) GetDataType() isDataType_DataType {
	if m != nil {
		return m.DataType
	}
	return nil
}

func (x *DataType) GetCsv() *CsvConfig {
	if x, ok := x.GetDataType().(*DataType_Csv); ok {
		return x.Csv
	}
	return nil
}

type isDataType_DataType interface {
	isDataType_DataType()
}

type DataType_Csv struct {
	Csv *CsvConfig `protobuf:"bytes,1,opt,name=csv,proto3,oneof"`
}

func (*DataType_Csv) isDataType_DataType() {}

type CsvConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charset string `protobuf:"bytes,1,opt,name=charset,proto3" json:"charset,omitempty"`
}

func (x *CsvConfig) Reset() {
	*x = CsvConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsvConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsvConfig) ProtoMessage() {}

func (x *CsvConfig) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsvConfig.ProtoReflect.Descriptor instead.
func (*CsvConfig) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{21}
}

func (x *CsvConfig) GetCharset() string {
	if x != nil {
		return x.Charset
	}
	return ""
}

//
//A batch exporter.
type BatchExporter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ref *BatchExporterRef `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	// Types that are assignable to StreamOrKeyStreamRef:
	//	*BatchExporter_StreamRef
	//	*BatchExporter_KeyStreamRef
	StreamOrKeyStreamRef isBatchExporter_StreamOrKeyStreamRef `protobuf_oneof:"stream_or_key_stream_ref"`
	// granularity of seconds, nanos is unused
	Interval *durationpb.Duration `protobuf:"bytes,4,opt,name=interval,proto3" json:"interval,omitempty"`
	// (-- api-linter: core::0122::name-suffix=disabled
	//     aip.dev/not-precedent: We refer to the sink by name. --)
	// Deprecated in favor of data_connector_ref
	//
	// Deprecated: Do not use.
	SinkName              string            `protobuf:"bytes,5,opt,name=sink_name,json=sinkName,proto3" json:"sink_name,omitempty"`
	PathPrefix            string            `protobuf:"bytes,6,opt,name=path_prefix,json=pathPrefix,proto3" json:"path_prefix,omitempty"`
	IncludeExistingEvents bool              `protobuf:"varint,7,opt,name=include_existing_events,json=includeExistingEvents,proto3" json:"include_existing_events,omitempty"`
	DataConnectorRef      *DataConnectorRef `protobuf:"bytes,8,opt,name=data_connector_ref,json=dataConnectorRef,proto3" json:"data_connector_ref,omitempty"`
}

func (x *BatchExporter) Reset() {
	*x = BatchExporter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchExporter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchExporter) ProtoMessage() {}

func (x *BatchExporter) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchExporter.ProtoReflect.Descriptor instead.
func (*BatchExporter) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{22}
}

func (x *BatchExporter) GetRef() *BatchExporterRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (m *BatchExporter) GetStreamOrKeyStreamRef() isBatchExporter_StreamOrKeyStreamRef {
	if m != nil {
		return m.StreamOrKeyStreamRef
	}
	return nil
}

func (x *BatchExporter) GetStreamRef() *StreamRef {
	if x, ok := x.GetStreamOrKeyStreamRef().(*BatchExporter_StreamRef); ok {
		return x.StreamRef
	}
	return nil
}

func (x *BatchExporter) GetKeyStreamRef() *KeyStreamRef {
	if x, ok := x.GetStreamOrKeyStreamRef().(*BatchExporter_KeyStreamRef); ok {
		return x.KeyStreamRef
	}
	return nil
}

func (x *BatchExporter) GetInterval() *durationpb.Duration {
	if x != nil {
		return x.Interval
	}
	return nil
}

// Deprecated: Do not use.
func (x *BatchExporter) GetSinkName() string {
	if x != nil {
		return x.SinkName
	}
	return ""
}

func (x *BatchExporter) GetPathPrefix() string {
	if x != nil {
		return x.PathPrefix
	}
	return ""
}

func (x *BatchExporter) GetIncludeExistingEvents() bool {
	if x != nil {
		return x.IncludeExistingEvents
	}
	return false
}

func (x *BatchExporter) GetDataConnectorRef() *DataConnectorRef {
	if x != nil {
		return x.DataConnectorRef
	}
	return nil
}

type isBatchExporter_StreamOrKeyStreamRef interface {
	isBatchExporter_StreamOrKeyStreamRef()
}

type BatchExporter_StreamRef struct {
	StreamRef *StreamRef `protobuf:"bytes,2,opt,name=stream_ref,json=streamRef,proto3,oneof"`
}

type BatchExporter_KeyStreamRef struct {
	KeyStreamRef *KeyStreamRef `protobuf:"bytes,3,opt,name=key_stream_ref,json=keyStreamRef,proto3,oneof"`
}

func (*BatchExporter_StreamRef) isBatchExporter_StreamOrKeyStreamRef() {}

func (*BatchExporter_KeyStreamRef) isBatchExporter_StreamOrKeyStreamRef() {}

type ExtendedBatchExporter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The UUID identifier of the Batch Exporter, used in Kubernetes
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// The Kafka Topic name that the Batch Exporter reads from
	Topic    string         `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	Exporter *BatchExporter `protobuf:"bytes,3,opt,name=exporter,proto3" json:"exporter,omitempty"`
}

func (x *ExtendedBatchExporter) Reset() {
	*x = ExtendedBatchExporter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtendedBatchExporter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendedBatchExporter) ProtoMessage() {}

func (x *ExtendedBatchExporter) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendedBatchExporter.ProtoReflect.Descriptor instead.
func (*ExtendedBatchExporter) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{23}
}

func (x *ExtendedBatchExporter) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ExtendedBatchExporter) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *ExtendedBatchExporter) GetExporter() *BatchExporter {
	if x != nil {
		return x.Exporter
	}
	return nil
}

type BatchExporterRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	BillingId string `protobuf:"bytes,1,opt,name=billing_id,json=billingId,proto3" json:"billing_id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProjectId string `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *BatchExporterRef) Reset() {
	*x = BatchExporterRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchExporterRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchExporterRef) ProtoMessage() {}

func (x *BatchExporterRef) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchExporterRef.ProtoReflect.Descriptor instead.
func (*BatchExporterRef) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{24}
}

// Deprecated: Do not use.
func (x *BatchExporterRef) GetBillingId() string {
	if x != nil {
		return x.BillingId
	}
	return ""
}

func (x *BatchExporterRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BatchExporterRef) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

//
//Currently only our internal shared export cluster.
type KafkaCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ref              *KafkaClusterRef `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	BootstrapServers string           `protobuf:"bytes,2,opt,name=bootstrap_servers,json=bootstrapServers,proto3" json:"bootstrap_servers,omitempty"`
	AuthMechanism    AuthMechanism    `protobuf:"varint,3,opt,name=auth_mechanism,json=authMechanism,proto3,enum=strmprivacy.api.entities.v1.AuthMechanism" json:"auth_mechanism,omitempty"`
	TokenUri         string           `protobuf:"bytes,4,opt,name=token_uri,json=tokenUri,proto3" json:"token_uri,omitempty"`
}

func (x *KafkaCluster) Reset() {
	*x = KafkaCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaCluster) ProtoMessage() {}

func (x *KafkaCluster) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaCluster.ProtoReflect.Descriptor instead.
func (*KafkaCluster) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{25}
}

func (x *KafkaCluster) GetRef() *KafkaClusterRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *KafkaCluster) GetBootstrapServers() string {
	if x != nil {
		return x.BootstrapServers
	}
	return ""
}

func (x *KafkaCluster) GetAuthMechanism() AuthMechanism {
	if x != nil {
		return x.AuthMechanism
	}
	return AuthMechanism_AUTH_MECHANISM_UNSPECIFIED
}

func (x *KafkaCluster) GetTokenUri() string {
	if x != nil {
		return x.TokenUri
	}
	return ""
}

//
//How to refer to a certain Kafka cluster.
type KafkaClusterRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (-- streammachine for the default export cluster --)
	BillingId string `protobuf:"bytes,1,opt,name=billing_id,json=billingId,proto3" json:"billing_id,omitempty"`
	//
	// constraints: generic name constraint
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProjectId string `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *KafkaClusterRef) Reset() {
	*x = KafkaClusterRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaClusterRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaClusterRef) ProtoMessage() {}

func (x *KafkaClusterRef) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaClusterRef.ProtoReflect.Descriptor instead.
func (*KafkaClusterRef) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{26}
}

func (x *KafkaClusterRef) GetBillingId() string {
	if x != nil {
		return x.BillingId
	}
	return ""
}

func (x *KafkaClusterRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KafkaClusterRef) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type KafkaExporter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ref       *KafkaExporterRef    `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	StreamRef *StreamRef           `protobuf:"bytes,2,opt,name=stream_ref,json=streamRef,proto3" json:"stream_ref,omitempty"`
	Target    *KafkaExporterTarget `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	Users     []*KafkaUser         `protobuf:"bytes,4,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *KafkaExporter) Reset() {
	*x = KafkaExporter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaExporter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaExporter) ProtoMessage() {}

func (x *KafkaExporter) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaExporter.ProtoReflect.Descriptor instead.
func (*KafkaExporter) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{27}
}

func (x *KafkaExporter) GetRef() *KafkaExporterRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *KafkaExporter) GetStreamRef() *StreamRef {
	if x != nil {
		return x.StreamRef
	}
	return nil
}

func (x *KafkaExporter) GetTarget() *KafkaExporterTarget {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *KafkaExporter) GetUsers() []*KafkaUser {
	if x != nil {
		return x.Users
	}
	return nil
}

type KafkaExporterRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BillingId string `protobuf:"bytes,1,opt,name=billing_id,json=billingId,proto3" json:"billing_id,omitempty"`
	//
	// default value  <cluster-name>-<stream-name>
	//
	// constraints: generic name constraint
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProjectId string `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *KafkaExporterRef) Reset() {
	*x = KafkaExporterRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaExporterRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaExporterRef) ProtoMessage() {}

func (x *KafkaExporterRef) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaExporterRef.ProtoReflect.Descriptor instead.
func (*KafkaExporterRef) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{28}
}

func (x *KafkaExporterRef) GetBillingId() string {
	if x != nil {
		return x.BillingId
	}
	return ""
}

func (x *KafkaExporterRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KafkaExporterRef) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type KafkaExporterTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// what cluster to produce to
	ClusterRef *KafkaClusterRef `protobuf:"bytes,1,opt,name=cluster_ref,json=clusterRef,proto3" json:"cluster_ref,omitempty"`
	//
	// the topic this exporter produces to
	// constraints: access checked on creation of kafka exporter
	Topic string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	// used to access the target Kafka Cluster in case of OAuth based authentication
	ClientId string `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// used to access the target Kafka Cluster in case of OAuth based authentication
	ClientSecret string `protobuf:"bytes,4,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
}

func (x *KafkaExporterTarget) Reset() {
	*x = KafkaExporterTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaExporterTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaExporterTarget) ProtoMessage() {}

func (x *KafkaExporterTarget) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaExporterTarget.ProtoReflect.Descriptor instead.
func (*KafkaExporterTarget) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{29}
}

func (x *KafkaExporterTarget) GetClusterRef() *KafkaClusterRef {
	if x != nil {
		return x.ClusterRef
	}
	return nil
}

func (x *KafkaExporterTarget) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *KafkaExporterTarget) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *KafkaExporterTarget) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

//
//User credentials to consume from topic produced by Kafka Exporter.
//
//The kafka exporter is linked to a certain cluster, so this entity is bound to a certain
//kafka cluster.
type KafkaUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ref *KafkaUserRef `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	// (-- api-linter: core::0122::name-suffix=disabled
	//     aip.dev/not-precedent: We refer to the kafka exporter by name. --)
	KafkaExporterName string           `protobuf:"bytes,3,opt,name=kafka_exporter_name,json=kafkaExporterName,proto3" json:"kafka_exporter_name,omitempty"`
	Topic             string           `protobuf:"bytes,4,opt,name=topic,proto3" json:"topic,omitempty"`
	ClientId          string           `protobuf:"bytes,5,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret      string           `protobuf:"bytes,6,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	ClusterRef        *KafkaClusterRef `protobuf:"bytes,7,opt,name=cluster_ref,json=clusterRef,proto3" json:"cluster_ref,omitempty"`
}

func (x *KafkaUser) Reset() {
	*x = KafkaUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaUser) ProtoMessage() {}

func (x *KafkaUser) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaUser.ProtoReflect.Descriptor instead.
func (*KafkaUser) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{30}
}

func (x *KafkaUser) GetRef() *KafkaUserRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *KafkaUser) GetKafkaExporterName() string {
	if x != nil {
		return x.KafkaExporterName
	}
	return ""
}

func (x *KafkaUser) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *KafkaUser) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *KafkaUser) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *KafkaUser) GetClusterRef() *KafkaClusterRef {
	if x != nil {
		return x.ClusterRef
	}
	return nil
}

type KafkaUserRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	BillingId string `protobuf:"bytes,1,opt,name=billing_id,json=billingId,proto3" json:"billing_id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProjectId string `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *KafkaUserRef) Reset() {
	*x = KafkaUserRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaUserRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaUserRef) ProtoMessage() {}

func (x *KafkaUserRef) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaUserRef.ProtoReflect.Descriptor instead.
func (*KafkaUserRef) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{31}
}

// Deprecated: Do not use.
func (x *KafkaUserRef) GetBillingId() string {
	if x != nil {
		return x.BillingId
	}
	return ""
}

func (x *KafkaUserRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KafkaUserRef) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type ConsentLevels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsentLevels []int32 `protobuf:"varint,1,rep,packed,name=consent_levels,json=consentLevels,proto3" json:"consent_levels,omitempty"`
}

func (x *ConsentLevels) Reset() {
	*x = ConsentLevels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsentLevels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsentLevels) ProtoMessage() {}

func (x *ConsentLevels) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsentLevels.ProtoReflect.Descriptor instead.
func (*ConsentLevels) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{32}
}

func (x *ConsentLevels) GetConsentLevels() []int32 {
	if x != nil {
		return x.ConsentLevels
	}
	return nil
}

//
//for descriptive purposes only.
type ConsentLevelMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ref *ConsentLevelMappingRef `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	//
	// some text like 'analytics'
	// constraints: generic name constraint
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ConsentLevelMapping) Reset() {
	*x = ConsentLevelMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsentLevelMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsentLevelMapping) ProtoMessage() {}

func (x *ConsentLevelMapping) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsentLevelMapping.ProtoReflect.Descriptor instead.
func (*ConsentLevelMapping) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{33}
}

func (x *ConsentLevelMapping) GetRef() *ConsentLevelMappingRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *ConsentLevelMapping) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ConsentLevelMappingRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	BillingId string `protobuf:"bytes,1,opt,name=billing_id,json=billingId,proto3" json:"billing_id,omitempty"`
	// the typically small integer value that we use in the events.
	Level     int32  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	ProjectId string `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *ConsentLevelMappingRef) Reset() {
	*x = ConsentLevelMappingRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsentLevelMappingRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsentLevelMappingRef) ProtoMessage() {}

func (x *ConsentLevelMappingRef) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsentLevelMappingRef.ProtoReflect.Descriptor instead.
func (*ConsentLevelMappingRef) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{34}
}

// Deprecated: Do not use.
func (x *ConsentLevelMappingRef) GetBillingId() string {
	if x != nil {
		return x.BillingId
	}
	return ""
}

func (x *ConsentLevelMappingRef) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ConsentLevelMappingRef) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description  string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	LegalGrounds string `protobuf:"bytes,4,opt,name=legal_grounds,json=legalGrounds,proto3" json:"legal_grounds,omitempty"`
	// Can be empty during an update, field mask specifies which fields actually get modified.
	RetentionDays int32        `protobuf:"varint,5,opt,name=retention_days,json=retentionDays,proto3" json:"retention_days,omitempty"`
	State         Policy_State `protobuf:"varint,6,opt,name=state,proto3,enum=strmprivacy.api.entities.v1.Policy_State" json:"state,omitempty"`
}

func (x *Policy) Reset() {
	*x = Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{35}
}

func (x *Policy) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Policy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Policy) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Policy) GetLegalGrounds() string {
	if x != nil {
		return x.LegalGrounds
	}
	return ""
}

func (x *Policy) GetRetentionDays() int32 {
	if x != nil {
		return x.RetentionDays
	}
	return 0
}

func (x *Policy) GetState() Policy_State {
	if x != nil {
		return x.State
	}
	return Policy_STATE_UNSPECIFIED
}

type WindowedEventCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime  *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	EventCount int64                  `protobuf:"varint,3,opt,name=event_count,json=eventCount,proto3" json:"event_count,omitempty"`
}

func (x *WindowedEventCount) Reset() {
	*x = WindowedEventCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowedEventCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowedEventCount) ProtoMessage() {}

func (x *WindowedEventCount) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowedEventCount.ProtoReflect.Descriptor instead.
func (*WindowedEventCount) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{36}
}

func (x *WindowedEventCount) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *WindowedEventCount) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *WindowedEventCount) GetEventCount() int64 {
	if x != nil {
		return x.EventCount
	}
	return 0
}

type SchemaRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// constraints: generic name constraint
	Handle string `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle,omitempty"`
	// constraints: generic name constraint
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// constraints: `\d+\.\d+\.\d+
	Version    string     `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	SchemaType SchemaType `protobuf:"varint,4,opt,name=schema_type,json=schemaType,proto3,enum=strmprivacy.api.entities.v1.SchemaType" json:"schema_type,omitempty"`
}

func (x *SchemaRef) Reset() {
	*x = SchemaRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaRef) ProtoMessage() {}

func (x *SchemaRef) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaRef.ProtoReflect.Descriptor instead.
func (*SchemaRef) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{37}
}

func (x *SchemaRef) GetHandle() string {
	if x != nil {
		return x.Handle
	}
	return ""
}

func (x *SchemaRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SchemaRef) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SchemaRef) GetSchemaType() SchemaType {
	if x != nil {
		return x.SchemaType
	}
	return SchemaType_SCHEMA_TYPE_UNSPECIFIED
}

type Schema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ref   *SchemaRef   `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	State Schema_State `protobuf:"varint,2,opt,name=state,proto3,enum=strmprivacy.api.entities.v1.Schema_State" json:"state,omitempty"`
	// (-- 'is' is intentional here (see https://google.aip.dev/140#booleans) --)
	IsPublic bool `protobuf:"varint,3,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	//
	// constraints: is no longer required provided simple_schema is not empty.
	Definition   string                         `protobuf:"bytes,4,opt,name=definition,proto3" json:"definition,omitempty"`
	Fingerprint  string                         `protobuf:"bytes,5,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	Metadata     *SchemaMetadata                `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
	SimpleSchema *Schema_SimpleSchemaDefinition `protobuf:"bytes,7,opt,name=simple_schema,json=simpleSchema,proto3" json:"simple_schema,omitempty"`
	// The UUID of this schema
	Id string `protobuf:"bytes,8,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Schema) Reset() {
	*x = Schema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema) ProtoMessage() {}

func (x *Schema) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema.ProtoReflect.Descriptor instead.
func (*Schema) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{38}
}

func (x *Schema) GetRef() *SchemaRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *Schema) GetState() Schema_State {
	if x != nil {
		return x.State
	}
	return Schema_STATE_UNSPECIFIED
}

func (x *Schema) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *Schema) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *Schema) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *Schema) GetMetadata() *SchemaMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Schema) GetSimpleSchema() *Schema_SimpleSchemaDefinition {
	if x != nil {
		return x.SimpleSchema
	}
	return nil
}

func (x *Schema) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SimpleSchemaNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type SimpleSchemaNodeType `protobuf:"varint,1,opt,name=type,proto3,enum=strmprivacy.api.entities.v1.SimpleSchemaNodeType" json:"type,omitempty"`
	//
	// constraints: same as SimpleSchemaDefinition
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// avro compatible name set by creator OR derived from name
	AvroName string              `protobuf:"bytes,7,opt,name=avro_name,json=avroName,proto3" json:"avro_name,omitempty"`
	Repeated bool                `protobuf:"varint,3,opt,name=repeated,proto3" json:"repeated,omitempty"`
	Required bool                `protobuf:"varint,4,opt,name=required,proto3" json:"required,omitempty"`
	Nodes    []*SimpleSchemaNode `protobuf:"bytes,5,rep,name=nodes,proto3" json:"nodes,omitempty"`
	// constraints:
	// size < 5000
	Doc string `protobuf:"bytes,6,opt,name=doc,proto3" json:"doc,omitempty"`
}

func (x *SimpleSchemaNode) Reset() {
	*x = SimpleSchemaNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleSchemaNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleSchemaNode) ProtoMessage() {}

func (x *SimpleSchemaNode) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleSchemaNode.ProtoReflect.Descriptor instead.
func (*SimpleSchemaNode) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{39}
}

func (x *SimpleSchemaNode) GetType() SimpleSchemaNodeType {
	if x != nil {
		return x.Type
	}
	return SimpleSchemaNodeType_SIMPLE_SCHEMA_NODE_TYPE_UNSPECIFIED
}

func (x *SimpleSchemaNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SimpleSchemaNode) GetAvroName() string {
	if x != nil {
		return x.AvroName
	}
	return ""
}

func (x *SimpleSchemaNode) GetRepeated() bool {
	if x != nil {
		return x.Repeated
	}
	return false
}

func (x *SimpleSchemaNode) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *SimpleSchemaNode) GetNodes() []*SimpleSchemaNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *SimpleSchemaNode) GetDoc() string {
	if x != nil {
		return x.Doc
	}
	return ""
}

type SchemaMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// The human readable title of this Schema. Used in the Portal. Defaults to the Schema name. This field can be modified.
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	//
	// The description of this Schema. Used in the Portal. Markdown syntax is supported. This field can be modified.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// The timestamp when this Schema was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The URI to the icon used with this Schema. This always an absolute URI, with the https scheme. Used in the Portal.
	IconUri string `protobuf:"bytes,4,opt,name=icon_uri,json=iconUri,proto3" json:"icon_uri,omitempty"`
	// Generic (key/value) labels for this Schema.
	Labels     []*Label `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty"`
	Domains    []string `protobuf:"bytes,6,rep,name=domains,proto3" json:"domains,omitempty"`
	Industries []string `protobuf:"bytes,7,rep,name=industries,proto3" json:"industries,omitempty"`
}

func (x *SchemaMetadata) Reset() {
	*x = SchemaMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaMetadata) ProtoMessage() {}

func (x *SchemaMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaMetadata.ProtoReflect.Descriptor instead.
func (*SchemaMetadata) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{40}
}

func (x *SchemaMetadata) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SchemaMetadata) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SchemaMetadata) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *SchemaMetadata) GetIconUri() string {
	if x != nil {
		return x.IconUri
	}
	return ""
}

func (x *SchemaMetadata) GetLabels() []*Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *SchemaMetadata) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *SchemaMetadata) GetIndustries() []string {
	if x != nil {
		return x.Industries
	}
	return nil
}

type EventContractRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// constraint: handle should already exist
	Handle string `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle,omitempty"`
	// constraints: generic name constraint, unique within handle
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// constraints: semantic version, e.g. 1.12.3
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *EventContractRef) Reset() {
	*x = EventContractRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventContractRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventContractRef) ProtoMessage() {}

func (x *EventContractRef) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventContractRef.ProtoReflect.Descriptor instead.
func (*EventContractRef) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{41}
}

func (x *EventContractRef) GetHandle() string {
	if x != nil {
		return x.Handle
	}
	return ""
}

func (x *EventContractRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EventContractRef) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type EventContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ref       *EventContractRef   `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	State     EventContract_State `protobuf:"varint,2,opt,name=state,proto3,enum=strmprivacy.api.entities.v1.EventContract_State" json:"state,omitempty"`
	SchemaRef *SchemaRef          `protobuf:"bytes,3,opt,name=schema_ref,json=schemaRef,proto3" json:"schema_ref,omitempty"`
	// (-- 'is' is intentional here (see https://google.aip.dev/140#booleans) --)
	IsPublic bool `protobuf:"varint,4,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	// FIXME rename key_field to event_sequence_field
	KeyField    string                 `protobuf:"bytes,5,opt,name=key_field,json=keyField,proto3" json:"key_field,omitempty"`
	PiiFields   map[string]int32       `protobuf:"bytes,6,rep,name=pii_fields,json=piiFields,proto3" json:"pii_fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Validations []*Validation          `protobuf:"bytes,7,rep,name=validations,proto3" json:"validations,omitempty"`
	Metadata    *EventContractMetadata `protobuf:"bytes,8,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The UUID of this event contract
	Id               string `protobuf:"bytes,9,opt,name=id,proto3" json:"id,omitempty"`
	DataSubjectField string `protobuf:"bytes,10,opt,name=data_subject_field,json=dataSubjectField,proto3" json:"data_subject_field,omitempty"`
}

func (x *EventContract) Reset() {
	*x = EventContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventContract) ProtoMessage() {}

func (x *EventContract) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventContract.ProtoReflect.Descriptor instead.
func (*EventContract) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{42}
}

func (x *EventContract) GetRef() *EventContractRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *EventContract) GetState() EventContract_State {
	if x != nil {
		return x.State
	}
	return EventContract_STATE_UNSPECIFIED
}

func (x *EventContract) GetSchemaRef() *SchemaRef {
	if x != nil {
		return x.SchemaRef
	}
	return nil
}

func (x *EventContract) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *EventContract) GetKeyField() string {
	if x != nil {
		return x.KeyField
	}
	return ""
}

func (x *EventContract) GetPiiFields() map[string]int32 {
	if x != nil {
		return x.PiiFields
	}
	return nil
}

func (x *EventContract) GetValidations() []*Validation {
	if x != nil {
		return x.Validations
	}
	return nil
}

func (x *EventContract) GetMetadata() *EventContractMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *EventContract) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventContract) GetDataSubjectField() string {
	if x != nil {
		return x.DataSubjectField
	}
	return ""
}

type EventContractMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The human readable title of this Event Contract. Used in the Portal. Defaults to the Event Contract name. This field can be modified.
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// The (optional) description of this Event Contract. Used in the Portal. Markdown syntax is supported. This field can be modified.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// The timestamp when this Event Contract was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The (optional) URI to the icon used with this Event Contract. This always an absolute URI, with the https scheme. Used in the Portal.
	IconUri string `protobuf:"bytes,4,opt,name=icon_uri,json=iconUri,proto3" json:"icon_uri,omitempty"`
	// Generic (key/value) labels for this Event Contract.
	Labels     []*Label `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty"`
	Domains    []string `protobuf:"bytes,6,rep,name=domains,proto3" json:"domains,omitempty"`
	Industries []string `protobuf:"bytes,7,rep,name=industries,proto3" json:"industries,omitempty"`
}

func (x *EventContractMetadata) Reset() {
	*x = EventContractMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventContractMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventContractMetadata) ProtoMessage() {}

func (x *EventContractMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventContractMetadata.ProtoReflect.Descriptor instead.
func (*EventContractMetadata) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{43}
}

func (x *EventContractMetadata) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *EventContractMetadata) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *EventContractMetadata) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *EventContractMetadata) GetIconUri() string {
	if x != nil {
		return x.IconUri
	}
	return ""
}

func (x *EventContractMetadata) GetLabels() []*Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *EventContractMetadata) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *EventContractMetadata) GetIndustries() []string {
	if x != nil {
		return x.Industries
	}
	return nil
}

type Label struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of the label.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The value of the label. An empty string means there is no value.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Label) Reset() {
	*x = Label{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Label) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Label) ProtoMessage() {}

func (x *Label) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Label.ProtoReflect.Descriptor instead.
func (*Label) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{44}
}

func (x *Label) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Label) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Validation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// constraint: valid field path, follows avro constraints + slashes
	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	// constraint: one of the validator types. handled by code
	// This should become an enum
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// constraint: a type specific definition
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Validation) Reset() {
	*x = Validation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Validation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Validation) ProtoMessage() {}

func (x *Validation) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Validation.ProtoReflect.Descriptor instead.
func (*Validation) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{45}
}

func (x *Validation) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *Validation) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Validation) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type StreamTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stream         *Stream          `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	KeyStream      *KeyStream       `protobuf:"bytes,2,opt,name=key_stream,json=keyStream,proto3" json:"key_stream,omitempty"`
	Derived        []*Stream        `protobuf:"bytes,3,rep,name=derived,proto3" json:"derived,omitempty"`
	BatchExporters []*BatchExporter `protobuf:"bytes,4,rep,name=batch_exporters,json=batchExporters,proto3" json:"batch_exporters,omitempty"`
	KafkaExporters []*KafkaExporter `protobuf:"bytes,5,rep,name=kafka_exporters,json=kafkaExporters,proto3" json:"kafka_exporters,omitempty"`
}

func (x *StreamTree) Reset() {
	*x = StreamTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamTree) ProtoMessage() {}

func (x *StreamTree) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamTree.ProtoReflect.Descriptor instead.
func (*StreamTree) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{46}
}

func (x *StreamTree) GetStream() *Stream {
	if x != nil {
		return x.Stream
	}
	return nil
}

func (x *StreamTree) GetKeyStream() *KeyStream {
	if x != nil {
		return x.KeyStream
	}
	return nil
}

func (x *StreamTree) GetDerived() []*Stream {
	if x != nil {
		return x.Derived
	}
	return nil
}

func (x *StreamTree) GetBatchExporters() []*BatchExporter {
	if x != nil {
		return x.BatchExporters
	}
	return nil
}

func (x *StreamTree) GetKafkaExporters() []*KafkaExporter {
	if x != nil {
		return x.KafkaExporters
	}
	return nil
}

// Deprecated: Do not use.
type SinkTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sink           *Sink            `protobuf:"bytes,1,opt,name=sink,proto3" json:"sink,omitempty"`
	BatchExporters []*BatchExporter `protobuf:"bytes,2,rep,name=batch_exporters,json=batchExporters,proto3" json:"batch_exporters,omitempty"`
}

func (x *SinkTree) Reset() {
	*x = SinkTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SinkTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SinkTree) ProtoMessage() {}

func (x *SinkTree) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SinkTree.ProtoReflect.Descriptor instead.
func (*SinkTree) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{47}
}

func (x *SinkTree) GetSink() *Sink {
	if x != nil {
		return x.Sink
	}
	return nil
}

func (x *SinkTree) GetBatchExporters() []*BatchExporter {
	if x != nil {
		return x.BatchExporters
	}
	return nil
}

//*******************************
// Batch Jobs
// Currently we only support:
// - CSV as DataFormat type
// - a clean database for every batch job
// - CSV files with a header row, because the header is needed to get the field names
//*******************************
type BatchJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ref                *BatchJobRef          `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	States             []*BatchJobState      `protobuf:"bytes,2,rep,name=states,proto3" json:"states,omitempty"`
	SourceData         *DataConnectorAndType `protobuf:"bytes,3,opt,name=source_data,json=sourceData,proto3" json:"source_data,omitempty"`
	Consent            *ConsentConfig        `protobuf:"bytes,4,opt,name=consent,proto3" json:"consent,omitempty"`
	Encryption         *EncryptionConfig     `protobuf:"bytes,5,opt,name=encryption,proto3" json:"encryption,omitempty"`
	EventContractRef   *EventContractRef     `protobuf:"bytes,6,opt,name=event_contract_ref,json=eventContractRef,proto3" json:"event_contract_ref,omitempty"`
	EncryptedData      *EncryptedData        `protobuf:"bytes,7,opt,name=encrypted_data,json=encryptedData,proto3" json:"encrypted_data,omitempty"`
	EncryptionKeysData *EncryptionKeysData   `protobuf:"bytes,8,opt,name=encryption_keys_data,json=encryptionKeysData,proto3" json:"encryption_keys_data,omitempty"`
	DerivedData        []*DerivedData        `protobuf:"bytes,9,rep,name=derived_data,json=derivedData,proto3" json:"derived_data,omitempty"`
	PolicyId           string                `protobuf:"bytes,10,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
}

func (x *BatchJob) Reset() {
	*x = BatchJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchJob) ProtoMessage() {}

func (x *BatchJob) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchJob.ProtoReflect.Descriptor instead.
func (*BatchJob) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{48}
}

func (x *BatchJob) GetRef() *BatchJobRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *BatchJob) GetStates() []*BatchJobState {
	if x != nil {
		return x.States
	}
	return nil
}

func (x *BatchJob) GetSourceData() *DataConnectorAndType {
	if x != nil {
		return x.SourceData
	}
	return nil
}

func (x *BatchJob) GetConsent() *ConsentConfig {
	if x != nil {
		return x.Consent
	}
	return nil
}

func (x *BatchJob) GetEncryption() *EncryptionConfig {
	if x != nil {
		return x.Encryption
	}
	return nil
}

func (x *BatchJob) GetEventContractRef() *EventContractRef {
	if x != nil {
		return x.EventContractRef
	}
	return nil
}

func (x *BatchJob) GetEncryptedData() *EncryptedData {
	if x != nil {
		return x.EncryptedData
	}
	return nil
}

func (x *BatchJob) GetEncryptionKeysData() *EncryptionKeysData {
	if x != nil {
		return x.EncryptionKeysData
	}
	return nil
}

func (x *BatchJob) GetDerivedData() []*DerivedData {
	if x != nil {
		return x.DerivedData
	}
	return nil
}

func (x *BatchJob) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

type BatchJobWrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Job:
	//	*BatchJobWrapper_EncryptionBatchJob
	//	*BatchJobWrapper_MicroAggregationBatchJob
	Job isBatchJobWrapper_Job `protobuf_oneof:"job"`
}

func (x *BatchJobWrapper) Reset() {
	*x = BatchJobWrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchJobWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchJobWrapper) ProtoMessage() {}

func (x *BatchJobWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchJobWrapper.ProtoReflect.Descriptor instead.
func (*BatchJobWrapper) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{49}
}

func (m *BatchJobWrapper) GetJob() isBatchJobWrapper_Job {
	if m != nil {
		return m.Job
	}
	return nil
}

func (x *BatchJobWrapper) GetEncryptionBatchJob() *BatchJob {
	if x, ok := x.GetJob().(*BatchJobWrapper_EncryptionBatchJob); ok {
		return x.EncryptionBatchJob
	}
	return nil
}

func (x *BatchJobWrapper) GetMicroAggregationBatchJob() *MicroAggregationBatchJob {
	if x, ok := x.GetJob().(*BatchJobWrapper_MicroAggregationBatchJob); ok {
		return x.MicroAggregationBatchJob
	}
	return nil
}

type isBatchJobWrapper_Job interface {
	isBatchJobWrapper_Job()
}

type BatchJobWrapper_EncryptionBatchJob struct {
	EncryptionBatchJob *BatchJob `protobuf:"bytes,1,opt,name=encryption_batch_job,json=encryptionBatchJob,proto3,oneof"`
}

type BatchJobWrapper_MicroAggregationBatchJob struct {
	MicroAggregationBatchJob *MicroAggregationBatchJob `protobuf:"bytes,2,opt,name=micro_aggregation_batch_job,json=microAggregationBatchJob,proto3,oneof"`
}

func (*BatchJobWrapper_EncryptionBatchJob) isBatchJobWrapper_Job() {}

func (*BatchJobWrapper_MicroAggregationBatchJob) isBatchJobWrapper_Job() {}

type ExtendedBatchJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	BatchJob *BatchJob        `protobuf:"bytes,1,opt,name=batch_job,json=batchJob,proto3" json:"batch_job,omitempty"`
	Job      *BatchJobWrapper `protobuf:"bytes,2,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *ExtendedBatchJob) Reset() {
	*x = ExtendedBatchJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtendedBatchJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendedBatchJob) ProtoMessage() {}

func (x *ExtendedBatchJob) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendedBatchJob.ProtoReflect.Descriptor instead.
func (*ExtendedBatchJob) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{50}
}

// Deprecated: Do not use.
func (x *ExtendedBatchJob) GetBatchJob() *BatchJob {
	if x != nil {
		return x.BatchJob
	}
	return nil
}

func (x *ExtendedBatchJob) GetJob() *BatchJobWrapper {
	if x != nil {
		return x.Job
	}
	return nil
}

type BatchJobRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	BillingId string `protobuf:"bytes,1,opt,name=billing_id,json=billingId,proto3" json:"billing_id,omitempty"`
	// the UUIDv4 of the job, generated upon creation
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// the UUIDv4 of the STRM Privacy project
	ProjectId string `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *BatchJobRef) Reset() {
	*x = BatchJobRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchJobRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchJobRef) ProtoMessage() {}

func (x *BatchJobRef) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchJobRef.ProtoReflect.Descriptor instead.
func (*BatchJobRef) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{51}
}

// Deprecated: Do not use.
func (x *BatchJobRef) GetBillingId() string {
	if x != nil {
		return x.BillingId
	}
	return ""
}

func (x *BatchJobRef) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BatchJobRef) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type BatchJobState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=state_time,json=stateTime,proto3" json:"state_time,omitempty"`
	State     BatchJobStateType      `protobuf:"varint,2,opt,name=state,proto3,enum=strmprivacy.api.entities.v1.BatchJobStateType" json:"state,omitempty"`
	Message   string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *BatchJobState) Reset() {
	*x = BatchJobState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchJobState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchJobState) ProtoMessage() {}

func (x *BatchJobState) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchJobState.ProtoReflect.Descriptor instead.
func (*BatchJobState) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{52}
}

func (x *BatchJobState) GetStateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StateTime
	}
	return nil
}

func (x *BatchJobState) GetState() BatchJobStateType {
	if x != nil {
		return x.State
	}
	return BatchJobStateType_BATCH_JOB_STATE_TYPE_UNSPECIFIED
}

func (x *BatchJobState) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DataConnectorAndType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataConnectorRef *DataConnectorRef `protobuf:"bytes,1,opt,name=data_connector_ref,json=dataConnectorRef,proto3" json:"data_connector_ref,omitempty"`
	// If omitted, files are read from the root of the bucket.
	PathPrefix string `protobuf:"bytes,2,opt,name=path_prefix,json=pathPrefix,proto3" json:"path_prefix,omitempty"`
	// (-- api-linter: core::0122::name-suffix=disabled
	//     aip.dev/not-precedent: We think file_name is a better name. --)
	FileName       string          `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	DataType       *DataType       `protobuf:"bytes,4,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	DatabaseConfig *DatabaseConfig `protobuf:"bytes,5,opt,name=database_config,json=databaseConfig,proto3" json:"database_config,omitempty"`
}

func (x *DataConnectorAndType) Reset() {
	*x = DataConnectorAndType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataConnectorAndType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataConnectorAndType) ProtoMessage() {}

func (x *DataConnectorAndType) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataConnectorAndType.ProtoReflect.Descriptor instead.
func (*DataConnectorAndType) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{53}
}

func (x *DataConnectorAndType) GetDataConnectorRef() *DataConnectorRef {
	if x != nil {
		return x.DataConnectorRef
	}
	return nil
}

func (x *DataConnectorAndType) GetPathPrefix() string {
	if x != nil {
		return x.PathPrefix
	}
	return ""
}

func (x *DataConnectorAndType) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *DataConnectorAndType) GetDataType() *DataType {
	if x != nil {
		return x.DataType
	}
	return nil
}

func (x *DataConnectorAndType) GetDatabaseConfig() *DatabaseConfig {
	if x != nil {
		return x.DatabaseConfig
	}
	return nil
}

type DatabaseConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schema  string   `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	Table   string   `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	Columns []string `protobuf:"bytes,3,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (x *DatabaseConfig) Reset() {
	*x = DatabaseConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseConfig) ProtoMessage() {}

func (x *DatabaseConfig) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseConfig.ProtoReflect.Descriptor instead.
func (*DatabaseConfig) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{54}
}

func (x *DatabaseConfig) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *DatabaseConfig) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *DatabaseConfig) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

type ConsentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultConsentLevels  []int32                `protobuf:"varint,1,rep,packed,name=default_consent_levels,json=defaultConsentLevels,proto3" json:"default_consent_levels,omitempty"`
	ConsentLevelExtractor *ConsentLevelExtractor `protobuf:"bytes,2,opt,name=consent_level_extractor,json=consentLevelExtractor,proto3" json:"consent_level_extractor,omitempty"`
}

func (x *ConsentConfig) Reset() {
	*x = ConsentConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsentConfig) ProtoMessage() {}

func (x *ConsentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsentConfig.ProtoReflect.Descriptor instead.
func (*ConsentConfig) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{55}
}

func (x *ConsentConfig) GetDefaultConsentLevels() []int32 {
	if x != nil {
		return x.DefaultConsentLevels
	}
	return nil
}

func (x *ConsentConfig) GetConsentLevelExtractor() *ConsentLevelExtractor {
	if x != nil {
		return x.ConsentLevelExtractor
	}
	return nil
}

type ConsentLevelExtractor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field         string                    `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	FieldPatterns map[string]*ConsentLevels `protobuf:"bytes,2,rep,name=field_patterns,json=fieldPatterns,proto3" json:"field_patterns,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ConsentLevelExtractor) Reset() {
	*x = ConsentLevelExtractor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsentLevelExtractor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsentLevelExtractor) ProtoMessage() {}

func (x *ConsentLevelExtractor) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsentLevelExtractor.ProtoReflect.Descriptor instead.
func (*ConsentLevelExtractor) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{56}
}

func (x *ConsentLevelExtractor) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *ConsentLevelExtractor) GetFieldPatterns() map[string]*ConsentLevels {
	if x != nil {
		return x.FieldPatterns
	}
	return nil
}

type EncryptionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimestampConfig *TimestampConfig `protobuf:"bytes,1,opt,name=timestamp_config,json=timestampConfig,proto3" json:"timestamp_config,omitempty"`
	BatchJobGroupId string           `protobuf:"bytes,2,opt,name=batch_job_group_id,json=batchJobGroupId,proto3" json:"batch_job_group_id,omitempty"`
}

func (x *EncryptionConfig) Reset() {
	*x = EncryptionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptionConfig) ProtoMessage() {}

func (x *EncryptionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptionConfig.ProtoReflect.Descriptor instead.
func (*EncryptionConfig) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{57}
}

func (x *EncryptionConfig) GetTimestampConfig() *TimestampConfig {
	if x != nil {
		return x.TimestampConfig
	}
	return nil
}

func (x *EncryptionConfig) GetBatchJobGroupId() string {
	if x != nil {
		return x.BatchJobGroupId
	}
	return ""
}

type TimestampConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// generic field name
	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	// Java Time Format template, see https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html
	Format          string             `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	DefaultTimeZone *datetime.TimeZone `protobuf:"bytes,3,opt,name=default_time_zone,json=defaultTimeZone,proto3" json:"default_time_zone,omitempty"`
}

func (x *TimestampConfig) Reset() {
	*x = TimestampConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimestampConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampConfig) ProtoMessage() {}

func (x *TimestampConfig) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimestampConfig.ProtoReflect.Descriptor instead.
func (*TimestampConfig) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{58}
}

func (x *TimestampConfig) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *TimestampConfig) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *TimestampConfig) GetDefaultTimeZone() *datetime.TimeZone {
	if x != nil {
		return x.DefaultTimeZone
	}
	return nil
}

type EncryptedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target *DataConnectorAndType `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *EncryptedData) Reset() {
	*x = EncryptedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedData) ProtoMessage() {}

func (x *EncryptedData) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedData.ProtoReflect.Descriptor instead.
func (*EncryptedData) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{59}
}

func (x *EncryptedData) GetTarget() *DataConnectorAndType {
	if x != nil {
		return x.Target
	}
	return nil
}

type EncryptionKeysData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target *DataConnectorAndType `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *EncryptionKeysData) Reset() {
	*x = EncryptionKeysData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptionKeysData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptionKeysData) ProtoMessage() {}

func (x *EncryptionKeysData) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptionKeysData.ProtoReflect.Descriptor instead.
func (*EncryptionKeysData) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{60}
}

func (x *EncryptionKeysData) GetTarget() *DataConnectorAndType {
	if x != nil {
		return x.Target
	}
	return nil
}

type DerivedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target           *DataConnectorAndType `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	ConsentLevels    []int32               `protobuf:"varint,2,rep,packed,name=consent_levels,json=consentLevels,proto3" json:"consent_levels,omitempty"`
	ConsentLevelType ConsentLevelType      `protobuf:"varint,3,opt,name=consent_level_type,json=consentLevelType,proto3,enum=strmprivacy.api.entities.v1.ConsentLevelType" json:"consent_level_type,omitempty"`
	MaskedFields     *MaskedFields         `protobuf:"bytes,4,opt,name=masked_fields,json=maskedFields,proto3" json:"masked_fields,omitempty"`
}

func (x *DerivedData) Reset() {
	*x = DerivedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DerivedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DerivedData) ProtoMessage() {}

func (x *DerivedData) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DerivedData.ProtoReflect.Descriptor instead.
func (*DerivedData) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{61}
}

func (x *DerivedData) GetTarget() *DataConnectorAndType {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *DerivedData) GetConsentLevels() []int32 {
	if x != nil {
		return x.ConsentLevels
	}
	return nil
}

func (x *DerivedData) GetConsentLevelType() ConsentLevelType {
	if x != nil {
		return x.ConsentLevelType
	}
	return ConsentLevelType_CONSENT_LEVEL_TYPE_UNSPECIFIED
}

func (x *DerivedData) GetMaskedFields() *MaskedFields {
	if x != nil {
		return x.MaskedFields
	}
	return nil
}

//*******************************
// K-Member Micro-aggregation Batch Job
// Currently we only support:
// - CSV as DataFormat type
// - CSV files with a header row, because the header is needed to get the field names
// - Numerical, Categorical & Ordinal data
//*******************************
type MicroAggregationBatchJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ref             *BatchJobRef          `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	States          []*BatchJobState      `protobuf:"bytes,2,rep,name=states,proto3" json:"states,omitempty"`
	SourceData      *DataConnectorAndType `protobuf:"bytes,3,opt,name=source_data,json=sourceData,proto3" json:"source_data,omitempty"`
	TargetData      *DataConnectorAndType `protobuf:"bytes,4,opt,name=target_data,json=targetData,proto3" json:"target_data,omitempty"`
	DataContractRef *DataContractRef      `protobuf:"bytes,5,opt,name=data_contract_ref,json=dataContractRef,proto3" json:"data_contract_ref,omitempty"`
	// Configuration specifically for the aggregation algorithm.
	AggregationConfig *MicroAggregationConfig `protobuf:"bytes,6,opt,name=aggregation_config,json=aggregationConfig,proto3" json:"aggregation_config,omitempty"`
}

func (x *MicroAggregationBatchJob) Reset() {
	*x = MicroAggregationBatchJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MicroAggregationBatchJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MicroAggregationBatchJob) ProtoMessage() {}

func (x *MicroAggregationBatchJob) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MicroAggregationBatchJob.ProtoReflect.Descriptor instead.
func (*MicroAggregationBatchJob) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{62}
}

func (x *MicroAggregationBatchJob) GetRef() *BatchJobRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *MicroAggregationBatchJob) GetStates() []*BatchJobState {
	if x != nil {
		return x.States
	}
	return nil
}

func (x *MicroAggregationBatchJob) GetSourceData() *DataConnectorAndType {
	if x != nil {
		return x.SourceData
	}
	return nil
}

func (x *MicroAggregationBatchJob) GetTargetData() *DataConnectorAndType {
	if x != nil {
		return x.TargetData
	}
	return nil
}

func (x *MicroAggregationBatchJob) GetDataContractRef() *DataContractRef {
	if x != nil {
		return x.DataContractRef
	}
	return nil
}

func (x *MicroAggregationBatchJob) GetAggregationConfig() *MicroAggregationConfig {
	if x != nil {
		return x.AggregationConfig
	}
	return nil
}

type MicroAggregationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The desired k-anonymity level.
	MinimumKAnonymity int32 `protobuf:"varint,1,opt,name=minimum_k_anonymity,json=minimumKAnonymity,proto3" json:"minimum_k_anonymity,omitempty"`
	// If specified, these fields will be used to aggregate on. Otherwise, fields specified as Quasi Identifiers in the data contract are used instead.
	AggregationFields []string `protobuf:"bytes,2,rep,name=aggregation_fields,json=aggregationFields,proto3" json:"aggregation_fields,omitempty"`
}

func (x *MicroAggregationConfig) Reset() {
	*x = MicroAggregationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MicroAggregationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MicroAggregationConfig) ProtoMessage() {}

func (x *MicroAggregationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MicroAggregationConfig.ProtoReflect.Descriptor instead.
func (*MicroAggregationConfig) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{63}
}

func (x *MicroAggregationConfig) GetMinimumKAnonymity() int32 {
	if x != nil {
		return x.MinimumKAnonymity
	}
	return 0
}

func (x *MicroAggregationConfig) GetAggregationFields() []string {
	if x != nil {
		return x.AggregationFields
	}
	return nil
}

type DataContractRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// constraint: handle should already exist
	Handle string `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle,omitempty"`
	// constraints: generic name constraint, unique within handle
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// constraints: semantic version, e.g. 1.12.3
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *DataContractRef) Reset() {
	*x = DataContractRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataContractRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataContractRef) ProtoMessage() {}

func (x *DataContractRef) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataContractRef.ProtoReflect.Descriptor instead.
func (*DataContractRef) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{64}
}

func (x *DataContractRef) GetHandle() string {
	if x != nil {
		return x.Handle
	}
	return ""
}

func (x *DataContractRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DataContractRef) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type DataContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Ref   *DataContractRef   `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	State DataContract_State `protobuf:"varint,3,opt,name=state,proto3,enum=strmprivacy.api.entities.v1.DataContract_State" json:"state,omitempty"`
	// (-- 'is' is intentional here (see https://google.aip.dev/140#booleans) --)
	IsPublic bool   `protobuf:"varint,4,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	KeyField string `protobuf:"bytes,5,opt,name=key_field,json=keyField,proto3" json:"key_field,omitempty"`
	// PII Fields as a map, where the key is the field path (i.e. producerSessionId or customer/id) and the
	// value is the purpose level, provided as an integer
	//
	// Deprecated: Do not use.
	PiiFields        map[string]int32      `protobuf:"bytes,6,rep,name=pii_fields,json=piiFields,proto3" json:"pii_fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Validations      []*Validation         `protobuf:"bytes,7,rep,name=validations,proto3" json:"validations,omitempty"`
	Metadata         *DataContractMetadata `protobuf:"bytes,8,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Schema           *Schema               `protobuf:"bytes,9,opt,name=schema,proto3" json:"schema,omitempty"`
	DataSubjectField string                `protobuf:"bytes,10,opt,name=data_subject_field,json=dataSubjectField,proto3" json:"data_subject_field,omitempty"`
	ProjectId        string                `protobuf:"bytes,11,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	FieldMetadata    []*FieldMetadata      `protobuf:"bytes,12,rep,name=field_metadata,json=fieldMetadata,proto3" json:"field_metadata,omitempty"`
}

func (x *DataContract) Reset() {
	*x = DataContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataContract) ProtoMessage() {}

func (x *DataContract) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataContract.ProtoReflect.Descriptor instead.
func (*DataContract) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{65}
}

func (x *DataContract) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DataContract) GetRef() *DataContractRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *DataContract) GetState() DataContract_State {
	if x != nil {
		return x.State
	}
	return DataContract_STATE_UNSPECIFIED
}

func (x *DataContract) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *DataContract) GetKeyField() string {
	if x != nil {
		return x.KeyField
	}
	return ""
}

// Deprecated: Do not use.
func (x *DataContract) GetPiiFields() map[string]int32 {
	if x != nil {
		return x.PiiFields
	}
	return nil
}

func (x *DataContract) GetValidations() []*Validation {
	if x != nil {
		return x.Validations
	}
	return nil
}

func (x *DataContract) GetMetadata() *DataContractMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *DataContract) GetSchema() *Schema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *DataContract) GetDataSubjectField() string {
	if x != nil {
		return x.DataSubjectField
	}
	return ""
}

func (x *DataContract) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DataContract) GetFieldMetadata() []*FieldMetadata {
	if x != nil {
		return x.FieldMetadata
	}
	return nil
}

type FieldMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Full reference to a (nested) field. For non-top-level fields (i.e. nested fields), each level should be separated by a forward slash. E.g. customer/id.
	FieldName string `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	// Metadata on the type of personal data this field may contain.
	PersonalDataConfig *FieldMetadata_PersonalDataConfig `protobuf:"bytes,2,opt,name=personal_data_config,json=personalDataConfig,proto3" json:"personal_data_config,omitempty"`
	// The statistical data type of the field, e.g. nominal, ordinal, numerical.
	StatisticalDataType StatisticalDataType `protobuf:"varint,3,opt,name=statistical_data_type,json=statisticalDataType,proto3,enum=strmprivacy.api.entities.v1.StatisticalDataType" json:"statistical_data_type,omitempty"`
	// If a field is of ordinal values, defines the possible values and their order.
	OrdinalValues []string `protobuf:"bytes,4,rep,name=ordinal_values,json=ordinalValues,proto3" json:"ordinal_values,omitempty"`
	// How null values should generally be dealt with for a field.
	NullHandlingConfig *FieldMetadata_NullHandlingConfig `protobuf:"bytes,5,opt,name=null_handling_config,json=nullHandlingConfig,proto3" json:"null_handling_config,omitempty"`
}

func (x *FieldMetadata) Reset() {
	*x = FieldMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldMetadata) ProtoMessage() {}

func (x *FieldMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldMetadata.ProtoReflect.Descriptor instead.
func (*FieldMetadata) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{66}
}

func (x *FieldMetadata) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *FieldMetadata) GetPersonalDataConfig() *FieldMetadata_PersonalDataConfig {
	if x != nil {
		return x.PersonalDataConfig
	}
	return nil
}

func (x *FieldMetadata) GetStatisticalDataType() StatisticalDataType {
	if x != nil {
		return x.StatisticalDataType
	}
	return StatisticalDataType_STATISTICAL_DATA_TYPE_UNSPECIFIED
}

func (x *FieldMetadata) GetOrdinalValues() []string {
	if x != nil {
		return x.OrdinalValues
	}
	return nil
}

func (x *FieldMetadata) GetNullHandlingConfig() *FieldMetadata_NullHandlingConfig {
	if x != nil {
		return x.NullHandlingConfig
	}
	return nil
}

type DataContractMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The human readable title of this Data Contract. Used in the Portal. Defaults to the Data Contract name if left unspecified. This field can be modified.
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// The description of this Data Contract. Used in the Portal. Markdown syntax is supported. This field can be modified.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// The timestamp when this Data Contract was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Generic (key/value) labels for this Data Contract.
	Labels     []*Label `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty"`
	Domains    []string `protobuf:"bytes,6,rep,name=domains,proto3" json:"domains,omitempty"`
	Industries []string `protobuf:"bytes,7,rep,name=industries,proto3" json:"industries,omitempty"`
}

func (x *DataContractMetadata) Reset() {
	*x = DataContractMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataContractMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataContractMetadata) ProtoMessage() {}

func (x *DataContractMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataContractMetadata.ProtoReflect.Descriptor instead.
func (*DataContractMetadata) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{67}
}

func (x *DataContractMetadata) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DataContractMetadata) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DataContractMetadata) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *DataContractMetadata) GetLabels() []*Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *DataContractMetadata) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *DataContractMetadata) GetIndustries() []string {
	if x != nil {
		return x.Industries
	}
	return nil
}

type Project struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description    string        `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	OrganizationId string        `protobuf:"bytes,4,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	State          Project_State `protobuf:"varint,5,opt,name=state,proto3,enum=strmprivacy.api.entities.v1.Project_State" json:"state,omitempty"`
}

func (x *Project) Reset() {
	*x = Project{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Project) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Project) ProtoMessage() {}

func (x *Project) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Project.ProtoReflect.Descriptor instead.
func (*Project) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{68}
}

func (x *Project) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Project) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Project) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Project) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *Project) GetState() Project_State {
	if x != nil {
		return x.State
	}
	return Project_STATE_UNSPECIFIED
}

// (-- api-linter: core::0148::human-names=disabled
//     aip.dev/not-precedent . --)
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email     string     `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	FirstName string     `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName  string     `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	UserRoles []UserRole `protobuf:"varint,4,rep,packed,name=user_roles,json=userRoles,proto3,enum=strmprivacy.api.entities.v1.UserRole" json:"user_roles,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{69}
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *User) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *User) GetUserRoles() []UserRole {
	if x != nil {
		return x.UserRoles
	}
	return nil
}

type PurposeMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// an integer, which retains the same technical function as the original "consent level"
	Level int32 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	// a name/short description of the purpose, e.g. "Analytics", "Functional"
	Purpose string `protobuf:"bytes,2,opt,name=purpose,proto3" json:"purpose,omitempty"`
	// a more elaborate description
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *PurposeMapping) Reset() {
	*x = PurposeMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurposeMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurposeMapping) ProtoMessage() {}

func (x *PurposeMapping) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurposeMapping.ProtoReflect.Descriptor instead.
func (*PurposeMapping) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{70}
}

func (x *PurposeMapping) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *PurposeMapping) GetPurpose() string {
	if x != nil {
		return x.Purpose
	}
	return ""
}

func (x *PurposeMapping) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type MaskedFields_PatternList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldPatterns []string `protobuf:"bytes,1,rep,name=field_patterns,json=fieldPatterns,proto3" json:"field_patterns,omitempty"`
}

func (x *MaskedFields_PatternList) Reset() {
	*x = MaskedFields_PatternList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaskedFields_PatternList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaskedFields_PatternList) ProtoMessage() {}

func (x *MaskedFields_PatternList) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaskedFields_PatternList.ProtoReflect.Descriptor instead.
func (*MaskedFields_PatternList) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{3, 1}
}

func (x *MaskedFields_PatternList) GetFieldPatterns() []string {
	if x != nil {
		return x.FieldPatterns
	}
	return nil
}

//
// constraints: overall size < 100000 TBD
type Schema_SimpleSchemaDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// constraints: printable characters
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	//
	// constraints:
	// dot separated sequence of name constraints
	// must be Avro compatible. When absent becomes <handle>.<name>.v<version>
	Namespace string              `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Doc       string              `protobuf:"bytes,3,opt,name=doc,proto3" json:"doc,omitempty"`
	Nodes     []*SimpleSchemaNode `protobuf:"bytes,4,rep,name=nodes,proto3" json:"nodes,omitempty"`
	// avro compatible name set by creator OR derived from name (thus ignore_empty = true)
	AvroName string `protobuf:"bytes,5,opt,name=avro_name,json=avroName,proto3" json:"avro_name,omitempty"`
}

func (x *Schema_SimpleSchemaDefinition) Reset() {
	*x = Schema_SimpleSchemaDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema_SimpleSchemaDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema_SimpleSchemaDefinition) ProtoMessage() {}

func (x *Schema_SimpleSchemaDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema_SimpleSchemaDefinition.ProtoReflect.Descriptor instead.
func (*Schema_SimpleSchemaDefinition) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{38, 0}
}

func (x *Schema_SimpleSchemaDefinition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Schema_SimpleSchemaDefinition) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Schema_SimpleSchemaDefinition) GetDoc() string {
	if x != nil {
		return x.Doc
	}
	return ""
}

func (x *Schema_SimpleSchemaDefinition) GetNodes() []*SimpleSchemaNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *Schema_SimpleSchemaDefinition) GetAvroName() string {
	if x != nil {
		return x.AvroName
	}
	return ""
}

type FieldMetadata_PersonalDataConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Currently, only string fields or repeated string fields can be marked as PII, since other data types cannot store an encrypted string.
	IsPii bool `protobuf:"varint,1,opt,name=is_pii,json=isPii,proto3" json:"is_pii,omitempty"`
	// A quasi identifier doesn't identify an individual directly, but combined with other QIs can result in a unique (direct) identifier.
	IsQuasiId bool `protobuf:"varint,2,opt,name=is_quasi_id,json=isQuasiId,proto3" json:"is_quasi_id,omitempty"`
	// The purpose level as defined in the purpose level mapping of an organization.
	PurposeLevel int32 `protobuf:"varint,3,opt,name=purpose_level,json=purposeLevel,proto3" json:"purpose_level,omitempty"`
	// The special sensitive data type as defined by the GDPR https://eur-lex.europa.eu/legal-content/EN/TXT/HTML/?uri=CELEX:32016R0679#d1e2051-1-1
	GdprSpecialPersonalDataType string `protobuf:"bytes,4,opt,name=gdpr_special_personal_data_type,json=gdprSpecialPersonalDataType,proto3" json:"gdpr_special_personal_data_type,omitempty"`
}

func (x *FieldMetadata_PersonalDataConfig) Reset() {
	*x = FieldMetadata_PersonalDataConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldMetadata_PersonalDataConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldMetadata_PersonalDataConfig) ProtoMessage() {}

func (x *FieldMetadata_PersonalDataConfig) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldMetadata_PersonalDataConfig.ProtoReflect.Descriptor instead.
func (*FieldMetadata_PersonalDataConfig) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{66, 0}
}

func (x *FieldMetadata_PersonalDataConfig) GetIsPii() bool {
	if x != nil {
		return x.IsPii
	}
	return false
}

func (x *FieldMetadata_PersonalDataConfig) GetIsQuasiId() bool {
	if x != nil {
		return x.IsQuasiId
	}
	return false
}

func (x *FieldMetadata_PersonalDataConfig) GetPurposeLevel() int32 {
	if x != nil {
		return x.PurposeLevel
	}
	return 0
}

func (x *FieldMetadata_PersonalDataConfig) GetGdprSpecialPersonalDataType() string {
	if x != nil {
		return x.GdprSpecialPersonalDataType
	}
	return ""
}

type FieldMetadata_NullHandlingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type FieldMetadata_NullHandlingConfig_NullHandlingType `protobuf:"varint,1,opt,name=type,proto3,enum=strmprivacy.api.entities.v1.FieldMetadata_NullHandlingConfig_NullHandlingType" json:"type,omitempty"`
	// If the type is DEFAULT_VALUE, the desired default value must be specified.
	DefaultValue string `protobuf:"bytes,2,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
}

func (x *FieldMetadata_NullHandlingConfig) Reset() {
	*x = FieldMetadata_NullHandlingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldMetadata_NullHandlingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldMetadata_NullHandlingConfig) ProtoMessage() {}

func (x *FieldMetadata_NullHandlingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldMetadata_NullHandlingConfig.ProtoReflect.Descriptor instead.
func (*FieldMetadata_NullHandlingConfig) Descriptor() ([]byte, []int) {
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP(), []int{66, 1}
}

func (x *FieldMetadata_NullHandlingConfig) GetType() FieldMetadata_NullHandlingConfig_NullHandlingType {
	if x != nil {
		return x.Type
	}
	return FieldMetadata_NullHandlingConfig_NULL_HANDLING_TYPE_UNSPECIFIED
}

func (x *FieldMetadata_NullHandlingConfig) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

var File_strmprivacy_api_entities_v1_entities_v1_proto protoreflect.FileDescriptor

var file_strmprivacy_api_entities_v1_entities_v1_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1b, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xab, 0x05, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x45,
	0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x74,
	0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x66, 0x42, 0x0b, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x2d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x72,
	0x06, 0x18, 0xe8, 0x07, 0xd0, 0x01, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x92, 0x01, 0x02, 0x10, 0x32, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x5b, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2d, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x40, 0x0a, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x6b,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x42, 0x10, 0xfa, 0x42, 0x0d, 0x92, 0x01, 0x0a, 0x10, 0x14,
	0x18, 0x01, 0x22, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x4f,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12,
	0x4e, 0x0a, 0x0d, 0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x52, 0x0c, 0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x26, 0x0a, 0x0b, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x18, 0x01, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x6b, 0x61, 0x66,
	0x6b, 0x61, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x28, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x72,
	0x06, 0xd0, 0x01, 0x01, 0xb0, 0x01, 0x01, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49,
	0x64, 0x22, 0xaa, 0x01, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x12, 0x17, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x6b, 0x65,
	0x79, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0xc2,
	0x01, 0x0a, 0x13, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x55, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x54, 0x0a,
	0x0f, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x0e, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x73, 0x22, 0x8f, 0x03, 0x0a, 0x0c, 0x4d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x35, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x21, 0xfa, 0x42, 0x1e, 0x72, 0x1c, 0x18, 0xe8, 0x07, 0x32, 0x14, 0x5e, 0x5b, 0x5c, 0x70, 0x4c,
	0x5c, 0x70, 0x4e, 0x5c, 0x70, 0x53, 0x5c, 0x70, 0x4d, 0x5c, 0x70, 0x50, 0x5d, 0x2b, 0x24, 0xd0,
	0x01, 0x01, 0x52, 0x04, 0x73, 0x65, 0x65, 0x64, 0x12, 0x63, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x73, 0x6b, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x1a, 0x77, 0x0a,
	0x12, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4d, 0x0a, 0x0b, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x70,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x17, 0xfa,
	0x42, 0x14, 0x92, 0x01, 0x11, 0x18, 0x01, 0x22, 0x0d, 0x72, 0x0b, 0xba, 0x01, 0x08, 0x73, 0x74,
	0x72, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x73, 0x22, 0x52, 0x0a, 0x06, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12,
	0x22, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x92, 0x01, 0x0a, 0x09, 0x4b, 0x65,
	0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x40, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x66, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x1d, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x18, 0x01, 0xe0, 0x41, 0x03,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x6b, 0x61, 0x66, 0x6b,
	0x61, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x0a, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x22, 0x9a,
	0x01, 0x0a, 0x09, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x66, 0x12, 0x2c, 0x0a, 0x0a,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0d, 0x18, 0x01, 0xfa, 0x42, 0x08, 0x72, 0x06, 0x98, 0x01, 0x00, 0xd0, 0x01, 0x01, 0x52,
	0x09, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x72, 0x1d, 0x10,
	0x04, 0x18, 0x64, 0x32, 0x14, 0x5e, 0x5b, 0x5c, 0x70, 0x4c, 0x5c, 0x70, 0x4e, 0x5c, 0x70, 0x53,
	0x5c, 0x70, 0x4d, 0x5c, 0x70, 0x50, 0x5d, 0x2b, 0x24, 0xd0, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x0c,
	0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x66, 0x12, 0x2c, 0x0a, 0x0a,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0d, 0x18, 0x01, 0xfa, 0x42, 0x08, 0x72, 0x06, 0x98, 0x01, 0x00, 0xd0, 0x01, 0x01, 0x52,
	0x09, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x72, 0x1d, 0x10,
	0x04, 0x18, 0x64, 0x32, 0x14, 0x5e, 0x5b, 0x5c, 0x70, 0x4c, 0x5c, 0x70, 0x4e, 0x5c, 0x70, 0x53,
	0x5c, 0x70, 0x4d, 0x5c, 0x70, 0x50, 0x5d, 0x2b, 0x24, 0xd0, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0xa1, 0x01, 0x0a, 0x0b,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22,
	0xdf, 0x01, 0x0a, 0x04, 0x53, 0x69, 0x6e, 0x6b, 0x12, 0x3b, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x66, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x47, 0x0a, 0x09, 0x73, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x73, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x43,
	0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x06, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x3a, 0x02, 0x18, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x22, 0x4a, 0x0a, 0x07, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x66, 0x12, 0x22, 0x0a, 0x0a,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x83, 0x01,
	0x0a, 0x0c, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x24,
	0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x61,
	0x73, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x6f, 0x6c, 0x65,
	0x41, 0x72, 0x6e, 0x22, 0x99, 0x05, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x49, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x66, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x03, 0x72, 0x65, 0x66,
	0x12, 0x4f, 0x0a, 0x09, 0x73, 0x33, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x77, 0x73, 0x53, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x73, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x7e, 0x0a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x18, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x81, 0x01, 0x0a, 0x1c, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x62,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x42, 0x6c, 0x6f, 0x62,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x19, 0x61, 0x7a, 0x75, 0x72,
	0x65, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x0b, 0x6a, 0x64, 0x62, 0x63, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x72,
	0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x64, 0x62, 0x63, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0a, 0x6a, 0x64, 0x62, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x1f, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0b, 0xfa, 0x42, 0x08, 0x72, 0x06, 0xd0, 0x01, 0x01, 0xb0, 0x01, 0x01, 0x52, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x12, 0x6a, 0x0a, 0x12, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x11, 0x64, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x0f,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22,
	0x9e, 0x01, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x66, 0x12, 0x2c, 0x0a, 0x0a, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0x18, 0x01, 0xfa, 0x42, 0x08, 0x72,
	0x06, 0x98, 0x01, 0x00, 0xd0, 0x01, 0x01, 0x52, 0x09, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x49, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1f, 0xfa, 0x42, 0x1c, 0x72, 0x1a, 0x10, 0x04, 0x18, 0x64, 0x32, 0x14, 0x5e, 0x5b, 0x5c,
	0x70, 0x4c, 0x5c, 0x70, 0x4e, 0x5c, 0x70, 0x53, 0x5c, 0x70, 0x4d, 0x5c, 0x70, 0x50, 0x5d, 0x2b,
	0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x22, 0xb3, 0x02, 0x0a, 0x1e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x0f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73,
	0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x52, 0x0e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x73, 0x12, 0x44, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73,
	0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x4a, 0x6f, 0x62, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x76,
	0x0a, 0x1c, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x52, 0x19, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x4a, 0x6f, 0x62, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x13, 0x41, 0x77, 0x73, 0x53, 0x33,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28,
	0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x0f, 0x61, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x72, 0x6f,
	0x6c, 0x65, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x72, 0x05, 0x10, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x75, 0x6d, 0x65,
	0x52, 0x6f, 0x6c, 0x65, 0x41, 0x72, 0x6e, 0x22, 0x77, 0x0a, 0x20, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0b, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x22, 0x8a, 0x02, 0x0a, 0x21, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x11, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x72, 0x69, 0x12,
	0x2e, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x7c, 0x0a, 0x18, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x7a, 0x75, 0x72, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x16, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x97, 0x01,
	0x0a, 0x1b, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x24, 0x0a,
	0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x0d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x85, 0x02, 0x0a, 0x0a, 0x4a, 0x64, 0x62, 0x63,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x4e, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x1a, 0x02, 0x28, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x08, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x22,
	0x58, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x03, 0x63,
	0x73, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x73, 0x76, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x48, 0x00, 0x52, 0x03, 0x63, 0x73, 0x76, 0x42, 0x10, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0x25, 0x0a, 0x09, 0x43, 0x73, 0x76,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74,
	0x22, 0x8a, 0x05, 0x0a, 0x0d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x12, 0x49, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x52, 0x65, 0x66, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x47, 0x0a,
	0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x66, 0x12, 0x51, 0x0a, 0x0e, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52, 0x0c, 0x6b, 0x65, 0x79,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x66, 0x12, 0x49, 0x0a, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x12, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x0c, 0xaa, 0x01,
	0x09, 0x22, 0x03, 0x08, 0x90, 0x1c, 0x32, 0x02, 0x08, 0x1e, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x09, 0x73, 0x69, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0x18, 0x01, 0xfa, 0x42, 0x08, 0x72, 0x06,
	0x98, 0x01, 0x00, 0xd0, 0x01, 0x01, 0x52, 0x08, 0x73, 0x69, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x5b, 0x0a, 0x0b, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0xfa, 0x42, 0x37, 0x72, 0x35, 0x18, 0x84, 0x07, 0x32,
	0x09, 0x5e, 0x2e, 0x2b, 0x5b, 0x5e, 0x5c, 0x2f, 0x5d, 0x24, 0x5a, 0x01, 0x2e, 0x5a, 0x02, 0x2e,
	0x2e, 0xba, 0x01, 0x1a, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x2d, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2f,
	0x61, 0x63, 0x6d, 0x65, 0x2d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0xd0, 0x01,
	0x01, 0x52, 0x0a, 0x70, 0x61, 0x74, 0x68, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x36, 0x0a,
	0x17, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x65, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x66,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x66, 0x42, 0x1f, 0x0a, 0x18,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0x98, 0x01,
	0x0a, 0x15, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x4b, 0x0a, 0x08, 0x65,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x08,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x22, 0xa1, 0x01, 0x0a, 0x10, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x2c, 0x0a,
	0x0a, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0d, 0x18, 0x01, 0xfa, 0x42, 0x08, 0x72, 0x06, 0x98, 0x01, 0x00, 0xd0, 0x01, 0x01,
	0x52, 0x09, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x72, 0x1d,
	0x10, 0x04, 0x18, 0x64, 0x32, 0x14, 0x5e, 0x5b, 0x5c, 0x70, 0x4c, 0x5c, 0x70, 0x4e, 0x5c, 0x70,
	0x53, 0x5c, 0x70, 0x4d, 0x5c, 0x70, 0x50, 0x5d, 0x2b, 0x24, 0xd0, 0x01, 0x01, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01,
	0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0xfa, 0x01, 0x0a,
	0x0c, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x43, 0x0a,
	0x03, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x72,
	0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x66, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x72,
	0x65, 0x66, 0x12, 0x30, 0x0a, 0x11, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x10, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x12, 0x56, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x63,
	0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x73,
	0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x4d,
	0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x61,
	0x75, 0x74, 0x68, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x72, 0x69, 0x22, 0x91, 0x01, 0x0a, 0x0f, 0x4b, 0x61,
	0x66, 0x6b, 0x61, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xfa, 0x42, 0x1c, 0x72,
	0x1a, 0x10, 0x04, 0x18, 0x64, 0x32, 0x14, 0x5e, 0x5b, 0x5c, 0x70, 0x4c, 0x5c, 0x70, 0x4e, 0x5c,
	0x70, 0x53, 0x5c, 0x70, 0x4d, 0x5c, 0x70, 0x50, 0x5d, 0x2b, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x72, 0x06, 0xd0, 0x01, 0x01, 0xb0,
	0x01, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0xb3, 0x02,
	0x0a, 0x0d, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12,
	0x49, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73,
	0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x52, 0x65, 0x66, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x4f, 0x0a, 0x0a, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x66, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x66, 0x12, 0x48, 0x0a, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x74,
	0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x10, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xfa, 0x42, 0x1c, 0x72, 0x1a, 0x10, 0x04, 0x18, 0x64,
	0x32, 0x14, 0x5e, 0x5b, 0x5c, 0x70, 0x4c, 0x5c, 0x70, 0x4e, 0x5c, 0x70, 0x53, 0x5c, 0x70, 0x4d,
	0x5c, 0x70, 0x50, 0x5d, 0x2b, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0b, 0xfa, 0x42, 0x08, 0x72, 0x06, 0xd0, 0x01, 0x01, 0xb0, 0x01, 0x01, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x84, 0x02, 0x0a, 0x13, 0x4b, 0x61, 0x66,
	0x6b, 0x61, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x57, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x66, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x31, 0x0a, 0x05, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x18,
	0xf9, 0x01, 0x32, 0x11, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2e,
	0x5f, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x28, 0x0a, 0x09,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0b, 0xfa, 0x42, 0x08, 0x72, 0x06, 0xd0, 0x01, 0x01, 0xb0, 0x01, 0x01, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xfa,
	0x42, 0x0f, 0x72, 0x0d, 0x32, 0x08, 0x5e, 0x5b, 0x20, 0x2d, 0x7e, 0x5d, 0x2b, 0x24, 0xd0, 0x01,
	0x01, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22,
	0xc2, 0x02, 0x0a, 0x09, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x55, 0x73, 0x65, 0x72, 0x12, 0x45, 0x0a,
	0x03, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x72,
	0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x66, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x03, 0x72, 0x65, 0x66, 0x12, 0x33, 0x0a, 0x13, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x11, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x12, 0x52, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x66, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x66, 0x22, 0x6e, 0x0a, 0x0c, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x66, 0x12, 0x21, 0x0a, 0x0a, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x22, 0x9b, 0x01, 0x0a,
	0x13, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x12, 0x4f, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1f, 0xfa, 0x42, 0x1c, 0x72, 0x1a, 0x10, 0x04, 0x18, 0x64, 0x32, 0x14,
	0x5e, 0x5b, 0x5c, 0x70, 0x4c, 0x5c, 0x70, 0x4e, 0x5c, 0x70, 0x53, 0x5c, 0x70, 0x4d, 0x5c, 0x70,
	0x50, 0x5d, 0x2b, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x16, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x66, 0x12, 0x2b, 0x0a, 0x0a, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0x18, 0x01, 0xfa, 0x42, 0x07,
	0x72, 0x05, 0x18, 0x00, 0xd0, 0x01, 0x01, 0x52, 0x09, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x27, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x80, 0x03, 0x0a, 0x06, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x37, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xfa,
	0x42, 0x20, 0x72, 0x1e, 0x10, 0x04, 0x18, 0x64, 0x32, 0x15, 0x5e, 0x5b, 0x5c, 0x70, 0x4c, 0x5c,
	0x70, 0x4e, 0x5c, 0x70, 0x53, 0x5c, 0x70, 0x4d, 0x5c, 0x70, 0x50, 0x20, 0x5d, 0x2b, 0x24, 0xd0,
	0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x72, 0x03, 0x18, 0xe8, 0x07, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x0d, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x72, 0x03, 0x18, 0xe8, 0x07, 0x52, 0x0c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x0e, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06,
	0x1a, 0x04, 0x28, 0x01, 0x40, 0x01, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x3f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x55, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x44, 0x10, 0x03, 0x22, 0xb6, 0x01,
	0x0a, 0x12, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xaf, 0x01, 0x0a, 0x09, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x52, 0x65, 0x66, 0x12, 0x1b, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x0b, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x22, 0xe9, 0x06, 0x0a, 0x06, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x12, 0x42, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x66, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x44, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0b, 0x66, 0x69,
	0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x12, 0x47, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x5f, 0x0a, 0x0d, 0x73, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x13, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x1a, 0xbf, 0x02, 0x0a, 0x16, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xfa, 0x42, 0x0d, 0x72, 0x0b,
	0x32, 0x09, 0x5e, 0x5b, 0x5e, 0x5c, 0x70, 0x43, 0x5d, 0x2b, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x5d, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x3f, 0xfa, 0x42, 0x3c, 0x72, 0x3a, 0x32, 0x35, 0x5e, 0x28, 0x5b,
	0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5f, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30,
	0x2d, 0x39, 0x5f, 0x5d, 0x2a, 0x29, 0x28, 0x5c, 0x2e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a,
	0x5f, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x5d, 0x2a, 0x29,
	0x2a, 0x24, 0xd0, 0x01, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x1a, 0x0a, 0x03, 0x64, 0x6f, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x72, 0x03, 0x18, 0x88, 0x27, 0x52, 0x03, 0x64, 0x6f, 0x63, 0x12, 0x43, 0x0a, 0x05,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x74,
	0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x12, 0x3f, 0x0a, 0x09, 0x61, 0x76, 0x72, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x72, 0x1d, 0x32, 0x18, 0x5e, 0x5b, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5f, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d,
	0x39, 0x5f, 0x5d, 0x2a, 0x24, 0xd0, 0x01, 0x01, 0x52, 0x08, 0x61, 0x76, 0x72, 0x6f, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x70, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x52, 0x43,
	0x48, 0x49, 0x56, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x5f, 0x52, 0x45,
	0x56, 0x49, 0x45, 0x57, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x45, 0x54, 0x45, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56,
	0x45, 0x44, 0x10, 0x06, 0x22, 0xe3, 0x02, 0x0a, 0x10, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82,
	0x01, 0x02, 0x20, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xfa, 0x42, 0x0d, 0x72, 0x0b, 0x32,
	0x09, 0x5e, 0x5b, 0x5e, 0x5c, 0x70, 0x43, 0x5d, 0x2b, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x3f, 0x0a, 0x09, 0x61, 0x76, 0x72, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x72, 0x1d, 0x32, 0x18, 0x5e, 0x5b, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x5f, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39,
	0x5f, 0x5d, 0x2a, 0x24, 0xd0, 0x01, 0x01, 0x52, 0x08, 0x61, 0x76, 0x72, 0x6f, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x05, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1a,
	0x0a, 0x03, 0x64, 0x6f, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x72, 0x03, 0x18, 0x88, 0x27, 0x52, 0x03, 0x64, 0x6f, 0x63, 0x22, 0xd5, 0x02, 0x0a, 0x0e, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42,
	0x14, 0x72, 0x12, 0x10, 0x04, 0x18, 0x64, 0x32, 0x09, 0x5e, 0x5b, 0x5e, 0x5c, 0x70, 0x43, 0x5d,
	0x2b, 0x24, 0xd0, 0x01, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0x88, 0x27, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x69, 0x63,
	0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xfa, 0x42,
	0x12, 0x72, 0x10, 0x3a, 0x08, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0xd0, 0x01, 0x01,
	0x88, 0x01, 0x01, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x69, 0x12, 0x3a, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73,
	0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x66, 0x12, 0x1f, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x04,
	0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xfa, 0x42, 0x1c, 0x72, 0x1a, 0x10, 0x04, 0x18,
	0x64, 0x32, 0x14, 0x5e, 0x5b, 0x5c, 0x70, 0x4c, 0x5c, 0x70, 0x4e, 0x5c, 0x70, 0x53, 0x5c, 0x70,
	0x4d, 0x5c, 0x70, 0x50, 0x5d, 0x2b, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16,
	0xfa, 0x42, 0x13, 0x72, 0x11, 0x32, 0x0f, 0x5e, 0x5c, 0x64, 0x2b, 0x5c, 0x2e, 0x5c, 0x64, 0x2b,
	0x5c, 0x2e, 0x5c, 0x64, 0x2b, 0x24, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x82, 0x06, 0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x12, 0x44, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x66, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x4b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x72,
	0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x66,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x66,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x20, 0x0a,
	0x09, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x58, 0x0a, 0x0a, 0x70, 0x69, 0x69, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x50, 0x69, 0x69, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09,
	0x70, 0x69, 0x69, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x49, 0x0a, 0x0b, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x1a, 0x3c, 0x0a, 0x0e, 0x50, 0x69, 0x69, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x62, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x52, 0x43, 0x48, 0x49,
	0x56, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x56, 0x49,
	0x45, 0x57, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45,
	0x54, 0x45, 0x10, 0x05, 0x22, 0xc0, 0x02, 0x0a, 0x15, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x19,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55,
	0x72, 0x69, 0x12, 0x3f, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x69, 0x6e, 0x64,
	0x75, 0x73, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x38, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x19, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x6c, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x20,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xfa, 0x42,
	0x09, 0x72, 0x07, 0x52, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xfe, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x72, 0x65, 0x65, 0x12, 0x40,
	0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x45, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x09, 0x6b, 0x65,
	0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x3d, 0x0a, 0x07, 0x64, 0x65, 0x72, 0x69, 0x76,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x07, 0x64,
	0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x0f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x52, 0x0e, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x73, 0x12, 0x53, 0x0a, 0x0f, 0x6b,
	0x61, 0x66, 0x6b, 0x61, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x52, 0x0e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x73,
	0x22, 0x9f, 0x01, 0x0a, 0x08, 0x53, 0x69, 0x6e, 0x6b, 0x54, 0x72, 0x65, 0x65, 0x12, 0x3a, 0x0a,
	0x04, 0x73, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x74,
	0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6e, 0x6b, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x04, 0x73, 0x69, 0x6e, 0x6b, 0x12, 0x53, 0x0a, 0x0f, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x52, 0x0e,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x02,
	0x18, 0x01, 0x22, 0xc8, 0x06, 0x0a, 0x08, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x12,
	0x44, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73,
	0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x4a, 0x6f, 0x62, 0x52, 0x65, 0x66, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x47, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x5c,
	0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4e, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x57, 0x0a, 0x0a,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x65, 0x0a, 0x12, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x66,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x10, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x66, 0x12, 0x5b, 0x0a, 0x0e,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x6b, 0x0a, 0x14, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x73, 0x44, 0x61, 0x74, 0x61, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x12, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4b, 0x0a, 0x0c, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73,
	0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x72, 0x06, 0xd0, 0x01, 0x01,
	0xb0, 0x01, 0x01, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x22, 0xf0, 0x01,
	0x0a, 0x0f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x12, 0x59, 0x0a, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x48, 0x00, 0x52, 0x12, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x12, 0x76, 0x0a, 0x1b,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x69, 0x63, 0x72, 0x6f, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x48, 0x00, 0x52, 0x18, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x4a, 0x6f, 0x62, 0x42, 0x0a, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x12, 0x03, 0xf8, 0x42, 0x01,
	0x22, 0x9a, 0x01, 0x0a, 0x10, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x4a, 0x6f, 0x62, 0x12, 0x46, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a,
	0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x12, 0x3e, 0x0a,
	0x03, 0x6a, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x72,
	0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f,
	0x62, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x22, 0x79, 0x0a,
	0x0b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x66, 0x12, 0x2c, 0x0a, 0x0a,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0d, 0x18, 0x01, 0xfa, 0x42, 0x08, 0x72, 0x06, 0x98, 0x01, 0x00, 0xd0, 0x01, 0x01, 0x52,
	0x09, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x27, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0xb9, 0x01, 0x0a, 0x0d, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x73, 0x74, 0x72, 0x6d,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0xb0, 0x03, 0x0a, 0x14, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x65, 0x0a,
	0x12, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x74, 0x72, 0x6d,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x66, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x66, 0x12, 0x5b, 0x0a, 0x0b, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0xfa, 0x42, 0x37, 0x72, 0x35,
	0x18, 0x84, 0x07, 0x32, 0x09, 0x5e, 0x2e, 0x2b, 0x5b, 0x5e, 0x5c, 0x2f, 0x5d, 0x24, 0x5a, 0x01,
	0x2e, 0x5a, 0x02, 0x2e, 0x2e, 0xba, 0x01, 0x1a, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x2d, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x2f, 0x61, 0x63, 0x6d, 0x65, 0x2d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0xd0, 0x01, 0x01, 0x52, 0x0a, 0x70, 0x61, 0x74, 0x68, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x12, 0x30, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x09, 0x5e, 0x5b, 0x5e,
	0x5c, 0x70, 0x43, 0x5d, 0x2b, 0x24, 0xd0, 0x01, 0x01, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x54, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x74, 0x72,
	0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x7a, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05,
	0x10, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x20, 0x0a,
	0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x72, 0x05, 0x10, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x22, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x28, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x22, 0xbb, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x39, 0x0a, 0x16, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x14, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73,
	0x12, 0x6f, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x22, 0x89, 0x02, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x6c, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x73, 0x74, 0x72, 0x6d,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x1a,
	0x6c, 0x0a, 0x12, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa2, 0x01,
	0x0a, 0x10, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x61, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73,
	0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2b, 0x0a, 0x12, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a,
	0x6f, 0x62, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x22, 0xa1, 0x01, 0x0a, 0x0f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2a, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xfa, 0x42, 0x11, 0x72, 0x0f, 0x10, 0x04, 0x18, 0x32,
	0x32, 0x09, 0x5e, 0x5b, 0x5e, 0x5c, 0x70, 0x43, 0x5d, 0x2b, 0x24, 0x52, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x41, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x22, 0x64, 0x0a, 0x0d, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x53, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x69, 0x0a, 0x12,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x53, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0xb1, 0x02, 0x0a, 0x0b, 0x44, 0x65, 0x72, 0x69,
	0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4e, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x5b,
	0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x73, 0x74, 0x72,
	0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x6d,
	0x61, 0x73, 0x6b, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x0c, 0x6d,
	0x61, 0x73, 0x6b, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xb7, 0x04, 0x0a, 0x18,
	0x4d, 0x69, 0x63, 0x72, 0x6f, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x12, 0x44, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x66, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x47,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73,
	0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x5c, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x74, 0x72,
	0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x62, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x66, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x66, 0x12, 0x6c, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x11, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x80, 0x01, 0x0a, 0x16, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x37, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6b, 0x5f, 0x61, 0x6e,
	0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x1a, 0x02, 0x28, 0x02, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4b,
	0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x0f, 0x44, 0x61, 0x74,
	0x61, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x66, 0x12, 0x22, 0x0a, 0x06,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x04, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f,
	0xfa, 0x42, 0x1c, 0x72, 0x1a, 0x10, 0x04, 0x18, 0x64, 0x32, 0x14, 0x5e, 0x5b, 0x5c, 0x70, 0x4c,
	0x5c, 0x70, 0x4e, 0x5c, 0x70, 0x53, 0x5c, 0x70, 0x4d, 0x5c, 0x70, 0x50, 0x5d, 0x2b, 0x24, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x13, 0x72, 0x11,
	0x32, 0x0f, 0x5e, 0x5c, 0x64, 0x2b, 0x5c, 0x2e, 0x5c, 0x64, 0x2b, 0x5c, 0x2e, 0x5c, 0x64, 0x2b,
	0x24, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x94, 0x07, 0x0a, 0x0c, 0x44,
	0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x48, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x66, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x4a, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x73, 0x74, 0x72, 0x6d,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x12, 0x24, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x08, 0x6b, 0x65, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x5b, 0x0a, 0x0a, 0x70, 0x69, 0x69,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x50, 0x69, 0x69, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x70, 0x69, 0x69,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x49, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74,
	0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x4d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x45, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x27, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03,
	0xb0, 0x01, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x51,
	0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x1a, 0x3c, 0x0a, 0x0e, 0x50, 0x69, 0x69, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x70, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e,
	0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45,
	0x44, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10,
	0x06, 0x22, 0xe1, 0x06, 0x0a, 0x0d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x6f, 0x0a, 0x14, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x12, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x64, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x30, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x13, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x12, 0x6f, 0x0a, 0x14, 0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d,
	0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x12, 0x6e,
	0x75, 0x6c, 0x6c, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x1a, 0xc0, 0x01, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x70,
	0x69, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x69,
	0x73, 0x50, 0x69, 0x69, 0x12, 0x23, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x71, 0x75, 0x61, 0x73, 0x69,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09,
	0x69, 0x73, 0x51, 0x75, 0x61, 0x73, 0x69, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x75, 0x72,
	0x70, 0x6f, 0x73, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x44,
	0x0a, 0x1f, 0x67, 0x64, 0x70, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x67, 0x64, 0x70, 0x72, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x1a, 0xfe, 0x01, 0x0a, 0x12, 0x4e, 0x75, 0x6c, 0x6c, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x67, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4e, 0x2e, 0x73, 0x74, 0x72, 0x6d,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5a, 0x0a, 0x10, 0x4e, 0x75, 0x6c,
	0x6c, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x1e, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44,
	0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x10, 0x02, 0x22, 0x9f, 0x02, 0x0a, 0x14, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2d,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa,
	0x42, 0x14, 0x72, 0x12, 0x10, 0x04, 0x18, 0x64, 0x32, 0x09, 0x5e, 0x5b, 0x5e, 0x5c, 0x70, 0x43,
	0x5d, 0x2b, 0x24, 0xd0, 0x01, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x3a, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x75, 0x73,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x64,
	0x75, 0x73, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xbb, 0x02, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xfa, 0x42, 0x1c, 0x72, 0x1a, 0x10, 0x02, 0x18,
	0x64, 0x32, 0x14, 0x5e, 0x5b, 0x5c, 0x70, 0x4c, 0x5c, 0x70, 0x4e, 0x5c, 0x70, 0x53, 0x5c, 0x70,
	0x4d, 0x5c, 0x70, 0x50, 0x5d, 0x2b, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0x88, 0x27, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x0f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x45,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x02, 0x22, 0xd6, 0x01, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x20,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa,
	0x42, 0x07, 0x72, 0x05, 0xd0, 0x01, 0x01, 0x60, 0x01, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x33, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xfa, 0x42, 0x11, 0x72, 0x0f, 0x10, 0x02, 0x18, 0x64, 0x32,
	0x09, 0x5e, 0x5b, 0x5e, 0x5c, 0x70, 0x43, 0x5d, 0x2b, 0x24, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xfa, 0x42, 0x11, 0x72, 0x0f, 0x10,
	0x02, 0x18, 0x64, 0x32, 0x09, 0x5e, 0x5b, 0x5e, 0x5c, 0x70, 0x43, 0x5d, 0x2b, 0x24, 0x52, 0x08,
	0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73,
	0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x22, 0x82,
	0x01, 0x0a, 0x0e, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x12, 0x1d, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x23, 0x0a, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x02, 0x18, 0x64, 0x52, 0x07, 0x70, 0x75,
	0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72,
	0x05, 0x10, 0x02, 0xd0, 0x01, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2a, 0x5d, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x44,
	0x4d, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x52,
	0x4f, 0x56, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52,
	0x10, 0x04, 0x2a, 0x8d, 0x01, 0x0a, 0x11, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x42, 0x41, 0x54, 0x43,
	0x48, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07,
	0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x49, 0x4e,
	0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x06, 0x2a, 0x54, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e,
	0x54, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x55,
	0x4d, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x52,
	0x41, 0x4e, 0x55, 0x4c, 0x41, 0x52, 0x10, 0x02, 0x2a, 0x3d, 0x0a, 0x08, 0x53, 0x69, 0x6e, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x49, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x06, 0x0a, 0x02, 0x53, 0x33, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x43, 0x4c, 0x4f, 0x55,
	0x44, 0x10, 0x02, 0x1a, 0x02, 0x18, 0x01, 0x2a, 0x4d, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x4d,
	0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x55, 0x54, 0x48,
	0x5f, 0x4d, 0x45, 0x43, 0x48, 0x41, 0x4e, 0x49, 0x53, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x41, 0x53, 0x4c,
	0x5f, 0x50, 0x4c, 0x41, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x41, 0x53, 0x4c,
	0x5f, 0x53, 0x53, 0x4c, 0x10, 0x02, 0x2a, 0x43, 0x0a, 0x0a, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x56, 0x52, 0x4f, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4a,
	0x53, 0x4f, 0x4e, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x10, 0x02, 0x2a, 0x84, 0x01, 0x0a, 0x14,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x6f, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x53,
	0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4f, 0x4f,
	0x4c, 0x45, 0x41, 0x4e, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10,
	0x03, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45, 0x52, 0x10, 0x04, 0x12, 0x08,
	0x0a, 0x04, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x44, 0x45,
	0x10, 0x0a, 0x2a, 0x5f, 0x0a, 0x13, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x46, 0x49, 0x4c,
	0x54, 0x45, 0x52, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41,
	0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10,
	0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54,
	0x45, 0x10, 0x02, 0x2a, 0x65, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x54,
	0x41, 0x54, 0x49, 0x53, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x4d, 0x49, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x4f, 0x52, 0x44, 0x49, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4e,
	0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x03, 0x2a, 0x92, 0x01, 0x0a, 0x10, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x12,
	0x21, 0x0a, 0x1d, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x52, 0x45, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x45,
	0x4c, 0x46, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x41,
	0x57, 0x53, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x5f, 0x50,
	0x41, 0x59, 0x47, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x57, 0x53, 0x5f, 0x4d, 0x41, 0x52,
	0x4b, 0x45, 0x54, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x5f, 0x42, 0x59, 0x4f, 0x4c, 0x10, 0x05, 0x2a,
	0x3b, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x19, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x50, 0x4f, 0x53, 0x54, 0x47, 0x52, 0x45, 0x53, 0x10, 0x01, 0x42, 0x69, 0x0a, 0x1e,
	0x69, 0x6f, 0x2e, 0x73, 0x74, 0x72, 0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x50, 0x01,
	0x5a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x72,
	0x6d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2d, 0x67, 0x6f, 0x2f, 0x76, 0x32, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescOnce sync.Once
	file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescData = file_strmprivacy_api_entities_v1_entities_v1_proto_rawDesc
)

func file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescGZIP() []byte {
	file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescOnce.Do(func() {
		file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescData = protoimpl.X.CompressGZIP(file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescData)
	})
	return file_strmprivacy_api_entities_v1_entities_v1_proto_rawDescData
}

var file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes = make([]protoimpl.EnumInfo, 17)
var file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes = make([]protoimpl.MessageInfo, 79)
var file_strmprivacy_api_entities_v1_entities_v1_proto_goTypes = []interface{}{
	(UserRole)(0),             // 0: strmprivacy.api.entities.v1.UserRole
	(BatchJobStateType)(0),    // 1: strmprivacy.api.entities.v1.BatchJobStateType
	(ConsentLevelType)(0),     // 2: strmprivacy.api.entities.v1.ConsentLevelType
	(SinkType)(0),             // 3: strmprivacy.api.entities.v1.SinkType
	(AuthMechanism)(0),        // 4: strmprivacy.api.entities.v1.AuthMechanism
	(SchemaType)(0),           // 5: strmprivacy.api.entities.v1.SchemaType
	(SimpleSchemaNodeType)(0), // 6: strmprivacy.api.entities.v1.SimpleSchemaNodeType
	(FilterPublicPrivate)(0),  // 7: strmprivacy.api.entities.v1.FilterPublicPrivate
	(StatisticalDataType)(0),  // 8: strmprivacy.api.entities.v1.StatisticalDataType
	(SubscriptionPlan)(0),     // 9: strmprivacy.api.entities.v1.SubscriptionPlan
	(DatabaseType)(0),         // 10: strmprivacy.api.entities.v1.DatabaseType
	(Policy_State)(0),         // 11: strmprivacy.api.entities.v1.Policy.State
	(Schema_State)(0),         // 12: strmprivacy.api.entities.v1.Schema.State
	(EventContract_State)(0),  // 13: strmprivacy.api.entities.v1.EventContract.State
	(DataContract_State)(0),   // 14: strmprivacy.api.entities.v1.DataContract.State
	(FieldMetadata_NullHandlingConfig_NullHandlingType)(0), // 15: strmprivacy.api.entities.v1.FieldMetadata.NullHandlingConfig.NullHandlingType
	(Project_State)(0),                        // 16: strmprivacy.api.entities.v1.Project.State
	(*Stream)(nil),                            // 17: strmprivacy.api.entities.v1.Stream
	(*ExtendedStream)(nil),                    // 18: strmprivacy.api.entities.v1.ExtendedStream
	(*ExtendedStreamGroup)(nil),               // 19: strmprivacy.api.entities.v1.ExtendedStreamGroup
	(*MaskedFields)(nil),                      // 20: strmprivacy.api.entities.v1.MaskedFields
	(*Limits)(nil),                            // 21: strmprivacy.api.entities.v1.Limits
	(*KeyStream)(nil),                         // 22: strmprivacy.api.entities.v1.KeyStream
	(*StreamRef)(nil),                         // 23: strmprivacy.api.entities.v1.StreamRef
	(*KeyStreamRef)(nil),                      // 24: strmprivacy.api.entities.v1.KeyStreamRef
	(*Credentials)(nil),                       // 25: strmprivacy.api.entities.v1.Credentials
	(*Sink)(nil),                              // 26: strmprivacy.api.entities.v1.Sink
	(*SinkRef)(nil),                           // 27: strmprivacy.api.entities.v1.SinkRef
	(*BucketConfig)(nil),                      // 28: strmprivacy.api.entities.v1.BucketConfig
	(*DataConnector)(nil),                     // 29: strmprivacy.api.entities.v1.DataConnector
	(*DataConnectorRef)(nil),                  // 30: strmprivacy.api.entities.v1.DataConnectorRef
	(*DataConnectorDependentEntities)(nil),    // 31: strmprivacy.api.entities.v1.DataConnectorDependentEntities
	(*AwsS3BucketLocation)(nil),               // 32: strmprivacy.api.entities.v1.AwsS3BucketLocation
	(*GoogleCloudStorageBucketLocation)(nil),  // 33: strmprivacy.api.entities.v1.GoogleCloudStorageBucketLocation
	(*AzureBlobStorageContainerLocation)(nil), // 34: strmprivacy.api.entities.v1.AzureBlobStorageContainerLocation
	(*AzureClientSecretCredential)(nil),       // 35: strmprivacy.api.entities.v1.AzureClientSecretCredential
	(*JdbcConfig)(nil),                        // 36: strmprivacy.api.entities.v1.JdbcConfig
	(*DataType)(nil),                          // 37: strmprivacy.api.entities.v1.DataType
	(*CsvConfig)(nil),                         // 38: strmprivacy.api.entities.v1.CsvConfig
	(*BatchExporter)(nil),                     // 39: strmprivacy.api.entities.v1.BatchExporter
	(*ExtendedBatchExporter)(nil),             // 40: strmprivacy.api.entities.v1.ExtendedBatchExporter
	(*BatchExporterRef)(nil),                  // 41: strmprivacy.api.entities.v1.BatchExporterRef
	(*KafkaCluster)(nil),                      // 42: strmprivacy.api.entities.v1.KafkaCluster
	(*KafkaClusterRef)(nil),                   // 43: strmprivacy.api.entities.v1.KafkaClusterRef
	(*KafkaExporter)(nil),                     // 44: strmprivacy.api.entities.v1.KafkaExporter
	(*KafkaExporterRef)(nil),                  // 45: strmprivacy.api.entities.v1.KafkaExporterRef
	(*KafkaExporterTarget)(nil),               // 46: strmprivacy.api.entities.v1.KafkaExporterTarget
	(*KafkaUser)(nil),                         // 47: strmprivacy.api.entities.v1.KafkaUser
	(*KafkaUserRef)(nil),                      // 48: strmprivacy.api.entities.v1.KafkaUserRef
	(*ConsentLevels)(nil),                     // 49: strmprivacy.api.entities.v1.ConsentLevels
	(*ConsentLevelMapping)(nil),               // 50: strmprivacy.api.entities.v1.ConsentLevelMapping
	(*ConsentLevelMappingRef)(nil),            // 51: strmprivacy.api.entities.v1.ConsentLevelMappingRef
	(*Policy)(nil),                            // 52: strmprivacy.api.entities.v1.Policy
	(*WindowedEventCount)(nil),                // 53: strmprivacy.api.entities.v1.WindowedEventCount
	(*SchemaRef)(nil),                         // 54: strmprivacy.api.entities.v1.SchemaRef
	(*Schema)(nil),                            // 55: strmprivacy.api.entities.v1.Schema
	(*SimpleSchemaNode)(nil),                  // 56: strmprivacy.api.entities.v1.SimpleSchemaNode
	(*SchemaMetadata)(nil),                    // 57: strmprivacy.api.entities.v1.SchemaMetadata
	(*EventContractRef)(nil),                  // 58: strmprivacy.api.entities.v1.EventContractRef
	(*EventContract)(nil),                     // 59: strmprivacy.api.entities.v1.EventContract
	(*EventContractMetadata)(nil),             // 60: strmprivacy.api.entities.v1.EventContractMetadata
	(*Label)(nil),                             // 61: strmprivacy.api.entities.v1.Label
	(*Validation)(nil),                        // 62: strmprivacy.api.entities.v1.Validation
	(*StreamTree)(nil),                        // 63: strmprivacy.api.entities.v1.StreamTree
	(*SinkTree)(nil),                          // 64: strmprivacy.api.entities.v1.SinkTree
	(*BatchJob)(nil),                          // 65: strmprivacy.api.entities.v1.BatchJob
	(*BatchJobWrapper)(nil),                   // 66: strmprivacy.api.entities.v1.BatchJobWrapper
	(*ExtendedBatchJob)(nil),                  // 67: strmprivacy.api.entities.v1.ExtendedBatchJob
	(*BatchJobRef)(nil),                       // 68: strmprivacy.api.entities.v1.BatchJobRef
	(*BatchJobState)(nil),                     // 69: strmprivacy.api.entities.v1.BatchJobState
	(*DataConnectorAndType)(nil),              // 70: strmprivacy.api.entities.v1.DataConnectorAndType
	(*DatabaseConfig)(nil),                    // 71: strmprivacy.api.entities.v1.DatabaseConfig
	(*ConsentConfig)(nil),                     // 72: strmprivacy.api.entities.v1.ConsentConfig
	(*ConsentLevelExtractor)(nil),             // 73: strmprivacy.api.entities.v1.ConsentLevelExtractor
	(*EncryptionConfig)(nil),                  // 74: strmprivacy.api.entities.v1.EncryptionConfig
	(*TimestampConfig)(nil),                   // 75: strmprivacy.api.entities.v1.TimestampConfig
	(*EncryptedData)(nil),                     // 76: strmprivacy.api.entities.v1.EncryptedData
	(*EncryptionKeysData)(nil),                // 77: strmprivacy.api.entities.v1.EncryptionKeysData
	(*DerivedData)(nil),                       // 78: strmprivacy.api.entities.v1.DerivedData
	(*MicroAggregationBatchJob)(nil),          // 79: strmprivacy.api.entities.v1.MicroAggregationBatchJob
	(*MicroAggregationConfig)(nil),            // 80: strmprivacy.api.entities.v1.MicroAggregationConfig
	(*DataContractRef)(nil),                   // 81: strmprivacy.api.entities.v1.DataContractRef
	(*DataContract)(nil),                      // 82: strmprivacy.api.entities.v1.DataContract
	(*FieldMetadata)(nil),                     // 83: strmprivacy.api.entities.v1.FieldMetadata
	(*DataContractMetadata)(nil),              // 84: strmprivacy.api.entities.v1.DataContractMetadata
	(*Project)(nil),                           // 85: strmprivacy.api.entities.v1.Project
	(*User)(nil),                              // 86: strmprivacy.api.entities.v1.User
	(*PurposeMapping)(nil),                    // 87: strmprivacy.api.entities.v1.PurposeMapping
	nil,                                       // 88: strmprivacy.api.entities.v1.MaskedFields.FieldPatternsEntry
	(*MaskedFields_PatternList)(nil),          // 89: strmprivacy.api.entities.v1.MaskedFields.PatternList
	(*Schema_SimpleSchemaDefinition)(nil),     // 90: strmprivacy.api.entities.v1.Schema.SimpleSchemaDefinition
	nil,                                       // 91: strmprivacy.api.entities.v1.EventContract.PiiFieldsEntry
	nil,                                       // 92: strmprivacy.api.entities.v1.ConsentLevelExtractor.FieldPatternsEntry
	nil,                                       // 93: strmprivacy.api.entities.v1.DataContract.PiiFieldsEntry
	(*FieldMetadata_PersonalDataConfig)(nil),  // 94: strmprivacy.api.entities.v1.FieldMetadata.PersonalDataConfig
	(*FieldMetadata_NullHandlingConfig)(nil),  // 95: strmprivacy.api.entities.v1.FieldMetadata.NullHandlingConfig
	(*durationpb.Duration)(nil),               // 96: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),             // 97: google.protobuf.Timestamp
	(*datetime.TimeZone)(nil),                 // 98: google.type.TimeZone
}
var file_strmprivacy_api_entities_v1_entities_v1_proto_depIdxs = []int32{
	23,  // 0: strmprivacy.api.entities.v1.Stream.ref:type_name -> strmprivacy.api.entities.v1.StreamRef
	2,   // 1: strmprivacy.api.entities.v1.Stream.consent_level_type:type_name -> strmprivacy.api.entities.v1.ConsentLevelType
	21,  // 2: strmprivacy.api.entities.v1.Stream.limits:type_name -> strmprivacy.api.entities.v1.Limits
	25,  // 3: strmprivacy.api.entities.v1.Stream.credentials:type_name -> strmprivacy.api.entities.v1.Credentials
	20,  // 4: strmprivacy.api.entities.v1.Stream.masked_fields:type_name -> strmprivacy.api.entities.v1.MaskedFields
	17,  // 5: strmprivacy.api.entities.v1.ExtendedStream.stream:type_name -> strmprivacy.api.entities.v1.Stream
	18,  // 6: strmprivacy.api.entities.v1.ExtendedStreamGroup.source_stream:type_name -> strmprivacy.api.entities.v1.ExtendedStream
	18,  // 7: strmprivacy.api.entities.v1.ExtendedStreamGroup.derived_streams:type_name -> strmprivacy.api.entities.v1.ExtendedStream
	88,  // 8: strmprivacy.api.entities.v1.MaskedFields.field_patterns:type_name -> strmprivacy.api.entities.v1.MaskedFields.FieldPatternsEntry
	24,  // 9: strmprivacy.api.entities.v1.KeyStream.ref:type_name -> strmprivacy.api.entities.v1.KeyStreamRef
	27,  // 10: strmprivacy.api.entities.v1.Sink.ref:type_name -> strmprivacy.api.entities.v1.SinkRef
	3,   // 11: strmprivacy.api.entities.v1.Sink.sink_type:type_name -> strmprivacy.api.entities.v1.SinkType
	28,  // 12: strmprivacy.api.entities.v1.Sink.bucket:type_name -> strmprivacy.api.entities.v1.BucketConfig
	30,  // 13: strmprivacy.api.entities.v1.DataConnector.ref:type_name -> strmprivacy.api.entities.v1.DataConnectorRef
	32,  // 14: strmprivacy.api.entities.v1.DataConnector.s3_bucket:type_name -> strmprivacy.api.entities.v1.AwsS3BucketLocation
	33,  // 15: strmprivacy.api.entities.v1.DataConnector.google_cloud_storage_bucket:type_name -> strmprivacy.api.entities.v1.GoogleCloudStorageBucketLocation
	34,  // 16: strmprivacy.api.entities.v1.DataConnector.azure_blob_storage_container:type_name -> strmprivacy.api.entities.v1.AzureBlobStorageContainerLocation
	36,  // 17: strmprivacy.api.entities.v1.DataConnector.jdbc_config:type_name -> strmprivacy.api.entities.v1.JdbcConfig
	31,  // 18: strmprivacy.api.entities.v1.DataConnector.dependent_entities:type_name -> strmprivacy.api.entities.v1.DataConnectorDependentEntities
	39,  // 19: strmprivacy.api.entities.v1.DataConnectorDependentEntities.batch_exporters:type_name -> strmprivacy.api.entities.v1.BatchExporter
	65,  // 20: strmprivacy.api.entities.v1.DataConnectorDependentEntities.batch_jobs:type_name -> strmprivacy.api.entities.v1.BatchJob
	79,  // 21: strmprivacy.api.entities.v1.DataConnectorDependentEntities.micro_aggregation_batch_jobs:type_name -> strmprivacy.api.entities.v1.MicroAggregationBatchJob
	35,  // 22: strmprivacy.api.entities.v1.AzureBlobStorageContainerLocation.client_secret_credential:type_name -> strmprivacy.api.entities.v1.AzureClientSecretCredential
	10,  // 23: strmprivacy.api.entities.v1.JdbcConfig.database_type:type_name -> strmprivacy.api.entities.v1.DatabaseType
	38,  // 24: strmprivacy.api.entities.v1.DataType.csv:type_name -> strmprivacy.api.entities.v1.CsvConfig
	41,  // 25: strmprivacy.api.entities.v1.BatchExporter.ref:type_name -> strmprivacy.api.entities.v1.BatchExporterRef
	23,  // 26: strmprivacy.api.entities.v1.BatchExporter.stream_ref:type_name -> strmprivacy.api.entities.v1.StreamRef
	24,  // 27: strmprivacy.api.entities.v1.BatchExporter.key_stream_ref:type_name -> strmprivacy.api.entities.v1.KeyStreamRef
	96,  // 28: strmprivacy.api.entities.v1.BatchExporter.interval:type_name -> google.protobuf.Duration
	30,  // 29: strmprivacy.api.entities.v1.BatchExporter.data_connector_ref:type_name -> strmprivacy.api.entities.v1.DataConnectorRef
	39,  // 30: strmprivacy.api.entities.v1.ExtendedBatchExporter.exporter:type_name -> strmprivacy.api.entities.v1.BatchExporter
	43,  // 31: strmprivacy.api.entities.v1.KafkaCluster.ref:type_name -> strmprivacy.api.entities.v1.KafkaClusterRef
	4,   // 32: strmprivacy.api.entities.v1.KafkaCluster.auth_mechanism:type_name -> strmprivacy.api.entities.v1.AuthMechanism
	45,  // 33: strmprivacy.api.entities.v1.KafkaExporter.ref:type_name -> strmprivacy.api.entities.v1.KafkaExporterRef
	23,  // 34: strmprivacy.api.entities.v1.KafkaExporter.stream_ref:type_name -> strmprivacy.api.entities.v1.StreamRef
	46,  // 35: strmprivacy.api.entities.v1.KafkaExporter.target:type_name -> strmprivacy.api.entities.v1.KafkaExporterTarget
	47,  // 36: strmprivacy.api.entities.v1.KafkaExporter.users:type_name -> strmprivacy.api.entities.v1.KafkaUser
	43,  // 37: strmprivacy.api.entities.v1.KafkaExporterTarget.cluster_ref:type_name -> strmprivacy.api.entities.v1.KafkaClusterRef
	48,  // 38: strmprivacy.api.entities.v1.KafkaUser.ref:type_name -> strmprivacy.api.entities.v1.KafkaUserRef
	43,  // 39: strmprivacy.api.entities.v1.KafkaUser.cluster_ref:type_name -> strmprivacy.api.entities.v1.KafkaClusterRef
	51,  // 40: strmprivacy.api.entities.v1.ConsentLevelMapping.ref:type_name -> strmprivacy.api.entities.v1.ConsentLevelMappingRef
	11,  // 41: strmprivacy.api.entities.v1.Policy.state:type_name -> strmprivacy.api.entities.v1.Policy.State
	97,  // 42: strmprivacy.api.entities.v1.WindowedEventCount.start_time:type_name -> google.protobuf.Timestamp
	97,  // 43: strmprivacy.api.entities.v1.WindowedEventCount.end_time:type_name -> google.protobuf.Timestamp
	5,   // 44: strmprivacy.api.entities.v1.SchemaRef.schema_type:type_name -> strmprivacy.api.entities.v1.SchemaType
	54,  // 45: strmprivacy.api.entities.v1.Schema.ref:type_name -> strmprivacy.api.entities.v1.SchemaRef
	12,  // 46: strmprivacy.api.entities.v1.Schema.state:type_name -> strmprivacy.api.entities.v1.Schema.State
	57,  // 47: strmprivacy.api.entities.v1.Schema.metadata:type_name -> strmprivacy.api.entities.v1.SchemaMetadata
	90,  // 48: strmprivacy.api.entities.v1.Schema.simple_schema:type_name -> strmprivacy.api.entities.v1.Schema.SimpleSchemaDefinition
	6,   // 49: strmprivacy.api.entities.v1.SimpleSchemaNode.type:type_name -> strmprivacy.api.entities.v1.SimpleSchemaNodeType
	56,  // 50: strmprivacy.api.entities.v1.SimpleSchemaNode.nodes:type_name -> strmprivacy.api.entities.v1.SimpleSchemaNode
	97,  // 51: strmprivacy.api.entities.v1.SchemaMetadata.create_time:type_name -> google.protobuf.Timestamp
	61,  // 52: strmprivacy.api.entities.v1.SchemaMetadata.labels:type_name -> strmprivacy.api.entities.v1.Label
	58,  // 53: strmprivacy.api.entities.v1.EventContract.ref:type_name -> strmprivacy.api.entities.v1.EventContractRef
	13,  // 54: strmprivacy.api.entities.v1.EventContract.state:type_name -> strmprivacy.api.entities.v1.EventContract.State
	54,  // 55: strmprivacy.api.entities.v1.EventContract.schema_ref:type_name -> strmprivacy.api.entities.v1.SchemaRef
	91,  // 56: strmprivacy.api.entities.v1.EventContract.pii_fields:type_name -> strmprivacy.api.entities.v1.EventContract.PiiFieldsEntry
	62,  // 57: strmprivacy.api.entities.v1.EventContract.validations:type_name -> strmprivacy.api.entities.v1.Validation
	60,  // 58: strmprivacy.api.entities.v1.EventContract.metadata:type_name -> strmprivacy.api.entities.v1.EventContractMetadata
	97,  // 59: strmprivacy.api.entities.v1.EventContractMetadata.create_time:type_name -> google.protobuf.Timestamp
	61,  // 60: strmprivacy.api.entities.v1.EventContractMetadata.labels:type_name -> strmprivacy.api.entities.v1.Label
	17,  // 61: strmprivacy.api.entities.v1.StreamTree.stream:type_name -> strmprivacy.api.entities.v1.Stream
	22,  // 62: strmprivacy.api.entities.v1.StreamTree.key_stream:type_name -> strmprivacy.api.entities.v1.KeyStream
	17,  // 63: strmprivacy.api.entities.v1.StreamTree.derived:type_name -> strmprivacy.api.entities.v1.Stream
	39,  // 64: strmprivacy.api.entities.v1.StreamTree.batch_exporters:type_name -> strmprivacy.api.entities.v1.BatchExporter
	44,  // 65: strmprivacy.api.entities.v1.StreamTree.kafka_exporters:type_name -> strmprivacy.api.entities.v1.KafkaExporter
	26,  // 66: strmprivacy.api.entities.v1.SinkTree.sink:type_name -> strmprivacy.api.entities.v1.Sink
	39,  // 67: strmprivacy.api.entities.v1.SinkTree.batch_exporters:type_name -> strmprivacy.api.entities.v1.BatchExporter
	68,  // 68: strmprivacy.api.entities.v1.BatchJob.ref:type_name -> strmprivacy.api.entities.v1.BatchJobRef
	69,  // 69: strmprivacy.api.entities.v1.BatchJob.states:type_name -> strmprivacy.api.entities.v1.BatchJobState
	70,  // 70: strmprivacy.api.entities.v1.BatchJob.source_data:type_name -> strmprivacy.api.entities.v1.DataConnectorAndType
	72,  // 71: strmprivacy.api.entities.v1.BatchJob.consent:type_name -> strmprivacy.api.entities.v1.ConsentConfig
	74,  // 72: strmprivacy.api.entities.v1.BatchJob.encryption:type_name -> strmprivacy.api.entities.v1.EncryptionConfig
	58,  // 73: strmprivacy.api.entities.v1.BatchJob.event_contract_ref:type_name -> strmprivacy.api.entities.v1.EventContractRef
	76,  // 74: strmprivacy.api.entities.v1.BatchJob.encrypted_data:type_name -> strmprivacy.api.entities.v1.EncryptedData
	77,  // 75: strmprivacy.api.entities.v1.BatchJob.encryption_keys_data:type_name -> strmprivacy.api.entities.v1.EncryptionKeysData
	78,  // 76: strmprivacy.api.entities.v1.BatchJob.derived_data:type_name -> strmprivacy.api.entities.v1.DerivedData
	65,  // 77: strmprivacy.api.entities.v1.BatchJobWrapper.encryption_batch_job:type_name -> strmprivacy.api.entities.v1.BatchJob
	79,  // 78: strmprivacy.api.entities.v1.BatchJobWrapper.micro_aggregation_batch_job:type_name -> strmprivacy.api.entities.v1.MicroAggregationBatchJob
	65,  // 79: strmprivacy.api.entities.v1.ExtendedBatchJob.batch_job:type_name -> strmprivacy.api.entities.v1.BatchJob
	66,  // 80: strmprivacy.api.entities.v1.ExtendedBatchJob.job:type_name -> strmprivacy.api.entities.v1.BatchJobWrapper
	97,  // 81: strmprivacy.api.entities.v1.BatchJobState.state_time:type_name -> google.protobuf.Timestamp
	1,   // 82: strmprivacy.api.entities.v1.BatchJobState.state:type_name -> strmprivacy.api.entities.v1.BatchJobStateType
	30,  // 83: strmprivacy.api.entities.v1.DataConnectorAndType.data_connector_ref:type_name -> strmprivacy.api.entities.v1.DataConnectorRef
	37,  // 84: strmprivacy.api.entities.v1.DataConnectorAndType.data_type:type_name -> strmprivacy.api.entities.v1.DataType
	71,  // 85: strmprivacy.api.entities.v1.DataConnectorAndType.database_config:type_name -> strmprivacy.api.entities.v1.DatabaseConfig
	73,  // 86: strmprivacy.api.entities.v1.ConsentConfig.consent_level_extractor:type_name -> strmprivacy.api.entities.v1.ConsentLevelExtractor
	92,  // 87: strmprivacy.api.entities.v1.ConsentLevelExtractor.field_patterns:type_name -> strmprivacy.api.entities.v1.ConsentLevelExtractor.FieldPatternsEntry
	75,  // 88: strmprivacy.api.entities.v1.EncryptionConfig.timestamp_config:type_name -> strmprivacy.api.entities.v1.TimestampConfig
	98,  // 89: strmprivacy.api.entities.v1.TimestampConfig.default_time_zone:type_name -> google.type.TimeZone
	70,  // 90: strmprivacy.api.entities.v1.EncryptedData.target:type_name -> strmprivacy.api.entities.v1.DataConnectorAndType
	70,  // 91: strmprivacy.api.entities.v1.EncryptionKeysData.target:type_name -> strmprivacy.api.entities.v1.DataConnectorAndType
	70,  // 92: strmprivacy.api.entities.v1.DerivedData.target:type_name -> strmprivacy.api.entities.v1.DataConnectorAndType
	2,   // 93: strmprivacy.api.entities.v1.DerivedData.consent_level_type:type_name -> strmprivacy.api.entities.v1.ConsentLevelType
	20,  // 94: strmprivacy.api.entities.v1.DerivedData.masked_fields:type_name -> strmprivacy.api.entities.v1.MaskedFields
	68,  // 95: strmprivacy.api.entities.v1.MicroAggregationBatchJob.ref:type_name -> strmprivacy.api.entities.v1.BatchJobRef
	69,  // 96: strmprivacy.api.entities.v1.MicroAggregationBatchJob.states:type_name -> strmprivacy.api.entities.v1.BatchJobState
	70,  // 97: strmprivacy.api.entities.v1.MicroAggregationBatchJob.source_data:type_name -> strmprivacy.api.entities.v1.DataConnectorAndType
	70,  // 98: strmprivacy.api.entities.v1.MicroAggregationBatchJob.target_data:type_name -> strmprivacy.api.entities.v1.DataConnectorAndType
	81,  // 99: strmprivacy.api.entities.v1.MicroAggregationBatchJob.data_contract_ref:type_name -> strmprivacy.api.entities.v1.DataContractRef
	80,  // 100: strmprivacy.api.entities.v1.MicroAggregationBatchJob.aggregation_config:type_name -> strmprivacy.api.entities.v1.MicroAggregationConfig
	81,  // 101: strmprivacy.api.entities.v1.DataContract.ref:type_name -> strmprivacy.api.entities.v1.DataContractRef
	14,  // 102: strmprivacy.api.entities.v1.DataContract.state:type_name -> strmprivacy.api.entities.v1.DataContract.State
	93,  // 103: strmprivacy.api.entities.v1.DataContract.pii_fields:type_name -> strmprivacy.api.entities.v1.DataContract.PiiFieldsEntry
	62,  // 104: strmprivacy.api.entities.v1.DataContract.validations:type_name -> strmprivacy.api.entities.v1.Validation
	84,  // 105: strmprivacy.api.entities.v1.DataContract.metadata:type_name -> strmprivacy.api.entities.v1.DataContractMetadata
	55,  // 106: strmprivacy.api.entities.v1.DataContract.schema:type_name -> strmprivacy.api.entities.v1.Schema
	83,  // 107: strmprivacy.api.entities.v1.DataContract.field_metadata:type_name -> strmprivacy.api.entities.v1.FieldMetadata
	94,  // 108: strmprivacy.api.entities.v1.FieldMetadata.personal_data_config:type_name -> strmprivacy.api.entities.v1.FieldMetadata.PersonalDataConfig
	8,   // 109: strmprivacy.api.entities.v1.FieldMetadata.statistical_data_type:type_name -> strmprivacy.api.entities.v1.StatisticalDataType
	95,  // 110: strmprivacy.api.entities.v1.FieldMetadata.null_handling_config:type_name -> strmprivacy.api.entities.v1.FieldMetadata.NullHandlingConfig
	97,  // 111: strmprivacy.api.entities.v1.DataContractMetadata.create_time:type_name -> google.protobuf.Timestamp
	61,  // 112: strmprivacy.api.entities.v1.DataContractMetadata.labels:type_name -> strmprivacy.api.entities.v1.Label
	16,  // 113: strmprivacy.api.entities.v1.Project.state:type_name -> strmprivacy.api.entities.v1.Project.State
	0,   // 114: strmprivacy.api.entities.v1.User.user_roles:type_name -> strmprivacy.api.entities.v1.UserRole
	89,  // 115: strmprivacy.api.entities.v1.MaskedFields.FieldPatternsEntry.value:type_name -> strmprivacy.api.entities.v1.MaskedFields.PatternList
	56,  // 116: strmprivacy.api.entities.v1.Schema.SimpleSchemaDefinition.nodes:type_name -> strmprivacy.api.entities.v1.SimpleSchemaNode
	49,  // 117: strmprivacy.api.entities.v1.ConsentLevelExtractor.FieldPatternsEntry.value:type_name -> strmprivacy.api.entities.v1.ConsentLevels
	15,  // 118: strmprivacy.api.entities.v1.FieldMetadata.NullHandlingConfig.type:type_name -> strmprivacy.api.entities.v1.FieldMetadata.NullHandlingConfig.NullHandlingType
	119, // [119:119] is the sub-list for method output_type
	119, // [119:119] is the sub-list for method input_type
	119, // [119:119] is the sub-list for extension type_name
	119, // [119:119] is the sub-list for extension extendee
	0,   // [0:119] is the sub-list for field type_name
}

func init() { file_strmprivacy_api_entities_v1_entities_v1_proto_init() }
func file_strmprivacy_api_entities_v1_entities_v1_proto_init() {
	if File_strmprivacy_api_entities_v1_entities_v1_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtendedStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtendedStreamGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaskedFields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Limits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyStreamRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Credentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SinkRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataConnector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataConnectorRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataConnectorDependentEntities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwsS3BucketLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudStorageBucketLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AzureBlobStorageContainerLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AzureClientSecretCredential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JdbcConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsvConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchExporter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtendedBatchExporter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchExporterRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaClusterRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaExporter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaExporterRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaExporterTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaUserRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsentLevels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsentLevelMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsentLevelMappingRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowedEventCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchemaRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleSchemaNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchemaMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventContractRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventContractMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Label); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Validation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SinkTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchJobWrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtendedBatchJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchJobRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchJobState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataConnectorAndType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatabaseConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsentConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsentLevelExtractor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimestampConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptionKeysData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DerivedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MicroAggregationBatchJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MicroAggregationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataContractRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataContractMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Project); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurposeMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaskedFields_PatternList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schema_SimpleSchemaDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldMetadata_PersonalDataConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldMetadata_NullHandlingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*Sink_Bucket)(nil),
	}
	file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*DataConnector_S3Bucket)(nil),
		(*DataConnector_GoogleCloudStorageBucket)(nil),
		(*DataConnector_AzureBlobStorageContainer)(nil),
		(*DataConnector_JdbcConfig)(nil),
	}
	file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*DataType_Csv)(nil),
	}
	file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*BatchExporter_StreamRef)(nil),
		(*BatchExporter_KeyStreamRef)(nil),
	}
	file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes[49].OneofWrappers = []interface{}{
		(*BatchJobWrapper_EncryptionBatchJob)(nil),
		(*BatchJobWrapper_MicroAggregationBatchJob)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_strmprivacy_api_entities_v1_entities_v1_proto_rawDesc,
			NumEnums:      17,
			NumMessages:   79,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_strmprivacy_api_entities_v1_entities_v1_proto_goTypes,
		DependencyIndexes: file_strmprivacy_api_entities_v1_entities_v1_proto_depIdxs,
		EnumInfos:         file_strmprivacy_api_entities_v1_entities_v1_proto_enumTypes,
		MessageInfos:      file_strmprivacy_api_entities_v1_entities_v1_proto_msgTypes,
	}.Build()
	File_strmprivacy_api_entities_v1_entities_v1_proto = out.File
	file_strmprivacy_api_entities_v1_entities_v1_proto_rawDesc = nil
	file_strmprivacy_api_entities_v1_entities_v1_proto_goTypes = nil
	file_strmprivacy_api_entities_v1_entities_v1_proto_depIdxs = nil
}
