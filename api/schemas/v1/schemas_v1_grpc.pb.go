// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.18.1
// source: strmprivacy/api/schemas/v1/schemas_v1.proto

package schemas

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SchemasServiceClient is the client API for SchemasService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchemasServiceClient interface {
	ListSchemas(ctx context.Context, in *ListSchemasRequest, opts ...grpc.CallOption) (*ListSchemasResponse, error)
	GetSchema(ctx context.Context, in *GetSchemaRequest, opts ...grpc.CallOption) (*GetSchemaResponse, error)
	CreateSchema(ctx context.Context, in *CreateSchemaRequest, opts ...grpc.CallOption) (*CreateSchemaResponse, error)
	UpdateSchema(ctx context.Context, in *UpdateSchemaRequest, opts ...grpc.CallOption) (*UpdateSchemaResponse, error)
	GetSchemaCode(ctx context.Context, in *GetSchemaCodeRequest, opts ...grpc.CallOption) (*GetSchemaCodeResponse, error)
	ActivateSchema(ctx context.Context, in *ActivateSchemaRequest, opts ...grpc.CallOption) (*ActivateSchemaResponse, error)
	DeleteSchema(ctx context.Context, in *DeleteSchemaRequest, opts ...grpc.CallOption) (*DeleteSchemaResponse, error)
	ArchiveSchema(ctx context.Context, in *ArchiveSchemaRequest, opts ...grpc.CallOption) (*ArchiveSchemaResponse, error)
	GetSchemaDefinition(ctx context.Context, in *GetSchemaDefinitionRequest, opts ...grpc.CallOption) (*GetSchemaDefinitionResponse, error)
}

type schemasServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSchemasServiceClient(cc grpc.ClientConnInterface) SchemasServiceClient {
	return &schemasServiceClient{cc}
}

func (c *schemasServiceClient) ListSchemas(ctx context.Context, in *ListSchemasRequest, opts ...grpc.CallOption) (*ListSchemasResponse, error) {
	out := new(ListSchemasResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.schemas.v1.SchemasService/ListSchemas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemasServiceClient) GetSchema(ctx context.Context, in *GetSchemaRequest, opts ...grpc.CallOption) (*GetSchemaResponse, error) {
	out := new(GetSchemaResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.schemas.v1.SchemasService/GetSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemasServiceClient) CreateSchema(ctx context.Context, in *CreateSchemaRequest, opts ...grpc.CallOption) (*CreateSchemaResponse, error) {
	out := new(CreateSchemaResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.schemas.v1.SchemasService/CreateSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemasServiceClient) UpdateSchema(ctx context.Context, in *UpdateSchemaRequest, opts ...grpc.CallOption) (*UpdateSchemaResponse, error) {
	out := new(UpdateSchemaResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.schemas.v1.SchemasService/UpdateSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemasServiceClient) GetSchemaCode(ctx context.Context, in *GetSchemaCodeRequest, opts ...grpc.CallOption) (*GetSchemaCodeResponse, error) {
	out := new(GetSchemaCodeResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.schemas.v1.SchemasService/GetSchemaCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemasServiceClient) ActivateSchema(ctx context.Context, in *ActivateSchemaRequest, opts ...grpc.CallOption) (*ActivateSchemaResponse, error) {
	out := new(ActivateSchemaResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.schemas.v1.SchemasService/ActivateSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemasServiceClient) DeleteSchema(ctx context.Context, in *DeleteSchemaRequest, opts ...grpc.CallOption) (*DeleteSchemaResponse, error) {
	out := new(DeleteSchemaResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.schemas.v1.SchemasService/DeleteSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemasServiceClient) ArchiveSchema(ctx context.Context, in *ArchiveSchemaRequest, opts ...grpc.CallOption) (*ArchiveSchemaResponse, error) {
	out := new(ArchiveSchemaResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.schemas.v1.SchemasService/ArchiveSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemasServiceClient) GetSchemaDefinition(ctx context.Context, in *GetSchemaDefinitionRequest, opts ...grpc.CallOption) (*GetSchemaDefinitionResponse, error) {
	out := new(GetSchemaDefinitionResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.schemas.v1.SchemasService/GetSchemaDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchemasServiceServer is the server API for SchemasService service.
// All implementations must embed UnimplementedSchemasServiceServer
// for forward compatibility
type SchemasServiceServer interface {
	ListSchemas(context.Context, *ListSchemasRequest) (*ListSchemasResponse, error)
	GetSchema(context.Context, *GetSchemaRequest) (*GetSchemaResponse, error)
	CreateSchema(context.Context, *CreateSchemaRequest) (*CreateSchemaResponse, error)
	UpdateSchema(context.Context, *UpdateSchemaRequest) (*UpdateSchemaResponse, error)
	GetSchemaCode(context.Context, *GetSchemaCodeRequest) (*GetSchemaCodeResponse, error)
	ActivateSchema(context.Context, *ActivateSchemaRequest) (*ActivateSchemaResponse, error)
	DeleteSchema(context.Context, *DeleteSchemaRequest) (*DeleteSchemaResponse, error)
	ArchiveSchema(context.Context, *ArchiveSchemaRequest) (*ArchiveSchemaResponse, error)
	GetSchemaDefinition(context.Context, *GetSchemaDefinitionRequest) (*GetSchemaDefinitionResponse, error)
	mustEmbedUnimplementedSchemasServiceServer()
}

// UnimplementedSchemasServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSchemasServiceServer struct {
}

func (UnimplementedSchemasServiceServer) ListSchemas(context.Context, *ListSchemasRequest) (*ListSchemasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSchemas not implemented")
}
func (UnimplementedSchemasServiceServer) GetSchema(context.Context, *GetSchemaRequest) (*GetSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchema not implemented")
}
func (UnimplementedSchemasServiceServer) CreateSchema(context.Context, *CreateSchemaRequest) (*CreateSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSchema not implemented")
}
func (UnimplementedSchemasServiceServer) UpdateSchema(context.Context, *UpdateSchemaRequest) (*UpdateSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSchema not implemented")
}
func (UnimplementedSchemasServiceServer) GetSchemaCode(context.Context, *GetSchemaCodeRequest) (*GetSchemaCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchemaCode not implemented")
}
func (UnimplementedSchemasServiceServer) ActivateSchema(context.Context, *ActivateSchemaRequest) (*ActivateSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateSchema not implemented")
}
func (UnimplementedSchemasServiceServer) DeleteSchema(context.Context, *DeleteSchemaRequest) (*DeleteSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSchema not implemented")
}
func (UnimplementedSchemasServiceServer) ArchiveSchema(context.Context, *ArchiveSchemaRequest) (*ArchiveSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveSchema not implemented")
}
func (UnimplementedSchemasServiceServer) GetSchemaDefinition(context.Context, *GetSchemaDefinitionRequest) (*GetSchemaDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchemaDefinition not implemented")
}
func (UnimplementedSchemasServiceServer) mustEmbedUnimplementedSchemasServiceServer() {}

// UnsafeSchemasServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchemasServiceServer will
// result in compilation errors.
type UnsafeSchemasServiceServer interface {
	mustEmbedUnimplementedSchemasServiceServer()
}

func RegisterSchemasServiceServer(s grpc.ServiceRegistrar, srv SchemasServiceServer) {
	s.RegisterService(&SchemasService_ServiceDesc, srv)
}

func _SchemasService_ListSchemas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSchemasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemasServiceServer).ListSchemas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.schemas.v1.SchemasService/ListSchemas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemasServiceServer).ListSchemas(ctx, req.(*ListSchemasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemasService_GetSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemasServiceServer).GetSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.schemas.v1.SchemasService/GetSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemasServiceServer).GetSchema(ctx, req.(*GetSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemasService_CreateSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemasServiceServer).CreateSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.schemas.v1.SchemasService/CreateSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemasServiceServer).CreateSchema(ctx, req.(*CreateSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemasService_UpdateSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemasServiceServer).UpdateSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.schemas.v1.SchemasService/UpdateSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemasServiceServer).UpdateSchema(ctx, req.(*UpdateSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemasService_GetSchemaCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchemaCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemasServiceServer).GetSchemaCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.schemas.v1.SchemasService/GetSchemaCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemasServiceServer).GetSchemaCode(ctx, req.(*GetSchemaCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemasService_ActivateSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemasServiceServer).ActivateSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.schemas.v1.SchemasService/ActivateSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemasServiceServer).ActivateSchema(ctx, req.(*ActivateSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemasService_DeleteSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemasServiceServer).DeleteSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.schemas.v1.SchemasService/DeleteSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemasServiceServer).DeleteSchema(ctx, req.(*DeleteSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemasService_ArchiveSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemasServiceServer).ArchiveSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.schemas.v1.SchemasService/ArchiveSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemasServiceServer).ArchiveSchema(ctx, req.(*ArchiveSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemasService_GetSchemaDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchemaDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemasServiceServer).GetSchemaDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.schemas.v1.SchemasService/GetSchemaDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemasServiceServer).GetSchemaDefinition(ctx, req.(*GetSchemaDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SchemasService_ServiceDesc is the grpc.ServiceDesc for SchemasService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SchemasService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "strmprivacy.api.schemas.v1.SchemasService",
	HandlerType: (*SchemasServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSchemas",
			Handler:    _SchemasService_ListSchemas_Handler,
		},
		{
			MethodName: "GetSchema",
			Handler:    _SchemasService_GetSchema_Handler,
		},
		{
			MethodName: "CreateSchema",
			Handler:    _SchemasService_CreateSchema_Handler,
		},
		{
			MethodName: "UpdateSchema",
			Handler:    _SchemasService_UpdateSchema_Handler,
		},
		{
			MethodName: "GetSchemaCode",
			Handler:    _SchemasService_GetSchemaCode_Handler,
		},
		{
			MethodName: "ActivateSchema",
			Handler:    _SchemasService_ActivateSchema_Handler,
		},
		{
			MethodName: "DeleteSchema",
			Handler:    _SchemasService_DeleteSchema_Handler,
		},
		{
			MethodName: "ArchiveSchema",
			Handler:    _SchemasService_ArchiveSchema_Handler,
		},
		{
			MethodName: "GetSchemaDefinition",
			Handler:    _SchemasService_GetSchemaDefinition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "strmprivacy/api/schemas/v1/schemas_v1.proto",
}
