// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.18.1
// source: strmprivacy/api/data_connectors/v1/data_connectors_v1.proto

package data_connectors

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataConnectorsServiceClient is the client API for DataConnectorsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataConnectorsServiceClient interface {
	ListDataConnectors(ctx context.Context, in *ListDataConnectorsRequest, opts ...grpc.CallOption) (*ListDataConnectorsResponse, error)
	GetDataConnector(ctx context.Context, in *GetDataConnectorRequest, opts ...grpc.CallOption) (*GetDataConnectorResponse, error)
	DeleteDataConnector(ctx context.Context, in *DeleteDataConnectorRequest, opts ...grpc.CallOption) (*DeleteDataConnectorResponse, error)
	CreateDataConnector(ctx context.Context, in *CreateDataConnectorRequest, opts ...grpc.CallOption) (*CreateDataConnectorResponse, error)
}

type dataConnectorsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataConnectorsServiceClient(cc grpc.ClientConnInterface) DataConnectorsServiceClient {
	return &dataConnectorsServiceClient{cc}
}

func (c *dataConnectorsServiceClient) ListDataConnectors(ctx context.Context, in *ListDataConnectorsRequest, opts ...grpc.CallOption) (*ListDataConnectorsResponse, error) {
	out := new(ListDataConnectorsResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.data_connectors.v1.DataConnectorsService/ListDataConnectors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataConnectorsServiceClient) GetDataConnector(ctx context.Context, in *GetDataConnectorRequest, opts ...grpc.CallOption) (*GetDataConnectorResponse, error) {
	out := new(GetDataConnectorResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.data_connectors.v1.DataConnectorsService/GetDataConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataConnectorsServiceClient) DeleteDataConnector(ctx context.Context, in *DeleteDataConnectorRequest, opts ...grpc.CallOption) (*DeleteDataConnectorResponse, error) {
	out := new(DeleteDataConnectorResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.data_connectors.v1.DataConnectorsService/DeleteDataConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataConnectorsServiceClient) CreateDataConnector(ctx context.Context, in *CreateDataConnectorRequest, opts ...grpc.CallOption) (*CreateDataConnectorResponse, error) {
	out := new(CreateDataConnectorResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.data_connectors.v1.DataConnectorsService/CreateDataConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataConnectorsServiceServer is the server API for DataConnectorsService service.
// All implementations must embed UnimplementedDataConnectorsServiceServer
// for forward compatibility
type DataConnectorsServiceServer interface {
	ListDataConnectors(context.Context, *ListDataConnectorsRequest) (*ListDataConnectorsResponse, error)
	GetDataConnector(context.Context, *GetDataConnectorRequest) (*GetDataConnectorResponse, error)
	DeleteDataConnector(context.Context, *DeleteDataConnectorRequest) (*DeleteDataConnectorResponse, error)
	CreateDataConnector(context.Context, *CreateDataConnectorRequest) (*CreateDataConnectorResponse, error)
	mustEmbedUnimplementedDataConnectorsServiceServer()
}

// UnimplementedDataConnectorsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataConnectorsServiceServer struct {
}

func (UnimplementedDataConnectorsServiceServer) ListDataConnectors(context.Context, *ListDataConnectorsRequest) (*ListDataConnectorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataConnectors not implemented")
}
func (UnimplementedDataConnectorsServiceServer) GetDataConnector(context.Context, *GetDataConnectorRequest) (*GetDataConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataConnector not implemented")
}
func (UnimplementedDataConnectorsServiceServer) DeleteDataConnector(context.Context, *DeleteDataConnectorRequest) (*DeleteDataConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataConnector not implemented")
}
func (UnimplementedDataConnectorsServiceServer) CreateDataConnector(context.Context, *CreateDataConnectorRequest) (*CreateDataConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataConnector not implemented")
}
func (UnimplementedDataConnectorsServiceServer) mustEmbedUnimplementedDataConnectorsServiceServer() {}

// UnsafeDataConnectorsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataConnectorsServiceServer will
// result in compilation errors.
type UnsafeDataConnectorsServiceServer interface {
	mustEmbedUnimplementedDataConnectorsServiceServer()
}

func RegisterDataConnectorsServiceServer(s grpc.ServiceRegistrar, srv DataConnectorsServiceServer) {
	s.RegisterService(&DataConnectorsService_ServiceDesc, srv)
}

func _DataConnectorsService_ListDataConnectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDataConnectorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataConnectorsServiceServer).ListDataConnectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.data_connectors.v1.DataConnectorsService/ListDataConnectors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataConnectorsServiceServer).ListDataConnectors(ctx, req.(*ListDataConnectorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataConnectorsService_GetDataConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataConnectorsServiceServer).GetDataConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.data_connectors.v1.DataConnectorsService/GetDataConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataConnectorsServiceServer).GetDataConnector(ctx, req.(*GetDataConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataConnectorsService_DeleteDataConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDataConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataConnectorsServiceServer).DeleteDataConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.data_connectors.v1.DataConnectorsService/DeleteDataConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataConnectorsServiceServer).DeleteDataConnector(ctx, req.(*DeleteDataConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataConnectorsService_CreateDataConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDataConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataConnectorsServiceServer).CreateDataConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.data_connectors.v1.DataConnectorsService/CreateDataConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataConnectorsServiceServer).CreateDataConnector(ctx, req.(*CreateDataConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataConnectorsService_ServiceDesc is the grpc.ServiceDesc for DataConnectorsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataConnectorsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "strmprivacy.api.data_connectors.v1.DataConnectorsService",
	HandlerType: (*DataConnectorsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDataConnectors",
			Handler:    _DataConnectorsService_ListDataConnectors_Handler,
		},
		{
			MethodName: "GetDataConnector",
			Handler:    _DataConnectorsService_GetDataConnector_Handler,
		},
		{
			MethodName: "DeleteDataConnector",
			Handler:    _DataConnectorsService_DeleteDataConnector_Handler,
		},
		{
			MethodName: "CreateDataConnector",
			Handler:    _DataConnectorsService_CreateDataConnector_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "strmprivacy/api/data_connectors/v1/data_connectors_v1.proto",
}
