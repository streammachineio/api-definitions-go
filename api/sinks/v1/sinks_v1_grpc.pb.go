// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.15.8
// source: streammachine/api/sinks/v1/sinks_v1.proto

package sinks

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SinksServiceClient is the client API for SinksService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SinksServiceClient interface {
	ListSinks(ctx context.Context, in *ListSinksRequest, opts ...grpc.CallOption) (*ListSinksResponse, error)
	GetSink(ctx context.Context, in *GetSinkRequest, opts ...grpc.CallOption) (*GetSinkResponse, error)
	DeleteSink(ctx context.Context, in *DeleteSinkRequest, opts ...grpc.CallOption) (*DeleteSinkResponse, error)
	CreateSink(ctx context.Context, in *CreateSinkRequest, opts ...grpc.CallOption) (*CreateSinkResponse, error)
}

type sinksServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSinksServiceClient(cc grpc.ClientConnInterface) SinksServiceClient {
	return &sinksServiceClient{cc}
}

func (c *sinksServiceClient) ListSinks(ctx context.Context, in *ListSinksRequest, opts ...grpc.CallOption) (*ListSinksResponse, error) {
	out := new(ListSinksResponse)
	err := c.cc.Invoke(ctx, "/streammachine.api.sinks.v1.SinksService/ListSinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sinksServiceClient) GetSink(ctx context.Context, in *GetSinkRequest, opts ...grpc.CallOption) (*GetSinkResponse, error) {
	out := new(GetSinkResponse)
	err := c.cc.Invoke(ctx, "/streammachine.api.sinks.v1.SinksService/GetSink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sinksServiceClient) DeleteSink(ctx context.Context, in *DeleteSinkRequest, opts ...grpc.CallOption) (*DeleteSinkResponse, error) {
	out := new(DeleteSinkResponse)
	err := c.cc.Invoke(ctx, "/streammachine.api.sinks.v1.SinksService/DeleteSink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sinksServiceClient) CreateSink(ctx context.Context, in *CreateSinkRequest, opts ...grpc.CallOption) (*CreateSinkResponse, error) {
	out := new(CreateSinkResponse)
	err := c.cc.Invoke(ctx, "/streammachine.api.sinks.v1.SinksService/CreateSink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SinksServiceServer is the server API for SinksService service.
// All implementations must embed UnimplementedSinksServiceServer
// for forward compatibility
type SinksServiceServer interface {
	ListSinks(context.Context, *ListSinksRequest) (*ListSinksResponse, error)
	GetSink(context.Context, *GetSinkRequest) (*GetSinkResponse, error)
	DeleteSink(context.Context, *DeleteSinkRequest) (*DeleteSinkResponse, error)
	CreateSink(context.Context, *CreateSinkRequest) (*CreateSinkResponse, error)
	mustEmbedUnimplementedSinksServiceServer()
}

// UnimplementedSinksServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSinksServiceServer struct {
}

func (UnimplementedSinksServiceServer) ListSinks(context.Context, *ListSinksRequest) (*ListSinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSinks not implemented")
}
func (UnimplementedSinksServiceServer) GetSink(context.Context, *GetSinkRequest) (*GetSinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSink not implemented")
}
func (UnimplementedSinksServiceServer) DeleteSink(context.Context, *DeleteSinkRequest) (*DeleteSinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSink not implemented")
}
func (UnimplementedSinksServiceServer) CreateSink(context.Context, *CreateSinkRequest) (*CreateSinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSink not implemented")
}
func (UnimplementedSinksServiceServer) mustEmbedUnimplementedSinksServiceServer() {}

// UnsafeSinksServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SinksServiceServer will
// result in compilation errors.
type UnsafeSinksServiceServer interface {
	mustEmbedUnimplementedSinksServiceServer()
}

func RegisterSinksServiceServer(s grpc.ServiceRegistrar, srv SinksServiceServer) {
	s.RegisterService(&SinksService_ServiceDesc, srv)
}

func _SinksService_ListSinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SinksServiceServer).ListSinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/streammachine.api.sinks.v1.SinksService/ListSinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SinksServiceServer).ListSinks(ctx, req.(*ListSinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SinksService_GetSink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SinksServiceServer).GetSink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/streammachine.api.sinks.v1.SinksService/GetSink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SinksServiceServer).GetSink(ctx, req.(*GetSinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SinksService_DeleteSink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SinksServiceServer).DeleteSink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/streammachine.api.sinks.v1.SinksService/DeleteSink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SinksServiceServer).DeleteSink(ctx, req.(*DeleteSinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SinksService_CreateSink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SinksServiceServer).CreateSink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/streammachine.api.sinks.v1.SinksService/CreateSink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SinksServiceServer).CreateSink(ctx, req.(*CreateSinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SinksService_ServiceDesc is the grpc.ServiceDesc for SinksService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SinksService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "streammachine.api.sinks.v1.SinksService",
	HandlerType: (*SinksServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSinks",
			Handler:    _SinksService_ListSinks_Handler,
		},
		{
			MethodName: "GetSink",
			Handler:    _SinksService_GetSink_Handler,
		},
		{
			MethodName: "DeleteSink",
			Handler:    _SinksService_DeleteSink_Handler,
		},
		{
			MethodName: "CreateSink",
			Handler:    _SinksService_CreateSink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "streammachine/api/sinks/v1/sinks_v1.proto",
}
