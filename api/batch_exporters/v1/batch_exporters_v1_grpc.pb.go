// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package batch_exporters

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BatchExportersServiceClient is the client API for BatchExportersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BatchExportersServiceClient interface {
	ListBatchExporters(ctx context.Context, in *ListBatchExportersRequest, opts ...grpc.CallOption) (*ListBatchExportersResponse, error)
	GetBatchExporter(ctx context.Context, in *GetBatchExporterRequest, opts ...grpc.CallOption) (*GetBatchExporterResponse, error)
	DeleteBatchExporter(ctx context.Context, in *DeleteBatchExporterRequest, opts ...grpc.CallOption) (*DeleteBatchExporterResponse, error)
	CreateBatchExporter(ctx context.Context, in *CreateBatchExporterRequest, opts ...grpc.CallOption) (*CreateBatchExporterResponse, error)
}

type batchExportersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBatchExportersServiceClient(cc grpc.ClientConnInterface) BatchExportersServiceClient {
	return &batchExportersServiceClient{cc}
}

func (c *batchExportersServiceClient) ListBatchExporters(ctx context.Context, in *ListBatchExportersRequest, opts ...grpc.CallOption) (*ListBatchExportersResponse, error) {
	out := new(ListBatchExportersResponse)
	err := c.cc.Invoke(ctx, "/streammachine.api.batch_exporters.v1.BatchExportersService/ListBatchExporters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchExportersServiceClient) GetBatchExporter(ctx context.Context, in *GetBatchExporterRequest, opts ...grpc.CallOption) (*GetBatchExporterResponse, error) {
	out := new(GetBatchExporterResponse)
	err := c.cc.Invoke(ctx, "/streammachine.api.batch_exporters.v1.BatchExportersService/GetBatchExporter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchExportersServiceClient) DeleteBatchExporter(ctx context.Context, in *DeleteBatchExporterRequest, opts ...grpc.CallOption) (*DeleteBatchExporterResponse, error) {
	out := new(DeleteBatchExporterResponse)
	err := c.cc.Invoke(ctx, "/streammachine.api.batch_exporters.v1.BatchExportersService/DeleteBatchExporter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchExportersServiceClient) CreateBatchExporter(ctx context.Context, in *CreateBatchExporterRequest, opts ...grpc.CallOption) (*CreateBatchExporterResponse, error) {
	out := new(CreateBatchExporterResponse)
	err := c.cc.Invoke(ctx, "/streammachine.api.batch_exporters.v1.BatchExportersService/CreateBatchExporter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BatchExportersServiceServer is the server API for BatchExportersService service.
// All implementations must embed UnimplementedBatchExportersServiceServer
// for forward compatibility
type BatchExportersServiceServer interface {
	ListBatchExporters(context.Context, *ListBatchExportersRequest) (*ListBatchExportersResponse, error)
	GetBatchExporter(context.Context, *GetBatchExporterRequest) (*GetBatchExporterResponse, error)
	DeleteBatchExporter(context.Context, *DeleteBatchExporterRequest) (*DeleteBatchExporterResponse, error)
	CreateBatchExporter(context.Context, *CreateBatchExporterRequest) (*CreateBatchExporterResponse, error)
	mustEmbedUnimplementedBatchExportersServiceServer()
}

// UnimplementedBatchExportersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBatchExportersServiceServer struct {
}

func (UnimplementedBatchExportersServiceServer) ListBatchExporters(context.Context, *ListBatchExportersRequest) (*ListBatchExportersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBatchExporters not implemented")
}
func (UnimplementedBatchExportersServiceServer) GetBatchExporter(context.Context, *GetBatchExporterRequest) (*GetBatchExporterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatchExporter not implemented")
}
func (UnimplementedBatchExportersServiceServer) DeleteBatchExporter(context.Context, *DeleteBatchExporterRequest) (*DeleteBatchExporterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBatchExporter not implemented")
}
func (UnimplementedBatchExportersServiceServer) CreateBatchExporter(context.Context, *CreateBatchExporterRequest) (*CreateBatchExporterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBatchExporter not implemented")
}
func (UnimplementedBatchExportersServiceServer) mustEmbedUnimplementedBatchExportersServiceServer() {}

// UnsafeBatchExportersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BatchExportersServiceServer will
// result in compilation errors.
type UnsafeBatchExportersServiceServer interface {
	mustEmbedUnimplementedBatchExportersServiceServer()
}

func RegisterBatchExportersServiceServer(s grpc.ServiceRegistrar, srv BatchExportersServiceServer) {
	s.RegisterService(&BatchExportersService_ServiceDesc, srv)
}

func _BatchExportersService_ListBatchExporters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBatchExportersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchExportersServiceServer).ListBatchExporters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/streammachine.api.batch_exporters.v1.BatchExportersService/ListBatchExporters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchExportersServiceServer).ListBatchExporters(ctx, req.(*ListBatchExportersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatchExportersService_GetBatchExporter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBatchExporterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchExportersServiceServer).GetBatchExporter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/streammachine.api.batch_exporters.v1.BatchExportersService/GetBatchExporter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchExportersServiceServer).GetBatchExporter(ctx, req.(*GetBatchExporterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatchExportersService_DeleteBatchExporter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBatchExporterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchExportersServiceServer).DeleteBatchExporter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/streammachine.api.batch_exporters.v1.BatchExportersService/DeleteBatchExporter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchExportersServiceServer).DeleteBatchExporter(ctx, req.(*DeleteBatchExporterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatchExportersService_CreateBatchExporter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBatchExporterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchExportersServiceServer).CreateBatchExporter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/streammachine.api.batch_exporters.v1.BatchExportersService/CreateBatchExporter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchExportersServiceServer).CreateBatchExporter(ctx, req.(*CreateBatchExporterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BatchExportersService_ServiceDesc is the grpc.ServiceDesc for BatchExportersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BatchExportersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "streammachine.api.batch_exporters.v1.BatchExportersService",
	HandlerType: (*BatchExportersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBatchExporters",
			Handler:    _BatchExportersService_ListBatchExporters_Handler,
		},
		{
			MethodName: "GetBatchExporter",
			Handler:    _BatchExportersService_GetBatchExporter_Handler,
		},
		{
			MethodName: "DeleteBatchExporter",
			Handler:    _BatchExportersService_DeleteBatchExporter_Handler,
		},
		{
			MethodName: "CreateBatchExporter",
			Handler:    _BatchExportersService_CreateBatchExporter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "streammachine/api/batch_exporters/v1/batch_exporters_v1.proto",
}
