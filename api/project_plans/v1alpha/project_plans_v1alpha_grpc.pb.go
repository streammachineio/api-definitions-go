// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: strmprivacy/api/project_plans/v1alpha/project_plans_v1alpha.proto

package project_plans

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProjectPlansServiceClient is the client API for ProjectPlansService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectPlansServiceClient interface {
	ListProjectPlans(ctx context.Context, in *ListProjectPlansRequest, opts ...grpc.CallOption) (*ListProjectPlansResponse, error)
	GetProjectPlan(ctx context.Context, in *GetProjectPlanRequest, opts ...grpc.CallOption) (*GetProjectPlanResponse, error)
	UpsertProjectPlan(ctx context.Context, in *UpsertProjectPlanRequest, opts ...grpc.CallOption) (*UpsertProjectPlanResponse, error)
	DeleteProjectPlan(ctx context.Context, in *DeleteProjectPlanRequest, opts ...grpc.CallOption) (*DeleteProjectPlanResponse, error)
	// builds an empty (not filled-in) project plan from a template and store it in the database.
	BuildProjectPlan(ctx context.Context, in *BuildProjectPlanRequest, opts ...grpc.CallOption) (*BuildProjectPlanResponse, error)
}

type projectPlansServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectPlansServiceClient(cc grpc.ClientConnInterface) ProjectPlansServiceClient {
	return &projectPlansServiceClient{cc}
}

func (c *projectPlansServiceClient) ListProjectPlans(ctx context.Context, in *ListProjectPlansRequest, opts ...grpc.CallOption) (*ListProjectPlansResponse, error) {
	out := new(ListProjectPlansResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.project_plans.v1alpha.ProjectPlansService/ListProjectPlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectPlansServiceClient) GetProjectPlan(ctx context.Context, in *GetProjectPlanRequest, opts ...grpc.CallOption) (*GetProjectPlanResponse, error) {
	out := new(GetProjectPlanResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.project_plans.v1alpha.ProjectPlansService/GetProjectPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectPlansServiceClient) UpsertProjectPlan(ctx context.Context, in *UpsertProjectPlanRequest, opts ...grpc.CallOption) (*UpsertProjectPlanResponse, error) {
	out := new(UpsertProjectPlanResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.project_plans.v1alpha.ProjectPlansService/UpsertProjectPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectPlansServiceClient) DeleteProjectPlan(ctx context.Context, in *DeleteProjectPlanRequest, opts ...grpc.CallOption) (*DeleteProjectPlanResponse, error) {
	out := new(DeleteProjectPlanResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.project_plans.v1alpha.ProjectPlansService/DeleteProjectPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectPlansServiceClient) BuildProjectPlan(ctx context.Context, in *BuildProjectPlanRequest, opts ...grpc.CallOption) (*BuildProjectPlanResponse, error) {
	out := new(BuildProjectPlanResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.project_plans.v1alpha.ProjectPlansService/BuildProjectPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectPlansServiceServer is the server API for ProjectPlansService service.
// All implementations should embed UnimplementedProjectPlansServiceServer
// for forward compatibility
type ProjectPlansServiceServer interface {
	ListProjectPlans(context.Context, *ListProjectPlansRequest) (*ListProjectPlansResponse, error)
	GetProjectPlan(context.Context, *GetProjectPlanRequest) (*GetProjectPlanResponse, error)
	UpsertProjectPlan(context.Context, *UpsertProjectPlanRequest) (*UpsertProjectPlanResponse, error)
	DeleteProjectPlan(context.Context, *DeleteProjectPlanRequest) (*DeleteProjectPlanResponse, error)
	// builds an empty (not filled-in) project plan from a template and store it in the database.
	BuildProjectPlan(context.Context, *BuildProjectPlanRequest) (*BuildProjectPlanResponse, error)
}

// UnimplementedProjectPlansServiceServer should be embedded to have forward compatible implementations.
type UnimplementedProjectPlansServiceServer struct {
}

func (UnimplementedProjectPlansServiceServer) ListProjectPlans(context.Context, *ListProjectPlansRequest) (*ListProjectPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectPlans not implemented")
}
func (UnimplementedProjectPlansServiceServer) GetProjectPlan(context.Context, *GetProjectPlanRequest) (*GetProjectPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectPlan not implemented")
}
func (UnimplementedProjectPlansServiceServer) UpsertProjectPlan(context.Context, *UpsertProjectPlanRequest) (*UpsertProjectPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertProjectPlan not implemented")
}
func (UnimplementedProjectPlansServiceServer) DeleteProjectPlan(context.Context, *DeleteProjectPlanRequest) (*DeleteProjectPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectPlan not implemented")
}
func (UnimplementedProjectPlansServiceServer) BuildProjectPlan(context.Context, *BuildProjectPlanRequest) (*BuildProjectPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildProjectPlan not implemented")
}

// UnsafeProjectPlansServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectPlansServiceServer will
// result in compilation errors.
type UnsafeProjectPlansServiceServer interface {
	mustEmbedUnimplementedProjectPlansServiceServer()
}

func RegisterProjectPlansServiceServer(s grpc.ServiceRegistrar, srv ProjectPlansServiceServer) {
	s.RegisterService(&ProjectPlansService_ServiceDesc, srv)
}

func _ProjectPlansService_ListProjectPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectPlansServiceServer).ListProjectPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.project_plans.v1alpha.ProjectPlansService/ListProjectPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectPlansServiceServer).ListProjectPlans(ctx, req.(*ListProjectPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectPlansService_GetProjectPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectPlansServiceServer).GetProjectPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.project_plans.v1alpha.ProjectPlansService/GetProjectPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectPlansServiceServer).GetProjectPlan(ctx, req.(*GetProjectPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectPlansService_UpsertProjectPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertProjectPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectPlansServiceServer).UpsertProjectPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.project_plans.v1alpha.ProjectPlansService/UpsertProjectPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectPlansServiceServer).UpsertProjectPlan(ctx, req.(*UpsertProjectPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectPlansService_DeleteProjectPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectPlansServiceServer).DeleteProjectPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.project_plans.v1alpha.ProjectPlansService/DeleteProjectPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectPlansServiceServer).DeleteProjectPlan(ctx, req.(*DeleteProjectPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectPlansService_BuildProjectPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildProjectPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectPlansServiceServer).BuildProjectPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.project_plans.v1alpha.ProjectPlansService/BuildProjectPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectPlansServiceServer).BuildProjectPlan(ctx, req.(*BuildProjectPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectPlansService_ServiceDesc is the grpc.ServiceDesc for ProjectPlansService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectPlansService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "strmprivacy.api.project_plans.v1alpha.ProjectPlansService",
	HandlerType: (*ProjectPlansServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListProjectPlans",
			Handler:    _ProjectPlansService_ListProjectPlans_Handler,
		},
		{
			MethodName: "GetProjectPlan",
			Handler:    _ProjectPlansService_GetProjectPlan_Handler,
		},
		{
			MethodName: "UpsertProjectPlan",
			Handler:    _ProjectPlansService_UpsertProjectPlan_Handler,
		},
		{
			MethodName: "DeleteProjectPlan",
			Handler:    _ProjectPlansService_DeleteProjectPlan_Handler,
		},
		{
			MethodName: "BuildProjectPlan",
			Handler:    _ProjectPlansService_BuildProjectPlan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "strmprivacy/api/project_plans/v1alpha/project_plans_v1alpha.proto",
}
