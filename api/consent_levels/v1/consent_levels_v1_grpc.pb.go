// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.18.1
// source: strmprivacy/api/consent_levels/v1/consent_levels_v1.proto

package consent_levels

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConsentLevelMappingsServiceClient is the client API for ConsentLevelMappingsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsentLevelMappingsServiceClient interface {
	ListConsentLevelMappings(ctx context.Context, in *ListConsentLevelMappingsRequest, opts ...grpc.CallOption) (*ListConsentLevelMappingsResponse, error)
	GetConsentLevelMapping(ctx context.Context, in *GetConsentLevelMappingRequest, opts ...grpc.CallOption) (*GetConsentLevelMappingResponse, error)
	DeleteConsentLevelMapping(ctx context.Context, in *DeleteConsentLevelMappingRequest, opts ...grpc.CallOption) (*DeleteConsentLevelMappingResponse, error)
	CreateConsentLevelMapping(ctx context.Context, in *CreateConsentLevelMappingRequest, opts ...grpc.CallOption) (*CreateConsentLevelMappingResponse, error)
}

type consentLevelMappingsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConsentLevelMappingsServiceClient(cc grpc.ClientConnInterface) ConsentLevelMappingsServiceClient {
	return &consentLevelMappingsServiceClient{cc}
}

func (c *consentLevelMappingsServiceClient) ListConsentLevelMappings(ctx context.Context, in *ListConsentLevelMappingsRequest, opts ...grpc.CallOption) (*ListConsentLevelMappingsResponse, error) {
	out := new(ListConsentLevelMappingsResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.consent_levels.v1.ConsentLevelMappingsService/ListConsentLevelMappings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consentLevelMappingsServiceClient) GetConsentLevelMapping(ctx context.Context, in *GetConsentLevelMappingRequest, opts ...grpc.CallOption) (*GetConsentLevelMappingResponse, error) {
	out := new(GetConsentLevelMappingResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.consent_levels.v1.ConsentLevelMappingsService/GetConsentLevelMapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consentLevelMappingsServiceClient) DeleteConsentLevelMapping(ctx context.Context, in *DeleteConsentLevelMappingRequest, opts ...grpc.CallOption) (*DeleteConsentLevelMappingResponse, error) {
	out := new(DeleteConsentLevelMappingResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.consent_levels.v1.ConsentLevelMappingsService/DeleteConsentLevelMapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consentLevelMappingsServiceClient) CreateConsentLevelMapping(ctx context.Context, in *CreateConsentLevelMappingRequest, opts ...grpc.CallOption) (*CreateConsentLevelMappingResponse, error) {
	out := new(CreateConsentLevelMappingResponse)
	err := c.cc.Invoke(ctx, "/strmprivacy.api.consent_levels.v1.ConsentLevelMappingsService/CreateConsentLevelMapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsentLevelMappingsServiceServer is the server API for ConsentLevelMappingsService service.
// All implementations must embed UnimplementedConsentLevelMappingsServiceServer
// for forward compatibility
type ConsentLevelMappingsServiceServer interface {
	ListConsentLevelMappings(context.Context, *ListConsentLevelMappingsRequest) (*ListConsentLevelMappingsResponse, error)
	GetConsentLevelMapping(context.Context, *GetConsentLevelMappingRequest) (*GetConsentLevelMappingResponse, error)
	DeleteConsentLevelMapping(context.Context, *DeleteConsentLevelMappingRequest) (*DeleteConsentLevelMappingResponse, error)
	CreateConsentLevelMapping(context.Context, *CreateConsentLevelMappingRequest) (*CreateConsentLevelMappingResponse, error)
	mustEmbedUnimplementedConsentLevelMappingsServiceServer()
}

// UnimplementedConsentLevelMappingsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConsentLevelMappingsServiceServer struct {
}

func (UnimplementedConsentLevelMappingsServiceServer) ListConsentLevelMappings(context.Context, *ListConsentLevelMappingsRequest) (*ListConsentLevelMappingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConsentLevelMappings not implemented")
}
func (UnimplementedConsentLevelMappingsServiceServer) GetConsentLevelMapping(context.Context, *GetConsentLevelMappingRequest) (*GetConsentLevelMappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsentLevelMapping not implemented")
}
func (UnimplementedConsentLevelMappingsServiceServer) DeleteConsentLevelMapping(context.Context, *DeleteConsentLevelMappingRequest) (*DeleteConsentLevelMappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConsentLevelMapping not implemented")
}
func (UnimplementedConsentLevelMappingsServiceServer) CreateConsentLevelMapping(context.Context, *CreateConsentLevelMappingRequest) (*CreateConsentLevelMappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConsentLevelMapping not implemented")
}
func (UnimplementedConsentLevelMappingsServiceServer) mustEmbedUnimplementedConsentLevelMappingsServiceServer() {
}

// UnsafeConsentLevelMappingsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsentLevelMappingsServiceServer will
// result in compilation errors.
type UnsafeConsentLevelMappingsServiceServer interface {
	mustEmbedUnimplementedConsentLevelMappingsServiceServer()
}

func RegisterConsentLevelMappingsServiceServer(s grpc.ServiceRegistrar, srv ConsentLevelMappingsServiceServer) {
	s.RegisterService(&ConsentLevelMappingsService_ServiceDesc, srv)
}

func _ConsentLevelMappingsService_ListConsentLevelMappings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConsentLevelMappingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsentLevelMappingsServiceServer).ListConsentLevelMappings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.consent_levels.v1.ConsentLevelMappingsService/ListConsentLevelMappings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsentLevelMappingsServiceServer).ListConsentLevelMappings(ctx, req.(*ListConsentLevelMappingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsentLevelMappingsService_GetConsentLevelMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConsentLevelMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsentLevelMappingsServiceServer).GetConsentLevelMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.consent_levels.v1.ConsentLevelMappingsService/GetConsentLevelMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsentLevelMappingsServiceServer).GetConsentLevelMapping(ctx, req.(*GetConsentLevelMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsentLevelMappingsService_DeleteConsentLevelMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConsentLevelMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsentLevelMappingsServiceServer).DeleteConsentLevelMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.consent_levels.v1.ConsentLevelMappingsService/DeleteConsentLevelMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsentLevelMappingsServiceServer).DeleteConsentLevelMapping(ctx, req.(*DeleteConsentLevelMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsentLevelMappingsService_CreateConsentLevelMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConsentLevelMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsentLevelMappingsServiceServer).CreateConsentLevelMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strmprivacy.api.consent_levels.v1.ConsentLevelMappingsService/CreateConsentLevelMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsentLevelMappingsServiceServer).CreateConsentLevelMapping(ctx, req.(*CreateConsentLevelMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConsentLevelMappingsService_ServiceDesc is the grpc.ServiceDesc for ConsentLevelMappingsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConsentLevelMappingsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "strmprivacy.api.consent_levels.v1.ConsentLevelMappingsService",
	HandlerType: (*ConsentLevelMappingsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListConsentLevelMappings",
			Handler:    _ConsentLevelMappingsService_ListConsentLevelMappings_Handler,
		},
		{
			MethodName: "GetConsentLevelMapping",
			Handler:    _ConsentLevelMappingsService_GetConsentLevelMapping_Handler,
		},
		{
			MethodName: "DeleteConsentLevelMapping",
			Handler:    _ConsentLevelMappingsService_DeleteConsentLevelMapping_Handler,
		},
		{
			MethodName: "CreateConsentLevelMapping",
			Handler:    _ConsentLevelMappingsService_CreateConsentLevelMapping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "strmprivacy/api/consent_levels/v1/consent_levels_v1.proto",
}
