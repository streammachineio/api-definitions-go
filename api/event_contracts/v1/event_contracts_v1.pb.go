// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1-devel
// 	protoc        v3.15.8
// source: streammachine/api/event_contracts/v1/event_contracts_v1.proto

package event_contracts

import (
	v1 "github.com/streammachineio/api-definitions-go/api/entities/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// List Event Contracts, with optional filters. All filters behave as AND conditions. OR is not possible.
type ListEventContractsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The billing_id, used for authentication.
	// If absent, only public Event Contracts can be returned. If present, public and owned private Event Contracts can be returned.
	BillingId string `protobuf:"bytes,1,opt,name=billing_id,json=billingId,proto3" json:"billing_id,omitempty"`
	// Filter on a string to do a full-text search.
	Filter string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	// Filter on a given handle.
	Handle string `protobuf:"bytes,3,opt,name=handle,proto3" json:"handle,omitempty"`
	// Filter on a given name.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Filter public/private Event Contracts.
	PublicPrivate v1.FilterPublicPrivate `protobuf:"varint,5,opt,name=public_private,json=publicPrivate,proto3,enum=streammachine.api.entities.v1.FilterPublicPrivate" json:"public_private,omitempty"`
	// Filter based on Schema Ref to find all Event Contracts that depend on a Schema.
	SchemaRef *v1.SchemaRef `protobuf:"bytes,6,opt,name=schema_ref,json=schemaRef,proto3" json:"schema_ref,omitempty"`
	// Filter based on labels. It is possible to skip the label value.
	// In that case, the filter only filters on the key.
	Labels []*v1.Label `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty"`
	// Filter on domains.
	Domains []string `protobuf:"bytes,8,rep,name=domains,proto3" json:"domains,omitempty"`
	// Filter on industries.
	Industries []string `protobuf:"bytes,9,rep,name=industries,proto3" json:"industries,omitempty"`
}

func (x *ListEventContractsRequest) Reset() {
	*x = ListEventContractsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEventContractsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEventContractsRequest) ProtoMessage() {}

func (x *ListEventContractsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEventContractsRequest.ProtoReflect.Descriptor instead.
func (*ListEventContractsRequest) Descriptor() ([]byte, []int) {
	return file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_rawDescGZIP(), []int{0}
}

func (x *ListEventContractsRequest) GetBillingId() string {
	if x != nil {
		return x.BillingId
	}
	return ""
}

func (x *ListEventContractsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListEventContractsRequest) GetHandle() string {
	if x != nil {
		return x.Handle
	}
	return ""
}

func (x *ListEventContractsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListEventContractsRequest) GetPublicPrivate() v1.FilterPublicPrivate {
	if x != nil {
		return x.PublicPrivate
	}
	return v1.FilterPublicPrivate(0)
}

func (x *ListEventContractsRequest) GetSchemaRef() *v1.SchemaRef {
	if x != nil {
		return x.SchemaRef
	}
	return nil
}

func (x *ListEventContractsRequest) GetLabels() []*v1.Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ListEventContractsRequest) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *ListEventContractsRequest) GetIndustries() []string {
	if x != nil {
		return x.Industries
	}
	return nil
}

type ListEventContractsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventContracts []*v1.EventContract `protobuf:"bytes,1,rep,name=event_contracts,json=eventContracts,proto3" json:"event_contracts,omitempty"`
}

func (x *ListEventContractsResponse) Reset() {
	*x = ListEventContractsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEventContractsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEventContractsResponse) ProtoMessage() {}

func (x *ListEventContractsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEventContractsResponse.ProtoReflect.Descriptor instead.
func (*ListEventContractsResponse) Descriptor() ([]byte, []int) {
	return file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_rawDescGZIP(), []int{1}
}

func (x *ListEventContractsResponse) GetEventContracts() []*v1.EventContract {
	if x != nil {
		return x.EventContracts
	}
	return nil
}

type GetEventContractRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BillingId string               `protobuf:"bytes,1,opt,name=billing_id,json=billingId,proto3" json:"billing_id,omitempty"`
	Ref       *v1.EventContractRef `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
}

func (x *GetEventContractRequest) Reset() {
	*x = GetEventContractRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventContractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventContractRequest) ProtoMessage() {}

func (x *GetEventContractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventContractRequest.ProtoReflect.Descriptor instead.
func (*GetEventContractRequest) Descriptor() ([]byte, []int) {
	return file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_rawDescGZIP(), []int{2}
}

func (x *GetEventContractRequest) GetBillingId() string {
	if x != nil {
		return x.BillingId
	}
	return ""
}

func (x *GetEventContractRequest) GetRef() *v1.EventContractRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

type GetEventContractResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventContract *v1.EventContract `protobuf:"bytes,1,opt,name=event_contract,json=eventContract,proto3" json:"event_contract,omitempty"`
	Checksum      string            `protobuf:"bytes,2,opt,name=checksum,proto3" json:"checksum,omitempty"`
}

func (x *GetEventContractResponse) Reset() {
	*x = GetEventContractResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventContractResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventContractResponse) ProtoMessage() {}

func (x *GetEventContractResponse) ProtoReflect() protoreflect.Message {
	mi := &file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventContractResponse.ProtoReflect.Descriptor instead.
func (*GetEventContractResponse) Descriptor() ([]byte, []int) {
	return file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_rawDescGZIP(), []int{3}
}

func (x *GetEventContractResponse) GetEventContract() *v1.EventContract {
	if x != nil {
		return x.EventContract
	}
	return nil
}

func (x *GetEventContractResponse) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

type CreateEventContractRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BillingId     string            `protobuf:"bytes,1,opt,name=billing_id,json=billingId,proto3" json:"billing_id,omitempty"`
	EventContract *v1.EventContract `protobuf:"bytes,2,opt,name=event_contract,json=eventContract,proto3" json:"event_contract,omitempty"`
}

func (x *CreateEventContractRequest) Reset() {
	*x = CreateEventContractRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEventContractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEventContractRequest) ProtoMessage() {}

func (x *CreateEventContractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEventContractRequest.ProtoReflect.Descriptor instead.
func (*CreateEventContractRequest) Descriptor() ([]byte, []int) {
	return file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_rawDescGZIP(), []int{4}
}

func (x *CreateEventContractRequest) GetBillingId() string {
	if x != nil {
		return x.BillingId
	}
	return ""
}

func (x *CreateEventContractRequest) GetEventContract() *v1.EventContract {
	if x != nil {
		return x.EventContract
	}
	return nil
}

type CreateEventContractResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventContract *v1.EventContract `protobuf:"bytes,1,opt,name=event_contract,json=eventContract,proto3" json:"event_contract,omitempty"`
	Checksum      string            `protobuf:"bytes,2,opt,name=checksum,proto3" json:"checksum,omitempty"`
}

func (x *CreateEventContractResponse) Reset() {
	*x = CreateEventContractResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEventContractResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEventContractResponse) ProtoMessage() {}

func (x *CreateEventContractResponse) ProtoReflect() protoreflect.Message {
	mi := &file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEventContractResponse.ProtoReflect.Descriptor instead.
func (*CreateEventContractResponse) Descriptor() ([]byte, []int) {
	return file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_rawDescGZIP(), []int{5}
}

func (x *CreateEventContractResponse) GetEventContract() *v1.EventContract {
	if x != nil {
		return x.EventContract
	}
	return nil
}

func (x *CreateEventContractResponse) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

type UpdateEventContractRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BillingId     string            `protobuf:"bytes,1,opt,name=billing_id,json=billingId,proto3" json:"billing_id,omitempty"`
	EventContract *v1.EventContract `protobuf:"bytes,2,opt,name=event_contract,json=eventContract,proto3" json:"event_contract,omitempty"`
	Checksum      string            `protobuf:"bytes,3,opt,name=checksum,proto3" json:"checksum,omitempty"`
	// The fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,4,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateEventContractRequest) Reset() {
	*x = UpdateEventContractRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEventContractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEventContractRequest) ProtoMessage() {}

func (x *UpdateEventContractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEventContractRequest.ProtoReflect.Descriptor instead.
func (*UpdateEventContractRequest) Descriptor() ([]byte, []int) {
	return file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateEventContractRequest) GetBillingId() string {
	if x != nil {
		return x.BillingId
	}
	return ""
}

func (x *UpdateEventContractRequest) GetEventContract() *v1.EventContract {
	if x != nil {
		return x.EventContract
	}
	return nil
}

func (x *UpdateEventContractRequest) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

func (x *UpdateEventContractRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type UpdateEventContractResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventContract *v1.EventContract `protobuf:"bytes,1,opt,name=event_contract,json=eventContract,proto3" json:"event_contract,omitempty"`
	Checksum      string            `protobuf:"bytes,2,opt,name=checksum,proto3" json:"checksum,omitempty"`
}

func (x *UpdateEventContractResponse) Reset() {
	*x = UpdateEventContractResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEventContractResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEventContractResponse) ProtoMessage() {}

func (x *UpdateEventContractResponse) ProtoReflect() protoreflect.Message {
	mi := &file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEventContractResponse.ProtoReflect.Descriptor instead.
func (*UpdateEventContractResponse) Descriptor() ([]byte, []int) {
	return file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateEventContractResponse) GetEventContract() *v1.EventContract {
	if x != nil {
		return x.EventContract
	}
	return nil
}

func (x *UpdateEventContractResponse) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

var File_streammachine_api_event_contracts_v1_event_contracts_v1_proto protoreflect.FileDescriptor

var file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_rawDesc = []byte{
	0x0a, 0x3d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x24, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc7, 0x03, 0x0a, 0x19, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x09, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5e,
	0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x4c,
	0x0a, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x66, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x66, 0x12, 0x41, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x1d, 0x0a, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x23,
	0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x22, 0x73, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x55, 0x0a, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x22, 0x7b, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x49, 0x64, 0x12, 0x41, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x66,
	0x52, 0x03, 0x72, 0x65, 0x66, 0x22, 0x90, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x53, 0x0a, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x22, 0x90, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x0d, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x1b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x12, 0x1f, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75,
	0x6d, 0x22, 0xfd, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x22, 0x0a, 0x0a, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x49, 0x64, 0x12, 0x58, 0x0a, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1f,
	0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12,
	0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73,
	0x6b, 0x22, 0x93, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x53, 0x0a, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x32, 0xff, 0x04, 0x0a, 0x15, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x97, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x12, 0x3f, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x12, 0x3d, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3e, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x9a, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x40, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9a, 0x01, 0x0a,
	0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x12, 0x40, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x81, 0x01, 0x0a, 0x27, 0x69, 0x6f,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x54, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_rawDescOnce sync.Once
	file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_rawDescData = file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_rawDesc
)

func file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_rawDescGZIP() []byte {
	file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_rawDescOnce.Do(func() {
		file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_rawDescData = protoimpl.X.CompressGZIP(file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_rawDescData)
	})
	return file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_rawDescData
}

var file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_goTypes = []interface{}{
	(*ListEventContractsRequest)(nil),   // 0: streammachine.api.event_contracts.v1.ListEventContractsRequest
	(*ListEventContractsResponse)(nil),  // 1: streammachine.api.event_contracts.v1.ListEventContractsResponse
	(*GetEventContractRequest)(nil),     // 2: streammachine.api.event_contracts.v1.GetEventContractRequest
	(*GetEventContractResponse)(nil),    // 3: streammachine.api.event_contracts.v1.GetEventContractResponse
	(*CreateEventContractRequest)(nil),  // 4: streammachine.api.event_contracts.v1.CreateEventContractRequest
	(*CreateEventContractResponse)(nil), // 5: streammachine.api.event_contracts.v1.CreateEventContractResponse
	(*UpdateEventContractRequest)(nil),  // 6: streammachine.api.event_contracts.v1.UpdateEventContractRequest
	(*UpdateEventContractResponse)(nil), // 7: streammachine.api.event_contracts.v1.UpdateEventContractResponse
	(v1.FilterPublicPrivate)(0),         // 8: streammachine.api.entities.v1.FilterPublicPrivate
	(*v1.SchemaRef)(nil),                // 9: streammachine.api.entities.v1.SchemaRef
	(*v1.Label)(nil),                    // 10: streammachine.api.entities.v1.Label
	(*v1.EventContract)(nil),            // 11: streammachine.api.entities.v1.EventContract
	(*v1.EventContractRef)(nil),         // 12: streammachine.api.entities.v1.EventContractRef
	(*fieldmaskpb.FieldMask)(nil),       // 13: google.protobuf.FieldMask
}
var file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_depIdxs = []int32{
	8,  // 0: streammachine.api.event_contracts.v1.ListEventContractsRequest.public_private:type_name -> streammachine.api.entities.v1.FilterPublicPrivate
	9,  // 1: streammachine.api.event_contracts.v1.ListEventContractsRequest.schema_ref:type_name -> streammachine.api.entities.v1.SchemaRef
	10, // 2: streammachine.api.event_contracts.v1.ListEventContractsRequest.labels:type_name -> streammachine.api.entities.v1.Label
	11, // 3: streammachine.api.event_contracts.v1.ListEventContractsResponse.event_contracts:type_name -> streammachine.api.entities.v1.EventContract
	12, // 4: streammachine.api.event_contracts.v1.GetEventContractRequest.ref:type_name -> streammachine.api.entities.v1.EventContractRef
	11, // 5: streammachine.api.event_contracts.v1.GetEventContractResponse.event_contract:type_name -> streammachine.api.entities.v1.EventContract
	11, // 6: streammachine.api.event_contracts.v1.CreateEventContractRequest.event_contract:type_name -> streammachine.api.entities.v1.EventContract
	11, // 7: streammachine.api.event_contracts.v1.CreateEventContractResponse.event_contract:type_name -> streammachine.api.entities.v1.EventContract
	11, // 8: streammachine.api.event_contracts.v1.UpdateEventContractRequest.event_contract:type_name -> streammachine.api.entities.v1.EventContract
	13, // 9: streammachine.api.event_contracts.v1.UpdateEventContractRequest.update_mask:type_name -> google.protobuf.FieldMask
	11, // 10: streammachine.api.event_contracts.v1.UpdateEventContractResponse.event_contract:type_name -> streammachine.api.entities.v1.EventContract
	0,  // 11: streammachine.api.event_contracts.v1.EventContractsService.ListEventContracts:input_type -> streammachine.api.event_contracts.v1.ListEventContractsRequest
	2,  // 12: streammachine.api.event_contracts.v1.EventContractsService.GetEventContract:input_type -> streammachine.api.event_contracts.v1.GetEventContractRequest
	4,  // 13: streammachine.api.event_contracts.v1.EventContractsService.CreateEventContract:input_type -> streammachine.api.event_contracts.v1.CreateEventContractRequest
	6,  // 14: streammachine.api.event_contracts.v1.EventContractsService.UpdateEventContract:input_type -> streammachine.api.event_contracts.v1.UpdateEventContractRequest
	1,  // 15: streammachine.api.event_contracts.v1.EventContractsService.ListEventContracts:output_type -> streammachine.api.event_contracts.v1.ListEventContractsResponse
	3,  // 16: streammachine.api.event_contracts.v1.EventContractsService.GetEventContract:output_type -> streammachine.api.event_contracts.v1.GetEventContractResponse
	5,  // 17: streammachine.api.event_contracts.v1.EventContractsService.CreateEventContract:output_type -> streammachine.api.event_contracts.v1.CreateEventContractResponse
	7,  // 18: streammachine.api.event_contracts.v1.EventContractsService.UpdateEventContract:output_type -> streammachine.api.event_contracts.v1.UpdateEventContractResponse
	15, // [15:19] is the sub-list for method output_type
	11, // [11:15] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_init() }
func file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_init() {
	if File_streammachine_api_event_contracts_v1_event_contracts_v1_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEventContractsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEventContractsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventContractRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventContractResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEventContractRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEventContractResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEventContractRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEventContractResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_goTypes,
		DependencyIndexes: file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_depIdxs,
		MessageInfos:      file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_msgTypes,
	}.Build()
	File_streammachine_api_event_contracts_v1_event_contracts_v1_proto = out.File
	file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_rawDesc = nil
	file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_goTypes = nil
	file_streammachine_api_event_contracts_v1_event_contracts_v1_proto_depIdxs = nil
}
